
c_unit_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc28  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0f4  0800d0f4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0f4  0800d0f4  0001d0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0fc  0800d0fc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0fc  0800d0fc  0001d0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800d104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00009548  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  200095a8  200095a8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030989  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005f3f  00000000  00000000  00050a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029a8  00000000  00000000  000569a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000206d  00000000  00000000  00059348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000333a2  00000000  00000000  0005b3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033729  00000000  00000000  0008e757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127ef6  00000000  00000000  000c1e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b578  00000000  00000000  001e9d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001f52f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cdd0 	.word	0x0800cdd0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	0800cdd0 	.word	0x0800cdd0

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f001 fee6 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f8ee 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 fe04 	bl	8001140 <MX_GPIO_Init>
  MX_DMA_Init();
 8000538:	f000 fd8a 	bl	8001050 <MX_DMA_Init>
  MX_DMA2D_Init();
 800053c:	f000 fa4c 	bl	80009d8 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000540:	f000 fa7c 	bl	8000a3c <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000544:	f000 fdac 	bl	80010a0 <MX_FMC_Init>
  MX_LTDC_Init();
 8000548:	f000 fbd4 	bl	8000cf4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800054c:	f000 fc50 	bl	8000df0 <MX_QUADSPI_Init>
  MX_I2C1_Init();
 8000550:	f000 fb74 	bl	8000c3c <MX_I2C1_Init>
  MX_CAN1_Init();
 8000554:	f000 f9c0 	bl	80008d8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000558:	f000 f9f4 	bl	8000944 <MX_CAN2_Init>
  MX_SPI2_Init();
 800055c:	f000 fc94 	bl	8000e88 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000560:	f000 fcc8 	bl	8000ef4 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000564:	f000 fb98 	bl	8000c98 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8000568:	f000 fd46 	bl	8000ff8 <MX_USART6_UART_Init>
  MX_SDIO_SD_Init();
 800056c:	f000 fc6c 	bl	8000e48 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000570:	f009 f92c 	bl	80097cc <MX_FATFS_Init>
  MX_CRC_Init();
 8000574:	f000 fa1c 	bl	80009b0 <MX_CRC_Init>
  MX_TIM7_Init();
 8000578:	f000 fd0a 	bl	8000f90 <MX_TIM7_Init>
  MX_ADC1_Init();
 800057c:	f000 f93a 	bl	80007f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000580:	f009 fc1e 	bl	8009dc0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemCAN */
  BinarySemCANHandle = osSemaphoreNew(1, 1, &BinarySemCAN_attributes);
 8000584:	4a39      	ldr	r2, [pc, #228]	; (800066c <main+0x144>)
 8000586:	2101      	movs	r1, #1
 8000588:	2001      	movs	r0, #1
 800058a:	f009 fd10 	bl	8009fae <osSemaphoreNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a37      	ldr	r2, [pc, #220]	; (8000670 <main+0x148>)
 8000592:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000594:	4a37      	ldr	r2, [pc, #220]	; (8000674 <main+0x14c>)
 8000596:	2100      	movs	r1, #0
 8000598:	4837      	ldr	r0, [pc, #220]	; (8000678 <main+0x150>)
 800059a:	f009 fc5b 	bl	8009e54 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a36      	ldr	r2, [pc, #216]	; (800067c <main+0x154>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of StateTask */
  StateTaskHandle = osThreadNew(StartStateTask, NULL, &StateTask_attributes);
 80005a4:	4a36      	ldr	r2, [pc, #216]	; (8000680 <main+0x158>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4836      	ldr	r0, [pc, #216]	; (8000684 <main+0x15c>)
 80005aa:	f009 fc53 	bl	8009e54 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a35      	ldr	r2, [pc, #212]	; (8000688 <main+0x160>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of OutTask */
  OutTaskHandle = osThreadNew(StartOutTask, NULL, &OutTask_attributes);
 80005b4:	4a35      	ldr	r2, [pc, #212]	; (800068c <main+0x164>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4835      	ldr	r0, [pc, #212]	; (8000690 <main+0x168>)
 80005ba:	f009 fc4b 	bl	8009e54 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a34      	ldr	r2, [pc, #208]	; (8000694 <main+0x16c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of ModeTask */
  ModeTaskHandle = osThreadNew(StartModeTask, NULL, &ModeTask_attributes);
 80005c4:	4a34      	ldr	r2, [pc, #208]	; (8000698 <main+0x170>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4834      	ldr	r0, [pc, #208]	; (800069c <main+0x174>)
 80005ca:	f009 fc43 	bl	8009e54 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a33      	ldr	r2, [pc, #204]	; (80006a0 <main+0x178>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of TimeTask */
  TimeTaskHandle = osThreadNew(StartTimeTask, NULL, &TimeTask_attributes);
 80005d4:	4a33      	ldr	r2, [pc, #204]	; (80006a4 <main+0x17c>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4833      	ldr	r0, [pc, #204]	; (80006a8 <main+0x180>)
 80005da:	f009 fc3b 	bl	8009e54 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a32      	ldr	r2, [pc, #200]	; (80006ac <main+0x184>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of CAN2TxTask */
  CAN2TxTaskHandle = osThreadNew(StartCAN2TxTask, NULL, &CAN2TxTask_attributes);
 80005e4:	4a32      	ldr	r2, [pc, #200]	; (80006b0 <main+0x188>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4832      	ldr	r0, [pc, #200]	; (80006b4 <main+0x18c>)
 80005ea:	f009 fc33 	bl	8009e54 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a31      	ldr	r2, [pc, #196]	; (80006b8 <main+0x190>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of SDTask */
  SDTaskHandle = osThreadNew(StartSDTask, NULL, &SDTask_attributes);
 80005f4:	4a31      	ldr	r2, [pc, #196]	; (80006bc <main+0x194>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4831      	ldr	r0, [pc, #196]	; (80006c0 <main+0x198>)
 80005fa:	f009 fc2b 	bl	8009e54 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <main+0x19c>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of CAN1RxTxTask */
  CAN1RxTxTaskHandle = osThreadNew(StartCAN1RxTxTask, NULL, &CAN1RxTxTask_attributes);
 8000604:	4a30      	ldr	r2, [pc, #192]	; (80006c8 <main+0x1a0>)
 8000606:	2100      	movs	r1, #0
 8000608:	4830      	ldr	r0, [pc, #192]	; (80006cc <main+0x1a4>)
 800060a:	f009 fc23 	bl	8009e54 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <main+0x1a8>)
 8000612:	6013      	str	r3, [r2, #0]

  /* creation of AlarmTask */
  AlarmTaskHandle = osThreadNew(StartAlarmTask, NULL, &AlarmTask_attributes);
 8000614:	4a2f      	ldr	r2, [pc, #188]	; (80006d4 <main+0x1ac>)
 8000616:	2100      	movs	r1, #0
 8000618:	482f      	ldr	r0, [pc, #188]	; (80006d8 <main+0x1b0>)
 800061a:	f009 fc1b 	bl	8009e54 <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a2e      	ldr	r2, [pc, #184]	; (80006dc <main+0x1b4>)
 8000622:	6013      	str	r3, [r2, #0]

  /* creation of RequestTask */
  RequestTaskHandle = osThreadNew(StartRequestTask, NULL, &RequestTask_attributes);
 8000624:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <main+0x1b8>)
 8000626:	2100      	movs	r1, #0
 8000628:	482e      	ldr	r0, [pc, #184]	; (80006e4 <main+0x1bc>)
 800062a:	f009 fc13 	bl	8009e54 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a2d      	ldr	r2, [pc, #180]	; (80006e8 <main+0x1c0>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of CAN1_ReceiveTas */
  CAN1_ReceiveTasHandle = osThreadNew(StartCAN1_ReceiveTask, NULL, &CAN1_ReceiveTas_attributes);
 8000634:	4a2d      	ldr	r2, [pc, #180]	; (80006ec <main+0x1c4>)
 8000636:	2100      	movs	r1, #0
 8000638:	482d      	ldr	r0, [pc, #180]	; (80006f0 <main+0x1c8>)
 800063a:	f009 fc0b 	bl	8009e54 <osThreadNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a2c      	ldr	r2, [pc, #176]	; (80006f4 <main+0x1cc>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of CAN1_TransmitTa */
  CAN1_TransmitTaHandle = osThreadNew(StartCAN1_TransmitTask, NULL, &CAN1_TransmitTa_attributes);
 8000644:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <main+0x1d0>)
 8000646:	2100      	movs	r1, #0
 8000648:	482c      	ldr	r0, [pc, #176]	; (80006fc <main+0x1d4>)
 800064a:	f009 fc03 	bl	8009e54 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <main+0x1d8>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of AcquisitionTask */
  AcquisitionTaskHandle = osThreadNew(StartAcquisitionTask, NULL, &AcquisitionTask_attributes);
 8000654:	4a2b      	ldr	r2, [pc, #172]	; (8000704 <main+0x1dc>)
 8000656:	2100      	movs	r1, #0
 8000658:	482b      	ldr	r0, [pc, #172]	; (8000708 <main+0x1e0>)
 800065a:	f009 fbfb 	bl	8009e54 <osThreadNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a2a      	ldr	r2, [pc, #168]	; (800070c <main+0x1e4>)
 8000662:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000664:	f009 fbd0 	bl	8009e08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x140>
 800066a:	bf00      	nop
 800066c:	0800d0b0 	.word	0x0800d0b0
 8000670:	200005ec 	.word	0x200005ec
 8000674:	0800cedc 	.word	0x0800cedc
 8000678:	08001419 	.word	0x08001419
 800067c:	200005b8 	.word	0x200005b8
 8000680:	0800cf00 	.word	0x0800cf00
 8000684:	08001429 	.word	0x08001429
 8000688:	200005bc 	.word	0x200005bc
 800068c:	0800cf24 	.word	0x0800cf24
 8000690:	08001439 	.word	0x08001439
 8000694:	200005c0 	.word	0x200005c0
 8000698:	0800cf48 	.word	0x0800cf48
 800069c:	08001449 	.word	0x08001449
 80006a0:	200005c4 	.word	0x200005c4
 80006a4:	0800cf6c 	.word	0x0800cf6c
 80006a8:	08001459 	.word	0x08001459
 80006ac:	200005c8 	.word	0x200005c8
 80006b0:	0800cf90 	.word	0x0800cf90
 80006b4:	08001469 	.word	0x08001469
 80006b8:	200005cc 	.word	0x200005cc
 80006bc:	0800cfb4 	.word	0x0800cfb4
 80006c0:	08001479 	.word	0x08001479
 80006c4:	200005d0 	.word	0x200005d0
 80006c8:	0800cfd8 	.word	0x0800cfd8
 80006cc:	08001489 	.word	0x08001489
 80006d0:	200005d4 	.word	0x200005d4
 80006d4:	0800cffc 	.word	0x0800cffc
 80006d8:	08001499 	.word	0x08001499
 80006dc:	200005d8 	.word	0x200005d8
 80006e0:	0800d020 	.word	0x0800d020
 80006e4:	080014a9 	.word	0x080014a9
 80006e8:	200005dc 	.word	0x200005dc
 80006ec:	0800d044 	.word	0x0800d044
 80006f0:	080014b9 	.word	0x080014b9
 80006f4:	200005e0 	.word	0x200005e0
 80006f8:	0800d068 	.word	0x0800d068
 80006fc:	080014c9 	.word	0x080014c9
 8000700:	200005e4 	.word	0x200005e4
 8000704:	0800d08c 	.word	0x0800d08c
 8000708:	080014d9 	.word	0x080014d9
 800070c:	200005e8 	.word	0x200005e8

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2234      	movs	r2, #52	; 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00c fa6c 	bl	800cbfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <SystemClock_Config+0xdc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a2b      	ldr	r2, [pc, #172]	; (80007ec <SystemClock_Config+0xdc>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <SystemClock_Config+0xdc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <SystemClock_Config+0xe0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <SystemClock_Config+0xe0>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <SystemClock_Config+0xe0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000784:	23b4      	movs	r3, #180	; 0xb4
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000790:	2306      	movs	r3, #6
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f005 fc11 	bl	8005fc0 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a4:	f000 feb2 	bl	800150c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a8:	f004 fe68 	bl	800547c <HAL_PWREx_EnableOverDrive>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007b2:	f000 feab 	bl	800150c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2105      	movs	r1, #5
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 ff63 	bl	80056a0 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007e0:	f000 fe94 	bl	800150c <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3750      	adds	r7, #80	; 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000808:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <MX_ADC1_Init+0xdc>)
 800080a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_ADC1_Init+0xd8>)
 800080e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000812:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_ADC1_Init+0xd8>)
 800081c:	2201      	movs	r2, #1
 800081e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000822:	2201      	movs	r2, #1
 8000824:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000836:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <MX_ADC1_Init+0xe0>)
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_ADC1_Init+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000842:	2203      	movs	r2, #3
 8000844:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000850:	2201      	movs	r2, #1
 8000852:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000854:	481d      	ldr	r0, [pc, #116]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000856:	f001 fdb7 	bl	80023c8 <HAL_ADC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000860:	f000 fe54 	bl	800150c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000864:	2305      	movs	r3, #5
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800086c:	2303      	movs	r3, #3
 800086e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000876:	f001 fdeb 	bl	8002450 <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000880:	f000 fe44 	bl	800150c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000884:	2309      	movs	r3, #9
 8000886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800088c:	2304      	movs	r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_ADC1_Init+0xd8>)
 8000896:	f001 fddb 	bl	8002450 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80008a0:	f000 fe34 	bl	800150c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008a4:	230b      	movs	r3, #11
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008a8:	2303      	movs	r3, #3
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80008ac:	2305      	movs	r3, #5
 80008ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_ADC1_Init+0xd8>)
 80008b6:	f001 fdcb 	bl	8002450 <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80008c0:	f000 fe24 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000007c 	.word	0x2000007c
 80008d0:	40012000 	.word	0x40012000
 80008d4:	0f000001 	.word	0x0f000001

080008d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_CAN1_Init+0x64>)
 80008de:	4a18      	ldr	r2, [pc, #96]	; (8000940 <MX_CAN1_Init+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 250;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_CAN1_Init+0x64>)
 80008e4:	22fa      	movs	r2, #250	; 0xfa
 80008e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_CAN1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_CAN1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_CAN1_Init+0x64>)
 80008f6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80008fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_CAN1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_CAN1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_CAN1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_CAN1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_CAN1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_CAN1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_CAN1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_CAN1_Init+0x64>)
 8000928:	f001 ffc0 	bl	80028ac <HAL_CAN_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000932:	f000 fdeb 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000c4 	.word	0x200000c4
 8000940:	40006400 	.word	0x40006400

08000944 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_CAN2_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_CAN2_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 40;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_CAN2_Init+0x64>)
 8000950:	2228      	movs	r2, #40	; 0x28
 8000952:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_CAN2_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_CAN2_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_CAN2_Init+0x64>)
 8000962:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000966:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_CAN2_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_CAN2_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_CAN2_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_CAN2_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_CAN2_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_CAN2_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_CAN2_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_CAN2_Init+0x64>)
 8000994:	f001 ff8a 	bl	80028ac <HAL_CAN_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 fdb5 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000ec 	.word	0x200000ec
 80009ac:	40006800 	.word	0x40006800

080009b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_CRC_Init+0x20>)
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <MX_CRC_Init+0x24>)
 80009b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_CRC_Init+0x20>)
 80009bc:	f002 fb8c 	bl	80030d8 <HAL_CRC_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009c6:	f000 fda1 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000114 	.word	0x20000114
 80009d4:	40023000 	.word	0x40023000

080009d8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <MX_DMA2D_Init+0x60>)
 80009e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 8000a0e:	f002 ff1d 	bl	800384c <HAL_DMA2D_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a18:	f000 fd78 	bl	800150c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_DMA2D_Init+0x5c>)
 8000a20:	f003 f86e 	bl	8003b00 <HAL_DMA2D_ConfigLayer>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a2a:	f000 fd6f 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000011c 	.word	0x2000011c
 8000a38:	4002b000 	.word	0x4002b000

08000a3c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0aa      	sub	sp, #168	; 0xa8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a52:	2224      	movs	r2, #36	; 0x24
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f00c f8d0 	bl	800cbfc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a5c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a72:	2234      	movs	r2, #52	; 0x34
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00c f8c0 	bl	800cbfc <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	222c      	movs	r2, #44	; 0x2c
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f00c f8ba 	bl	800cbfc <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a88:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a8a:	4a6b      	ldr	r2, [pc, #428]	; (8000c38 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a8e:	4b69      	ldr	r3, [pc, #420]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a94:	4b67      	ldr	r3, [pc, #412]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a9a:	4b66      	ldr	r3, [pc, #408]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000aa0:	237d      	movs	r3, #125	; 0x7d
 8000aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000ab2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	485e      	ldr	r0, [pc, #376]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000aba:	f003 f8b3 	bl	8003c24 <HAL_DSI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000ac4:	f000 fd22 	bl	800150c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000afa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000afe:	4619      	mov	r1, r3
 8000b00:	484c      	ldr	r0, [pc, #304]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b02:	f003 fd3d 	bl	8004580 <HAL_DSI_ConfigHostTimeouts>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000b0c:	f000 fcfe 	bl	800150c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000b10:	231c      	movs	r3, #28
 8000b12:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000b14:	2321      	movs	r3, #33	; 0x21
 8000b16:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000b1c:	2319      	movs	r3, #25
 8000b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4841      	ldr	r0, [pc, #260]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b30:	f003 fcbc 	bl	80044ac <HAL_DSI_ConfigPhyTimer>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000b3a:	f000 fce7 	bl	800150c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b3e:	2104      	movs	r1, #4
 8000b40:	483c      	ldr	r0, [pc, #240]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b42:	f003 fc8b 	bl	800445c <HAL_DSI_ConfigFlowControl>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000b4c:	f000 fcde 	bl	800150c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b50:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b54:	4837      	ldr	r0, [pc, #220]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b56:	f003 fdd9 	bl	800470c <HAL_DSI_SetLowPowerRXFilter>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b60:	f000 fcd4 	bl	800150c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	4833      	ldr	r0, [pc, #204]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b68:	f003 f976 	bl	8003e58 <HAL_DSI_ConfigErrorMonitor>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b72:	f000 fccb 	bl	800150c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000b9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000bac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000bb0:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000bb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000bb6:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481a      	ldr	r0, [pc, #104]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bca:	f003 fbe9 	bl	80043a0 <HAL_DSI_ConfigCommand>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000bd4:	f000 fc9a 	bl	800150c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000be0:	23c8      	movs	r3, #200	; 0xc8
 8000be2:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000be4:	2310      	movs	r3, #16
 8000be6:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000bec:	2304      	movs	r3, #4
 8000bee:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	4619      	mov	r1, r3
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c0a:	f003 faf1 	bl	80041f0 <HAL_DSI_ConfigAdaptedCommandMode>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000c14:	f000 fc7a 	bl	800150c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c1c:	f003 fac0 	bl	80041a0 <HAL_DSI_SetGenericVCID>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000c26:	f000 fc71 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	37a8      	adds	r7, #168	; 0xa8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000015c 	.word	0x2000015c
 8000c38:	40016c00 	.word	0x40016c00

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <MX_I2C1_Init+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_I2C1_Init+0x58>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c7a:	f003 ff53 	bl	8004b24 <HAL_I2C_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c84:	f000 fc42 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000178 	.word	0x20000178
 8000c90:	40005400 	.word	0x40005400
 8000c94:	00061a80 	.word	0x00061a80

08000c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_I2C2_Init+0x54>)
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <MX_I2C2_Init+0x58>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 50000;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_I2C2_Init+0x54>)
 8000ca4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ca8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_I2C2_Init+0x54>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_I2C2_Init+0x54>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <MX_I2C2_Init+0x54>)
 8000cb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_I2C2_Init+0x54>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_I2C2_Init+0x54>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_I2C2_Init+0x54>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_I2C2_Init+0x54>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_I2C2_Init+0x54>)
 8000cd8:	f003 ff24 	bl	8004b24 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000ce2:	f000 fc13 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001cc 	.word	0x200001cc
 8000cf0:	40005800 	.word	0x40005800

08000cf4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	; 0x38
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2234      	movs	r2, #52	; 0x34
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f00b ff7b 	bl	800cbfc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d06:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d08:	4a38      	ldr	r2, [pc, #224]	; (8000dec <MX_LTDC_Init+0xf8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d12:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 202;
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d3e:	22ca      	movs	r2, #202	; 0xca
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8000d42:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d44:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 203;
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d4c:	22cb      	movs	r2, #203	; 0xcb
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d52:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000d56:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d70:	481d      	ldr	r0, [pc, #116]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000d72:	f004 f81b 	bl	8004dac <HAL_LTDC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 fbc6 	bl	800150c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000d84:	23c8      	movs	r3, #200	; 0xc8
 8000d86:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000d8c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d90:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d92:	2302      	movs	r3, #2
 8000d94:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d96:	23ff      	movs	r3, #255	; 0xff
 8000d98:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000da4:	2305      	movs	r3, #5
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000da8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000dae:	23c8      	movs	r3, #200	; 0xc8
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000db2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_LTDC_Init+0xf4>)
 8000dd2:	f004 f97d 	bl	80050d0 <HAL_LTDC_ConfigLayer>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000ddc:	f000 fb96 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3738      	adds	r7, #56	; 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000220 	.word	0x20000220
 8000dec:	40016800 	.word	0x40016800

08000df0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <MX_QUADSPI_Init+0x54>)
 8000df8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000e08:	2210      	movs	r2, #16
 8000e0a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 27;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000e0e:	221b      	movs	r2, #27
 8000e10:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e18:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_QUADSPI_Init+0x50>)
 8000e2e:	f004 fb75 	bl	800551c <HAL_QSPI_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000e38:	f000 fb68 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200002c8 	.word	0x200002c8
 8000e44:	a0001000 	.word	0xa0001000

08000e48 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_SDIO_SD_Init+0x38>)
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <MX_SDIO_SD_Init+0x3c>)
 8000e50:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_SDIO_SD_Init+0x38>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_SDIO_SD_Init+0x38>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_SDIO_SD_Init+0x38>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_SDIO_SD_Init+0x38>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <MX_SDIO_SD_Init+0x38>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <MX_SDIO_SD_Init+0x38>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000314 	.word	0x20000314
 8000e84:	40012c00 	.word	0x40012c00

08000e88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_SPI2_Init+0x64>)
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <MX_SPI2_Init+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_SPI2_Init+0x64>)
 8000e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_SPI2_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI2_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI2_Init+0x64>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI2_Init+0x64>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_SPI2_Init+0x64>)
 8000eda:	f006 fe44 	bl	8007b66 <HAL_SPI_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ee4:	f000 fb12 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000458 	.word	0x20000458
 8000ef0:	40003800 	.word	0x40003800

08000ef4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000 -1;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f1a:	f242 3227 	movw	r2, #8999	; 0x2327
 8000f1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f28:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f3a:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f3c:	f006 fe9c 	bl	8007c78 <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f46:	f000 fae1 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f58:	f007 f856 	bl	8008008 <HAL_TIM_ConfigClockSource>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f62:	f000 fad3 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <MX_TIM2_Init+0x98>)
 8000f74:	f007 fa72 	bl	800845c <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f7e:	f000 fac5 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200004b0 	.word	0x200004b0

08000f90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_TIM7_Init+0x60>)
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <MX_TIM7_Init+0x64>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_TIM7_Init+0x60>)
 8000fa6:	22b3      	movs	r2, #179	; 0xb3
 8000fa8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_TIM7_Init+0x60>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_TIM7_Init+0x60>)
 8000fb2:	2263      	movs	r2, #99	; 0x63
 8000fb4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_TIM7_Init+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <MX_TIM7_Init+0x60>)
 8000fbe:	f006 fe5b 	bl	8007c78 <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000fc8:	f000 faa0 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_TIM7_Init+0x60>)
 8000fda:	f007 fa3f 	bl	800845c <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000fe4:	f000 fa92 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200004f8 	.word	0x200004f8
 8000ff4:	40001400 	.word	0x40001400

08000ff8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_USART6_UART_Init+0x50>)
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <MX_USART6_UART_Init+0x54>)
 8001000:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART6_UART_Init+0x50>)
 8001004:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001008:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_USART6_UART_Init+0x50>)
 800100c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001010:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_USART6_UART_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART6_UART_Init+0x50>)
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART6_UART_Init+0x50>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART6_UART_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART6_UART_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART6_UART_Init+0x50>)
 8001034:	f007 faa2 	bl	800857c <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 800103e:	f000 fa65 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000540 	.word	0x20000540
 800104c:	40011400 	.word	0x40011400

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_DMA_Init+0x4c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <MX_DMA_Init+0x4c>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_DMA_Init+0x4c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	203b      	movs	r0, #59	; 0x3b
 8001078:	f002 f804 	bl	8003084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800107c:	203b      	movs	r0, #59	; 0x3b
 800107e:	f002 f81d 	bl	80030bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2105      	movs	r1, #5
 8001086:	2045      	movs	r0, #69	; 0x45
 8001088:	f001 fffc 	bl	8003084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800108c:	2045      	movs	r0, #69	; 0x45
 800108e:	f002 f815 	bl	80030bc <HAL_NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_FMC_Init+0x98>)
 80010ba:	4a20      	ldr	r2, [pc, #128]	; (800113c <MX_FMC_Init+0x9c>)
 80010bc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_FMC_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_FMC_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_FMC_Init+0x98>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_FMC_Init+0x98>)
 80010d2:	2220      	movs	r2, #32
 80010d4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_FMC_Init+0x98>)
 80010d8:	2240      	movs	r2, #64	; 0x40
 80010da:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_FMC_Init+0x98>)
 80010de:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80010e2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_FMC_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_FMC_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_FMC_Init+0x98>)
 80010f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_FMC_Init+0x98>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001104:	2307      	movs	r3, #7
 8001106:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800110c:	2307      	movs	r3, #7
 800110e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001110:	2303      	movs	r3, #3
 8001112:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_FMC_Init+0x98>)
 8001122:	f006 fcec 	bl	8007afe <HAL_SDRAM_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800112c:	f000 f9ee 	bl	800150c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000584 	.word	0x20000584
 800113c:	a0000140 	.word	0xa0000140

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b090      	sub	sp, #64	; 0x40
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
 800115a:	4ba8      	ldr	r3, [pc, #672]	; (80013fc <MX_GPIO_Init+0x2bc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4aa7      	ldr	r2, [pc, #668]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4ba5      	ldr	r3, [pc, #660]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	4ba1      	ldr	r3, [pc, #644]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4aa0      	ldr	r2, [pc, #640]	; (80013fc <MX_GPIO_Init+0x2bc>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b9e      	ldr	r3, [pc, #632]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
 8001192:	4b9a      	ldr	r3, [pc, #616]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a99      	ldr	r2, [pc, #612]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b97      	ldr	r3, [pc, #604]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	4b93      	ldr	r3, [pc, #588]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a92      	ldr	r2, [pc, #584]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b90      	ldr	r3, [pc, #576]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	4b8c      	ldr	r3, [pc, #560]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a8b      	ldr	r2, [pc, #556]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b89      	ldr	r3, [pc, #548]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	4b85      	ldr	r3, [pc, #532]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a84      	ldr	r2, [pc, #528]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b82      	ldr	r3, [pc, #520]	; (80013fc <MX_GPIO_Init+0x2bc>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a7d      	ldr	r2, [pc, #500]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b7b      	ldr	r3, [pc, #492]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b77      	ldr	r3, [pc, #476]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a76      	ldr	r2, [pc, #472]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001224:	f043 0320 	orr.w	r3, r3, #32
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b74      	ldr	r3, [pc, #464]	; (80013fc <MX_GPIO_Init+0x2bc>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0320 	and.w	r3, r3, #32
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b70      	ldr	r3, [pc, #448]	; (80013fc <MX_GPIO_Init+0x2bc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a6f      	ldr	r2, [pc, #444]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b69      	ldr	r3, [pc, #420]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a68      	ldr	r2, [pc, #416]	; (80013fc <MX_GPIO_Init+0x2bc>)
 800125c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b66      	ldr	r3, [pc, #408]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b62      	ldr	r3, [pc, #392]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a61      	ldr	r2, [pc, #388]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <MX_GPIO_Init+0x2bc>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2130      	movs	r1, #48	; 0x30
 800128e:	485c      	ldr	r0, [pc, #368]	; (8001400 <MX_GPIO_Init+0x2c0>)
 8001290:	f003 fc2e 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2108      	movs	r1, #8
 8001298:	485a      	ldr	r0, [pc, #360]	; (8001404 <MX_GPIO_Init+0x2c4>)
 800129a:	f003 fc29 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	4859      	ldr	r0, [pc, #356]	; (8001408 <MX_GPIO_Init+0x2c8>)
 80012a4:	f003 fc24 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2110      	movs	r1, #16
 80012ac:	4857      	ldr	r0, [pc, #348]	; (800140c <MX_GPIO_Init+0x2cc>)
 80012ae:	f003 fc1f 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2110      	movs	r1, #16
 80012b6:	4856      	ldr	r0, [pc, #344]	; (8001410 <MX_GPIO_Init+0x2d0>)
 80012b8:	f003 fc1a 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7|SPI_CS_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	21c0      	movs	r1, #192	; 0xc0
 80012c0:	4854      	ldr	r0, [pc, #336]	; (8001414 <MX_GPIO_Init+0x2d4>)
 80012c2:	f003 fc15 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80012c6:	2330      	movs	r3, #48	; 0x30
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012ca:	2311      	movs	r3, #17
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012da:	4619      	mov	r1, r3
 80012dc:	4848      	ldr	r0, [pc, #288]	; (8001400 <MX_GPIO_Init+0x2c0>)
 80012de:	f003 fa43 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e2:	2308      	movs	r3, #8
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f6:	4619      	mov	r1, r3
 80012f8:	4842      	ldr	r0, [pc, #264]	; (8001404 <MX_GPIO_Init+0x2c4>)
 80012fa:	f003 fa35 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin;
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001302:	2311      	movs	r3, #17
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(Green_LED_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001312:	4619      	mov	r1, r3
 8001314:	483c      	ldr	r0, [pc, #240]	; (8001408 <MX_GPIO_Init+0x2c8>)
 8001316:	f003 fa27 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800131a:	2304      	movs	r3, #4
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132a:	4619      	mov	r1, r3
 800132c:	4836      	ldr	r0, [pc, #216]	; (8001408 <MX_GPIO_Init+0x2c8>)
 800132e:	f003 fa1b 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001332:	2306      	movs	r3, #6
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	4831      	ldr	r0, [pc, #196]	; (800140c <MX_GPIO_Init+0x2cc>)
 8001346:	f003 fa0f 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800134a:	2310      	movs	r3, #16
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135e:	4619      	mov	r1, r3
 8001360:	482a      	ldr	r0, [pc, #168]	; (800140c <MX_GPIO_Init+0x2cc>)
 8001362:	f003 fa01 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001366:	2310      	movs	r3, #16
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137a:	4619      	mov	r1, r3
 800137c:	4824      	ldr	r0, [pc, #144]	; (8001410 <MX_GPIO_Init+0x2d0>)
 800137e:	f003 f9f3 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001386:	2311      	movs	r3, #17
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001396:	4619      	mov	r1, r3
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <MX_GPIO_Init+0x2d4>)
 800139a:	f003 f9e5 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139e:	23c0      	movs	r3, #192	; 0xc0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ae:	2305      	movs	r3, #5
 80013b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b6:	4619      	mov	r1, r3
 80013b8:	4814      	ldr	r0, [pc, #80]	; (800140c <MX_GPIO_Init+0x2cc>)
 80013ba:	f003 f9d5 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013be:	2320      	movs	r3, #32
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ce:	4619      	mov	r1, r3
 80013d0:	480e      	ldr	r0, [pc, #56]	; (800140c <MX_GPIO_Init+0x2cc>)
 80013d2:	f003 f9c9 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80013d6:	2340      	movs	r3, #64	; 0x40
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ea:	4619      	mov	r1, r3
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <MX_GPIO_Init+0x2d4>)
 80013ee:	f003 f9bb 	bl	8004768 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3740      	adds	r7, #64	; 0x40
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40022800 	.word	0x40022800
 8001408:	40021800 	.word	0x40021800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020800 	.word	0x40020800
 8001414:	40021c00 	.word	0x40021c00

08001418 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f008 fda9 	bl	8009f78 <osDelay>
 8001426:	e7fb      	b.n	8001420 <StartDefaultTask+0x8>

08001428 <StartStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStateTask */
void StartStateTask(void *argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f008 fda1 	bl	8009f78 <osDelay>
 8001436:	e7fb      	b.n	8001430 <StartStateTask+0x8>

08001438 <StartOutTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutTask */
void StartOutTask(void *argument)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f008 fd99 	bl	8009f78 <osDelay>
 8001446:	e7fb      	b.n	8001440 <StartOutTask+0x8>

08001448 <StartModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModeTask */
void StartModeTask(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModeTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f008 fd91 	bl	8009f78 <osDelay>
 8001456:	e7fb      	b.n	8001450 <StartModeTask+0x8>

08001458 <StartTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void *argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f008 fd89 	bl	8009f78 <osDelay>
 8001466:	e7fb      	b.n	8001460 <StartTimeTask+0x8>

08001468 <StartCAN2TxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCAN2TxTask */
void StartCAN2TxTask(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN2TxTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f008 fd81 	bl	8009f78 <osDelay>
 8001476:	e7fb      	b.n	8001470 <StartCAN2TxTask+0x8>

08001478 <StartSDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDTask */
void StartSDTask(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f008 fd79 	bl	8009f78 <osDelay>
 8001486:	e7fb      	b.n	8001480 <StartSDTask+0x8>

08001488 <StartCAN1RxTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCAN1RxTxTask */
void StartCAN1RxTxTask(void *argument)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN1RxTxTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f008 fd71 	bl	8009f78 <osDelay>
 8001496:	e7fb      	b.n	8001490 <StartCAN1RxTxTask+0x8>

08001498 <StartAlarmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlarmTask */
void StartAlarmTask(void *argument)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAlarmTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f008 fd69 	bl	8009f78 <osDelay>
 80014a6:	e7fb      	b.n	80014a0 <StartAlarmTask+0x8>

080014a8 <StartRequestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRequestTask */
void StartRequestTask(void *argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRequestTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f008 fd61 	bl	8009f78 <osDelay>
 80014b6:	e7fb      	b.n	80014b0 <StartRequestTask+0x8>

080014b8 <StartCAN1_ReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCAN1_ReceiveTask */
void StartCAN1_ReceiveTask(void *argument)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN1_ReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f008 fd59 	bl	8009f78 <osDelay>
 80014c6:	e7fb      	b.n	80014c0 <StartCAN1_ReceiveTask+0x8>

080014c8 <StartCAN1_TransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCAN1_TransmitTask */
void StartCAN1_TransmitTask(void *argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN1_TransmitTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f008 fd51 	bl	8009f78 <osDelay>
 80014d6:	e7fb      	b.n	80014d0 <StartCAN1_TransmitTask+0x8>

080014d8 <StartAcquisitionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcquisitionTask */
void StartAcquisitionTask(void *argument)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcquisitionTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f008 fd49 	bl	8009f78 <osDelay>
 80014e6:	e7fb      	b.n	80014e0 <StartAcquisitionTask+0x8>

080014e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014fa:	f000 ff21 	bl	8002340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40001000 	.word	0x40001000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_MspInit+0x54>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_MspInit+0x54>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x54>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_MspInit+0x54>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_MspInit+0x54>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_MspInit+0x54>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	210f      	movs	r1, #15
 800155a:	f06f 0001 	mvn.w	r0, #1
 800155e:	f001 fd91 	bl	8003084 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a31      	ldr	r2, [pc, #196]	; (8001654 <HAL_ADC_MspInit+0xe4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d15b      	bne.n	800164a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a28      	ldr	r2, [pc, #160]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001602:	2302      	movs	r3, #2
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <HAL_ADC_MspInit+0xec>)
 8001616:	f003 f8a7 	bl	8004768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800161a:	2320      	movs	r3, #32
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <HAL_ADC_MspInit+0xf0>)
 800162e:	f003 f89b 	bl	8004768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001632:	2302      	movs	r3, #2
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <HAL_ADC_MspInit+0xf4>)
 8001646:	f003 f88f 	bl	8004768 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40012000 	.word	0x40012000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a47      	ldr	r2, [pc, #284]	; (80017a4 <HAL_CAN_MspInit+0x13c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d136      	bne.n	80016f8 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_CAN_MspInit+0x140>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <HAL_CAN_MspInit+0x140>)
 8001692:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001694:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <HAL_CAN_MspInit+0x140>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d10d      	bne.n	80016b8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	4b42      	ldr	r3, [pc, #264]	; (80017ac <HAL_CAN_MspInit+0x144>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a41      	ldr	r2, [pc, #260]	; (80017ac <HAL_CAN_MspInit+0x144>)
 80016a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_CAN_MspInit+0x144>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_CAN_MspInit+0x144>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a3a      	ldr	r2, [pc, #232]	; (80017ac <HAL_CAN_MspInit+0x144>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_CAN_MspInit+0x144>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80016d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016e6:	2309      	movs	r3, #9
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	482f      	ldr	r0, [pc, #188]	; (80017b0 <HAL_CAN_MspInit+0x148>)
 80016f2:	f003 f839 	bl	8004768 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80016f6:	e050      	b.n	800179a <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <HAL_CAN_MspInit+0x14c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d14b      	bne.n	800179a <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_CAN_MspInit+0x144>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a28      	ldr	r2, [pc, #160]	; (80017ac <HAL_CAN_MspInit+0x144>)
 800170c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <HAL_CAN_MspInit+0x144>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_CAN_MspInit+0x140>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <HAL_CAN_MspInit+0x140>)
 8001726:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_CAN_MspInit+0x140>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10d      	bne.n	800174c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_CAN_MspInit+0x144>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <HAL_CAN_MspInit+0x144>)
 800173a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_CAN_MspInit+0x144>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_CAN_MspInit+0x144>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_CAN_MspInit+0x144>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	6313      	str	r3, [r2, #48]	; 0x30
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_CAN_MspInit+0x144>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001768:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800177a:	2309      	movs	r3, #9
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <HAL_CAN_MspInit+0x150>)
 8001786:	f002 ffef 	bl	8004768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2105      	movs	r1, #5
 800178e:	2041      	movs	r0, #65	; 0x41
 8001790:	f001 fc78 	bl	8003084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001794:	2041      	movs	r0, #65	; 0x41
 8001796:	f001 fc91 	bl	80030bc <HAL_NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3730      	adds	r7, #48	; 0x30
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40006400 	.word	0x40006400
 80017a8:	200005f0 	.word	0x200005f0
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40006800 	.word	0x40006800
 80017b8:	40020400 	.word	0x40020400

080017bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_CRC_MspInit+0x3c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10d      	bne.n	80017ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_CRC_MspInit+0x40>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_CRC_MspInit+0x40>)
 80017d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <HAL_CRC_MspInit+0x40>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023000 	.word	0x40023000
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_DMA2D_MspInit+0x48>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d115      	bne.n	800183e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_DMA2D_MspInit+0x4c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_DMA2D_MspInit+0x4c>)
 800181c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_DMA2D_MspInit+0x4c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2105      	movs	r1, #5
 8001832:	205a      	movs	r0, #90	; 0x5a
 8001834:	f001 fc26 	bl	8003084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001838:	205a      	movs	r0, #90	; 0x5a
 800183a:	f001 fc3f 	bl	80030bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	4002b000 	.word	0x4002b000
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_DSI_MspInit+0x94>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d133      	bne.n	80018da <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_DSI_MspInit+0x98>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <HAL_DSI_MspInit+0x98>)
 800187c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_DSI_MspInit+0x98>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_DSI_MspInit+0x98>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <HAL_DSI_MspInit+0x98>)
 8001898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_DSI_MspInit+0x98>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018aa:	2304      	movs	r3, #4
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80018ba:	230d      	movs	r3, #13
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <HAL_DSI_MspInit+0x9c>)
 80018c6:	f002 ff4f 	bl	8004768 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2105      	movs	r1, #5
 80018ce:	205c      	movs	r0, #92	; 0x5c
 80018d0:	f001 fbd8 	bl	8003084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80018d4:	205c      	movs	r0, #92	; 0x5c
 80018d6:	f001 fbf1 	bl	80030bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40016c00 	.word	0x40016c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40022400 	.word	0x40022400

080018f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <HAL_I2C_MspInit+0xe8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12d      	bne.n	800196e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_I2C_MspInit+0xec>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800192e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001934:	2312      	movs	r3, #18
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001938:	2301      	movs	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001940:	2304      	movs	r3, #4
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4825      	ldr	r0, [pc, #148]	; (80019e0 <HAL_I2C_MspInit+0xf0>)
 800194c:	f002 ff0c 	bl	8004768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_I2C_MspInit+0xec>)
 800195a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800196c:	e030      	b.n	80019d0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <HAL_I2C_MspInit+0xf4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12b      	bne.n	80019d0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_I2C_MspInit+0xec>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_I2C_MspInit+0xec>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001994:	2330      	movs	r3, #48	; 0x30
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001998:	2312      	movs	r3, #18
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019a4:	2304      	movs	r3, #4
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	480e      	ldr	r0, [pc, #56]	; (80019e8 <HAL_I2C_MspInit+0xf8>)
 80019b0:	f002 feda 	bl	8004768 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_I2C_MspInit+0xec>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_I2C_MspInit+0xec>)
 80019be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_I2C_MspInit+0xec>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3730      	adds	r7, #48	; 0x30
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40005400 	.word	0x40005400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40005800 	.word	0x40005800
 80019e8:	40021c00 	.word	0x40021c00

080019ec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b092      	sub	sp, #72	; 0x48
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	223c      	movs	r2, #60	; 0x3c
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00b f8fd 	bl	800cbfc <memset>
  if(hltdc->Instance==LTDC)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_LTDC_MspInit+0x78>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d127      	bne.n	8001a5c <HAL_LTDC_MspInit+0x70>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001a10:	2332      	movs	r3, #50	; 0x32
 8001a12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 f88f 	bl	8005b44 <HAL_RCCEx_PeriphCLKConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001a2c:	f7ff fd6e 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_LTDC_MspInit+0x7c>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <HAL_LTDC_MspInit+0x7c>)
 8001a3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_LTDC_MspInit+0x7c>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2105      	movs	r1, #5
 8001a50:	2058      	movs	r0, #88	; 0x58
 8001a52:	f001 fb17 	bl	8003084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001a56:	2058      	movs	r0, #88	; 0x58
 8001a58:	f001 fb30 	bl	80030bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3748      	adds	r7, #72	; 0x48
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40016800 	.word	0x40016800
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_QSPI_MspInit+0xe4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d15b      	bne.n	8001b46 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6393      	str	r3, [r2, #56]	; 0x38
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_QSPI_MspInit+0xe8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ae2:	2340      	movs	r3, #64	; 0x40
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001af2:	230a      	movs	r3, #10
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <HAL_QSPI_MspInit+0xec>)
 8001afe:	f002 fe33 	bl	8004768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001b02:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b14:	2309      	movs	r3, #9
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480f      	ldr	r0, [pc, #60]	; (8001b5c <HAL_QSPI_MspInit+0xf0>)
 8001b20:	f002 fe22 	bl	8004768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001b36:	230a      	movs	r3, #10
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4806      	ldr	r0, [pc, #24]	; (8001b5c <HAL_QSPI_MspInit+0xf0>)
 8001b42:	f002 fe11 	bl	8004768 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	a0001000 	.word	0xa0001000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40021400 	.word	0x40021400

08001b60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b09a      	sub	sp, #104	; 0x68
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b78:	f107 0318 	add.w	r3, r7, #24
 8001b7c:	223c      	movs	r2, #60	; 0x3c
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00b f83b 	bl	800cbfc <memset>
  if(hsd->Instance==SDIO)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7a      	ldr	r2, [pc, #488]	; (8001d74 <HAL_SD_MspInit+0x214>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	f040 80ed 	bne.w	8001d6c <HAL_SD_MspInit+0x20c>
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_SDIO;
 8001b92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 ffcd 	bl	8005b44 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001bb0:	f7ff fcac 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001bbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc4:	4b6c      	ldr	r3, [pc, #432]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a67      	ldr	r2, [pc, #412]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6313      	str	r3, [r2, #48]	; 0x30
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	4b61      	ldr	r3, [pc, #388]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001bf6:	f043 0308 	orr.w	r3, r3, #8
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <HAL_SD_MspInit+0x218>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c22:	4619      	mov	r1, r3
 8001c24:	4855      	ldr	r0, [pc, #340]	; (8001d7c <HAL_SD_MspInit+0x21c>)
 8001c26:	f002 fd9f 	bl	8004768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8001c2a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c2e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c44:	4619      	mov	r1, r3
 8001c46:	484d      	ldr	r0, [pc, #308]	; (8001d7c <HAL_SD_MspInit+0x21c>)
 8001c48:	f002 fd8e 	bl	8004768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c5c:	230c      	movs	r3, #12
 8001c5e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c64:	4619      	mov	r1, r3
 8001c66:	4846      	ldr	r0, [pc, #280]	; (8001d80 <HAL_SD_MspInit+0x220>)
 8001c68:	f002 fd7e 	bl	8004768 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001c6c:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001c6e:	4a46      	ldr	r2, [pc, #280]	; (8001d88 <HAL_SD_MspInit+0x228>)
 8001c70:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001c72:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001c74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c78:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c7a:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c80:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c86:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c8c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c94:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001c98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c9c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ca4:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001ca6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001caa:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001cae:	2204      	movs	r2, #4
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001cb8:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001cba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001cc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001cc8:	482e      	ldr	r0, [pc, #184]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001cca:	f001 fa21 	bl	8003110 <HAL_DMA_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_SD_MspInit+0x178>
    {
      Error_Handler();
 8001cd4:	f7ff fc1a 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cde:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_SD_MspInit+0x224>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001ce6:	4a2a      	ldr	r2, [pc, #168]	; (8001d90 <HAL_SD_MspInit+0x230>)
 8001ce8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d04:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d0c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d18:	2220      	movs	r2, #32
 8001d1a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d1e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d22:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d26:	2204      	movs	r2, #4
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001d40:	4812      	ldr	r0, [pc, #72]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d42:	f001 f9e5 	bl	8003110 <HAL_DMA_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_SD_MspInit+0x1f0>
    {
      Error_Handler();
 8001d4c:	f7ff fbde 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d54:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <HAL_SD_MspInit+0x22c>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2105      	movs	r1, #5
 8001d60:	2031      	movs	r0, #49	; 0x31
 8001d62:	f001 f98f 	bl	8003084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001d66:	2031      	movs	r0, #49	; 0x31
 8001d68:	f001 f9a8 	bl	80030bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3768      	adds	r7, #104	; 0x68
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	20000398 	.word	0x20000398
 8001d88:	40026458 	.word	0x40026458
 8001d8c:	200003f8 	.word	0x200003f8
 8001d90:	400264a0 	.word	0x400264a0

08001d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <HAL_SPI_MspInit+0xc0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d14a      	bne.n	8001e4c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_SPI_MspInit+0xc4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e16:	2302      	movs	r3, #2
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <HAL_SPI_MspInit+0xc8>)
 8001e26:	f002 fc9f 	bl	8004768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <HAL_SPI_MspInit+0xcc>)
 8001e48:	f002 fc8e 	bl	8004768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40003800 	.word	0x40003800
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40020400 	.word	0x40020400

08001e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e74:	d116      	bne.n	8001ea4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_TIM_Base_MspInit+0x80>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <HAL_TIM_Base_MspInit+0x80>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_TIM_Base_MspInit+0x80>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2105      	movs	r1, #5
 8001e96:	201c      	movs	r0, #28
 8001e98:	f001 f8f4 	bl	8003084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e9c:	201c      	movs	r0, #28
 8001e9e:	f001 f90d 	bl	80030bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ea2:	e01a      	b.n	8001eda <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_TIM_Base_MspInit+0x84>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d115      	bne.n	8001eda <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_TIM_Base_MspInit+0x80>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_TIM_Base_MspInit+0x80>)
 8001eb8:	f043 0320 	orr.w	r3, r3, #32
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_TIM_Base_MspInit+0x80>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2105      	movs	r1, #5
 8001ece:	2037      	movs	r0, #55	; 0x37
 8001ed0:	f001 f8d8 	bl	8003084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ed4:	2037      	movs	r0, #55	; 0x37
 8001ed6:	f001 f8f1 	bl	80030bc <HAL_NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40001400 	.word	0x40001400

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_UART_MspInit+0x84>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12c      	bne.n	8001f68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_UART_MspInit+0x88>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_UART_MspInit+0x88>)
 8001f18:	f043 0320 	orr.w	r3, r3, #32
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_UART_MspInit+0x88>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_UART_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_UART_MspInit+0x88>)
 8001f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_UART_MspInit+0x88>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001f46:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <HAL_UART_MspInit+0x8c>)
 8001f64:	f002 fc00 	bl	8004768 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40011400 	.word	0x40011400
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40021800 	.word	0x40021800

08001f7c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001f90:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_FMC_MspInit+0x128>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 8081 	bne.w	800209c <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <HAL_FMC_MspInit+0x128>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_FMC_MspInit+0x12c>)
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	4a3f      	ldr	r2, [pc, #252]	; (80020a8 <HAL_FMC_MspInit+0x12c>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
 8001fb0:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_FMC_MspInit+0x12c>)
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001fbc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001fc0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fce:	230c      	movs	r3, #12
 8001fd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4835      	ldr	r0, [pc, #212]	; (80020ac <HAL_FMC_MspInit+0x130>)
 8001fd8:	f002 fbc6 	bl	8004768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001fdc:	f248 1333 	movw	r3, #33075	; 0x8133
 8001fe0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	482e      	ldr	r0, [pc, #184]	; (80020b0 <HAL_FMC_MspInit+0x134>)
 8001ff8:	f002 fbb6 	bl	8004768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001ffc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002000:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800200e:	230c      	movs	r3, #12
 8002010:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4827      	ldr	r0, [pc, #156]	; (80020b4 <HAL_FMC_MspInit+0x138>)
 8002018:	f002 fba6 	bl	8004768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800201c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002020:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800202e:	230c      	movs	r3, #12
 8002030:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4820      	ldr	r0, [pc, #128]	; (80020b8 <HAL_FMC_MspInit+0x13c>)
 8002038:	f002 fb96 	bl	8004768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800203c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002040:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800204e:	230c      	movs	r3, #12
 8002050:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4819      	ldr	r0, [pc, #100]	; (80020bc <HAL_FMC_MspInit+0x140>)
 8002058:	f002 fb86 	bl	8004768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 800205c:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8002060:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800206e:	230c      	movs	r3, #12
 8002070:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4812      	ldr	r0, [pc, #72]	; (80020c0 <HAL_FMC_MspInit+0x144>)
 8002078:	f002 fb76 	bl	8004768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800207c:	2301      	movs	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800208c:	230c      	movs	r3, #12
 800208e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	4619      	mov	r1, r3
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <HAL_FMC_MspInit+0x148>)
 8002096:	f002 fb67 	bl	8004768 <HAL_GPIO_Init>
 800209a:	e000      	b.n	800209e <HAL_FMC_MspInit+0x122>
    return;
 800209c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200005f4 	.word	0x200005f4
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40021800 	.word	0x40021800
 80020b4:	40020c00 	.word	0x40020c00
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021400 	.word	0x40021400
 80020c0:	40021c00 	.word	0x40021c00
 80020c4:	40020800 	.word	0x40020800

080020c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80020d0:	f7ff ff54 	bl	8001f7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	; 0x30
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	2036      	movs	r0, #54	; 0x36
 80020f2:	f000 ffc7 	bl	8003084 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020f6:	2036      	movs	r0, #54	; 0x36
 80020f8:	f000 ffe0 	bl	80030bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_InitTick+0xa4>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_InitTick+0xa4>)
 8002106:	f043 0310 	orr.w	r3, r3, #16
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_InitTick+0xa4>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002118:	f107 0210 	add.w	r2, r7, #16
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fcdc 	bl	8005ae0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002128:	f003 fcb2 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 800212c:	4603      	mov	r3, r0
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	4a13      	ldr	r2, [pc, #76]	; (8002184 <HAL_InitTick+0xa8>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9b      	lsrs	r3, r3, #18
 800213c:	3b01      	subs	r3, #1
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_InitTick+0xac>)
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_InitTick+0xb0>)
 8002144:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_InitTick+0xac>)
 8002148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800214c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800214e:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_InitTick+0xac>)
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_InitTick+0xac>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_InitTick+0xac>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002160:	4809      	ldr	r0, [pc, #36]	; (8002188 <HAL_InitTick+0xac>)
 8002162:	f005 fd89 	bl	8007c78 <HAL_TIM_Base_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d104      	bne.n	8002176 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800216c:	4806      	ldr	r0, [pc, #24]	; (8002188 <HAL_InitTick+0xac>)
 800216e:	f005 fdd3 	bl	8007d18 <HAL_TIM_Base_Start_IT>
 8002172:	4603      	mov	r3, r0
 8002174:	e000      	b.n	8002178 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	3730      	adds	r7, #48	; 0x30
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40023800 	.word	0x40023800
 8002184:	431bde83 	.word	0x431bde83
 8002188:	200005f8 	.word	0x200005f8
 800218c:	40001000 	.word	0x40001000

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <NMI_Handler+0x4>

08002196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <HardFault_Handler+0x4>

0800219c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <MemManage_Handler+0x4>

080021a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <UsageFault_Handler+0x4>

080021ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <TIM2_IRQHandler+0x10>)
 80021c2:	f005 fe19 	bl	8007df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200004b0 	.word	0x200004b0

080021d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <SDIO_IRQHandler+0x10>)
 80021d6:	f004 fbe7 	bl	80069a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000314 	.word	0x20000314

080021e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM6_DAC_IRQHandler+0x10>)
 80021ea:	f005 fe05 	bl	8007df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200005f8 	.word	0x200005f8

080021f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <TIM7_IRQHandler+0x10>)
 80021fe:	f005 fdfb 	bl	8007df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200004f8 	.word	0x200004f8

0800220c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA2_Stream3_IRQHandler+0x10>)
 8002212:	f001 f8a5 	bl	8003360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000398 	.word	0x20000398

08002220 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <CAN2_RX1_IRQHandler+0x10>)
 8002226:	f000 fc3c 	bl	8002aa2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200000ec 	.word	0x200000ec

08002234 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <DMA2_Stream6_IRQHandler+0x10>)
 800223a:	f001 f891 	bl	8003360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200003f8 	.word	0x200003f8

08002248 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <LTDC_IRQHandler+0x10>)
 800224e:	f002 fe7d 	bl	8004f4c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000220 	.word	0x20000220

0800225c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <DMA2D_IRQHandler+0x10>)
 8002262:	f001 fb3c 	bl	80038de <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000011c 	.word	0x2000011c

08002270 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <DSI_IRQHandler+0x10>)
 8002276:	f001 feac 	bl	8003fd2 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000015c 	.word	0x2000015c

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022d2:	f7ff ffd7 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f00a fcef 	bl	800ccb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7fe f925 	bl	8000528 <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80022ec:	0800d104 	.word	0x0800d104
  ldr r2, =_sbss
 80022f0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80022f4:	200095a8 	.word	0x200095a8

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 fea2 	bl	800306e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff fed6 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff f8f2 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000008 	.word	0x20000008
 8002364:	20000640 	.word	0x20000640

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000640 	.word	0x20000640

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000008 	.word	0x20000008

080023c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e033      	b.n	8002446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff f8c2 	bl	8001570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f94a 	bl	80026b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
 8002436:	e001      	b.n	800243c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e113      	b.n	8002694 <HAL_ADC_ConfigChannel+0x244>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b09      	cmp	r3, #9
 800247a:	d925      	bls.n	80024c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68d9      	ldr	r1, [r3, #12]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	3b1e      	subs	r3, #30
 8002492:	2207      	movs	r2, #7
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43da      	mvns	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	400a      	ands	r2, r1
 80024a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68d9      	ldr	r1, [r3, #12]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	4603      	mov	r3, r0
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4403      	add	r3, r0
 80024ba:	3b1e      	subs	r3, #30
 80024bc:	409a      	lsls	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	e022      	b.n	800250e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6919      	ldr	r1, [r3, #16]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	2207      	movs	r2, #7
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	400a      	ands	r2, r1
 80024ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6919      	ldr	r1, [r3, #16]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4403      	add	r3, r0
 8002504:	409a      	lsls	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b06      	cmp	r3, #6
 8002514:	d824      	bhi.n	8002560 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b05      	subs	r3, #5
 8002528:	221f      	movs	r2, #31
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b05      	subs	r3, #5
 8002552:	fa00 f203 	lsl.w	r2, r0, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	635a      	str	r2, [r3, #52]	; 0x34
 800255e:	e04c      	b.n	80025fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d824      	bhi.n	80025b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b23      	subs	r3, #35	; 0x23
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43da      	mvns	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	400a      	ands	r2, r1
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	3b23      	subs	r3, #35	; 0x23
 80025a4:	fa00 f203 	lsl.w	r2, r0, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	e023      	b.n	80025fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b41      	subs	r3, #65	; 0x41
 80025c4:	221f      	movs	r2, #31
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b41      	subs	r3, #65	; 0x41
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fa:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_ADC_ConfigChannel+0x250>)
 80025fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a28      	ldr	r2, [pc, #160]	; (80026a4 <HAL_ADC_ConfigChannel+0x254>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10f      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d8>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b12      	cmp	r3, #18
 800260e:	d10b      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_ADC_ConfigChannel+0x254>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12b      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <HAL_ADC_ConfigChannel+0x258>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x1f4>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b11      	cmp	r3, #17
 8002642:	d122      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_ADC_ConfigChannel+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_ADC_ConfigChannel+0x25c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <HAL_ADC_ConfigChannel+0x260>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	0c9a      	lsrs	r2, r3, #18
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800267c:	e002      	b.n	8002684 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3b01      	subs	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f9      	bne.n	800267e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40012300 	.word	0x40012300
 80026a4:	40012000 	.word	0x40012000
 80026a8:	10000012 	.word	0x10000012
 80026ac:	20000000 	.word	0x20000000
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026bc:	4b79      	ldr	r3, [pc, #484]	; (80028a4 <ADC_Init+0x1f0>)
 80026be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	021a      	lsls	r2, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800270c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <ADC_Init+0x1f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800275a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800277c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e00f      	b.n	80027b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0202 	bic.w	r2, r2, #2
 80027c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7e1b      	ldrb	r3, [r3, #24]
 80027cc:	005a      	lsls	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	3b01      	subs	r3, #1
 800280c:	035a      	lsls	r2, r3, #13
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	e007      	b.n	8002828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002826:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	3b01      	subs	r3, #1
 8002844:	051a      	lsls	r2, r3, #20
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800285c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800286a:	025a      	lsls	r2, r3, #9
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	029a      	lsls	r2, r3, #10
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40012300 	.word	0x40012300
 80028a8:	0f000001 	.word	0x0f000001

080028ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0ed      	b.n	8002a9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fecc 	bl	8001668 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e0:	f7ff fd42 	bl	8002368 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028e6:	e012      	b.n	800290e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028e8:	f7ff fd3e 	bl	8002368 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b0a      	cmp	r3, #10
 80028f4:	d90b      	bls.n	800290e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2205      	movs	r2, #5
 8002906:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0c5      	b.n	8002a9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0e5      	beq.n	80028e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0202 	bic.w	r2, r2, #2
 800292a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292c:	f7ff fd1c 	bl	8002368 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002932:	e012      	b.n	800295a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002934:	f7ff fd18 	bl	8002368 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b0a      	cmp	r3, #10
 8002940:	d90b      	bls.n	800295a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2205      	movs	r2, #5
 8002952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e09f      	b.n	8002a9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e5      	bne.n	8002934 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7e1b      	ldrb	r3, [r3, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d108      	bne.n	8002982 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e007      	b.n	8002992 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7e5b      	ldrb	r3, [r3, #25]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e007      	b.n	80029bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7e9b      	ldrb	r3, [r3, #26]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d108      	bne.n	80029d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e007      	b.n	80029e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0220 	bic.w	r2, r2, #32
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7edb      	ldrb	r3, [r3, #27]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d108      	bne.n	8002a00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0210 	bic.w	r2, r2, #16
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e007      	b.n	8002a10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0210 	orr.w	r2, r2, #16
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7f1b      	ldrb	r3, [r3, #28]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d108      	bne.n	8002a2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0208 	orr.w	r2, r2, #8
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e007      	b.n	8002a3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7f5b      	ldrb	r3, [r3, #29]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d108      	bne.n	8002a54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0204 	orr.w	r2, r2, #4
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e007      	b.n	8002a64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	ea42 0103 	orr.w	r1, r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b08a      	sub	sp, #40	; 0x28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d07c      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d023      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2201      	movs	r2, #1
 8002af8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f983 	bl	8002e10 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b0a:	e016      	b.n	8002b3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e00c      	b.n	8002b3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e002      	b.n	8002b3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f989 	bl	8002e4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d024      	beq.n	8002b8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f963 	bl	8002e24 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b5e:	e016      	b.n	8002b8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e00c      	b.n	8002b8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	e002      	b.n	8002b8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f969 	bl	8002e60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d024      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f943 	bl	8002e38 <HAL_CAN_TxMailbox2CompleteCallback>
 8002bb2:	e016      	b.n	8002be2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	e00c      	b.n	8002be2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	e002      	b.n	8002be2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f949 	bl	8002e74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2210      	movs	r2, #16
 8002c04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00b      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2208      	movs	r2, #8
 8002c20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f93a 	bl	8002e9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f921 	bl	8002e88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2210      	movs	r2, #16
 8002c68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00b      	beq.n	8002c8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2208      	movs	r2, #8
 8002c84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f91c 	bl	8002ec4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f903 	bl	8002eb0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f906 	bl	8002ed8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f8ff 	bl	8002eec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d07b      	beq.n	8002df0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d072      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d043      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03e      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d02b      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x32a>
 8002d74:	2b60      	cmp	r3, #96	; 0x60
 8002d76:	d82e      	bhi.n	8002dd6 <HAL_CAN_IRQHandler+0x334>
 8002d78:	2b50      	cmp	r3, #80	; 0x50
 8002d7a:	d022      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x320>
 8002d7c:	2b50      	cmp	r3, #80	; 0x50
 8002d7e:	d82a      	bhi.n	8002dd6 <HAL_CAN_IRQHandler+0x334>
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d019      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x316>
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d826      	bhi.n	8002dd6 <HAL_CAN_IRQHandler+0x334>
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d010      	beq.n	8002dae <HAL_CAN_IRQHandler+0x30c>
 8002d8c:	2b30      	cmp	r3, #48	; 0x30
 8002d8e:	d822      	bhi.n	8002dd6 <HAL_CAN_IRQHandler+0x334>
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d002      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x2f8>
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d005      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d98:	e01d      	b.n	8002dd6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f043 0308 	orr.w	r3, r3, #8
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002da2:	e019      	b.n	8002dd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f043 0310 	orr.w	r3, r3, #16
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dac:	e014      	b.n	8002dd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f043 0320 	orr.w	r3, r3, #32
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db6:	e00f      	b.n	8002dd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dc0:	e00a      	b.n	8002dd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dca:	e005      	b.n	8002dd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dd4:	e000      	b.n	8002dd8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002dd6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002de6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2204      	movs	r2, #4
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f87c 	bl	8002f00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3728      	adds	r7, #40	; 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60d3      	str	r3, [r2, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0b      	blt.n	8002fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <__NVIC_EnableIRQ+0x38>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db0a      	blt.n	8002fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	490c      	ldr	r1, [pc, #48]	; (8003000 <__NVIC_SetPriority+0x4c>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fdc:	e00a      	b.n	8002ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <__NVIC_SetPriority+0x50>)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3b04      	subs	r3, #4
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	761a      	strb	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f1c3 0307 	rsb	r3, r3, #7
 8003022:	2b04      	cmp	r3, #4
 8003024:	bf28      	it	cs
 8003026:	2304      	movcs	r3, #4
 8003028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3304      	adds	r3, #4
 800302e:	2b06      	cmp	r3, #6
 8003030:	d902      	bls.n	8003038 <NVIC_EncodePriority+0x30>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3b03      	subs	r3, #3
 8003036:	e000      	b.n	800303a <NVIC_EncodePriority+0x32>
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	401a      	ands	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003050:	f04f 31ff 	mov.w	r1, #4294967295
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43d9      	mvns	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	4313      	orrs	r3, r2
         );
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ff4c 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003096:	f7ff ff61 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 800309a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	6978      	ldr	r0, [r7, #20]
 80030a2:	f7ff ffb1 	bl	8003008 <NVIC_EncodePriority>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff80 	bl	8002fb4 <__NVIC_SetPriority>
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff54 	bl	8002f78 <__NVIC_EnableIRQ>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00e      	b.n	8003108 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	795b      	ldrb	r3, [r3, #5]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe fb5e 	bl	80017bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7ff f924 	bl	8002368 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e099      	b.n	8003260 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800314c:	e00f      	b.n	800316e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800314e:	f7ff f90b 	bl	8002368 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b05      	cmp	r3, #5
 800315a:	d908      	bls.n	800316e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2203      	movs	r2, #3
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e078      	b.n	8003260 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e8      	bne.n	800314e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_DMA_Init+0x158>)
 8003188:	4013      	ands	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800319a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d107      	bne.n	80031d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4313      	orrs	r3, r2
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0307 	bic.w	r3, r3, #7
 80031ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d117      	bne.n	8003232 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa9d 	bl	8003754 <DMA_CheckFifoParam>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2240      	movs	r2, #64	; 0x40
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800322e:	2301      	movs	r3, #1
 8003230:	e016      	b.n	8003260 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa54 	bl	80036e8 <DMA_CalcBaseAndBitshift>
 8003240:	4603      	mov	r3, r0
 8003242:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	223f      	movs	r2, #63	; 0x3f
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	f010803f 	.word	0xf010803f

0800326c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_DMA_Start_IT+0x26>
 800328e:	2302      	movs	r3, #2
 8003290:	e040      	b.n	8003314 <HAL_DMA_Start_IT+0xa8>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d12f      	bne.n	8003306 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f9e6 	bl	800368c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	223f      	movs	r2, #63	; 0x3f
 80032c6:	409a      	lsls	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0216 	orr.w	r2, r2, #22
 80032da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e005      	b.n	8003312 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d004      	beq.n	800333a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e00c      	b.n	8003354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2205      	movs	r2, #5
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800336c:	4b8e      	ldr	r3, [pc, #568]	; (80035a8 <HAL_DMA_IRQHandler+0x248>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a8e      	ldr	r2, [pc, #568]	; (80035ac <HAL_DMA_IRQHandler+0x24c>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0a9b      	lsrs	r3, r3, #10
 8003378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2208      	movs	r2, #8
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01a      	beq.n	80033cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	2208      	movs	r2, #8
 80033ba:	409a      	lsls	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2201      	movs	r2, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d012      	beq.n	8003402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	2201      	movs	r2, #1
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f043 0202 	orr.w	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2204      	movs	r2, #4
 8003408:	409a      	lsls	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d012      	beq.n	8003438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00b      	beq.n	8003438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	2204      	movs	r2, #4
 8003426:	409a      	lsls	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f043 0204 	orr.w	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2210      	movs	r2, #16
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d043      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03c      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	2210      	movs	r2, #16
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d018      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d024      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
 800348e:	e01f      	b.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	e016      	b.n	80034d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0208 	bic.w	r2, r2, #8
 80034be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2220      	movs	r2, #32
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 808f 	beq.w	8003600 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8087 	beq.w	8003600 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2220      	movs	r2, #32
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b05      	cmp	r3, #5
 8003508:	d136      	bne.n	8003578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0216 	bic.w	r2, r2, #22
 8003518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_DMA_IRQHandler+0x1da>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0208 	bic.w	r2, r2, #8
 8003548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	223f      	movs	r2, #63	; 0x3f
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356a:	2b00      	cmp	r3, #0
 800356c:	d07e      	beq.n	800366c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
        }
        return;
 8003576:	e079      	b.n	800366c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01d      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10d      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	2b00      	cmp	r3, #0
 800359a:	d031      	beq.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
 80035a4:	e02c      	b.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
 80035a6:	bf00      	nop
 80035a8:	20000000 	.word	0x20000000
 80035ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d023      	beq.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
 80035c0:	e01e      	b.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10f      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0210 	bic.w	r2, r2, #16
 80035de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	2b00      	cmp	r3, #0
 8003606:	d032      	beq.n	800366e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d022      	beq.n	800365a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2205      	movs	r2, #5
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	3301      	adds	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	429a      	cmp	r2, r3
 8003636:	d307      	bcc.n	8003648 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f2      	bne.n	800362c <HAL_DMA_IRQHandler+0x2cc>
 8003646:	e000      	b.n	800364a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003648:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	e000      	b.n	800366e <HAL_DMA_IRQHandler+0x30e>
        return;
 800366c:	bf00      	nop
    }
  }
}
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d108      	bne.n	80036cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ca:	e007      	b.n	80036dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	3b10      	subs	r3, #16
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <DMA_CalcBaseAndBitshift+0x64>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <DMA_CalcBaseAndBitshift+0x68>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d909      	bls.n	800372a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	1d1a      	adds	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	659a      	str	r2, [r3, #88]	; 0x58
 8003728:	e007      	b.n	800373a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	aaaaaaab 	.word	0xaaaaaaab
 8003750:	0800d0d8 	.word	0x0800d0d8

08003754 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11f      	bne.n	80037ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d856      	bhi.n	8003822 <DMA_CheckFifoParam+0xce>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <DMA_CheckFifoParam+0x28>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	0800378d 	.word	0x0800378d
 8003780:	0800379f 	.word	0x0800379f
 8003784:	0800378d 	.word	0x0800378d
 8003788:	08003823 	.word	0x08003823
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d046      	beq.n	8003826 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379c:	e043      	b.n	8003826 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a6:	d140      	bne.n	800382a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ac:	e03d      	b.n	800382a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b6:	d121      	bne.n	80037fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d837      	bhi.n	800382e <DMA_CheckFifoParam+0xda>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <DMA_CheckFifoParam+0x70>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037db 	.word	0x080037db
 80037cc:	080037d5 	.word	0x080037d5
 80037d0:	080037ed 	.word	0x080037ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e030      	b.n	800383c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d025      	beq.n	8003832 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ea:	e022      	b.n	8003832 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037f4:	d11f      	bne.n	8003836 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037fa:	e01c      	b.n	8003836 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d903      	bls.n	800380a <DMA_CheckFifoParam+0xb6>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d003      	beq.n	8003810 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003808:	e018      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      break;
 800380e:	e015      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00e      	beq.n	800383a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e00b      	b.n	800383a <DMA_CheckFifoParam+0xe6>
      break;
 8003822:	bf00      	nop
 8003824:	e00a      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e008      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
 800382c:	e006      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
 8003830:	e004      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
 8003834:	e002      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;   
 8003836:	bf00      	nop
 8003838:	e000      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
    }
  } 
  
  return status; 
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop

0800384c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e03b      	b.n	80038d6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd ffc4 	bl	8001800 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	f023 0107 	bic.w	r1, r3, #7
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68d1      	ldr	r1, [r2, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d026      	beq.n	800394e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d021      	beq.n	800394e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003918:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	f043 0201 	orr.w	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2201      	movs	r2, #1
 800392c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d026      	beq.n	80039a6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d021      	beq.n	80039a6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003970:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2220      	movs	r2, #32
 8003978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	f043 0202 	orr.w	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2204      	movs	r2, #4
 800398a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d026      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d021      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2208      	movs	r2, #8
 80039d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	f043 0204 	orr.w	r2, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2204      	movs	r2, #4
 80039e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a20:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2204      	movs	r2, #4
 8003a28:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f853 	bl	8003ad6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d024      	beq.n	8003a84 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01f      	beq.n	8003a84 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01f      	beq.n	8003ace <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01a      	beq.n	8003ace <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f80e 	bl	8003aea <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA2D_ConfigLayer+0x20>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e079      	b.n	8003c14 <HAL_DMA2D_ConfigLayer+0x114>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	3318      	adds	r3, #24
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b4a:	4b35      	ldr	r3, [pc, #212]	; (8003c20 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b4c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b0a      	cmp	r3, #10
 8003b54:	d003      	beq.n	8003b5e <HAL_DMA2D_ConfigLayer+0x5e>
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b09      	cmp	r3, #9
 8003b5c:	d107      	bne.n	8003b6e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e005      	b.n	8003b7a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d120      	bne.n	8003bc2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	ea02 0103 	and.w	r1, r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b0a      	cmp	r3, #10
 8003ba8:	d003      	beq.n	8003bb2 <HAL_DMA2D_ConfigLayer+0xb2>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b09      	cmp	r3, #9
 8003bb0:	d127      	bne.n	8003c02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc0:	e01f      	b.n	8003c02 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	ea02 0103 	and.w	r1, r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b0a      	cmp	r3, #10
 8003bea:	d003      	beq.n	8003bf4 <HAL_DMA2D_ConfigLayer+0xf4>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b09      	cmp	r3, #9
 8003bf2:	d106      	bne.n	8003c02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c00:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	ff03000f 	.word	0xff03000f

08003c24 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e108      	b.n	8003e4a <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	7c5b      	ldrb	r3, [r3, #17]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd fe04 	bl	8001850 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c62:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c76:	f7fe fb77 	bl	8002368 <HAL_GetTick>
 8003c7a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003c7c:	e009      	b.n	8003c92 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c7e:	f7fe fb73 	bl	8002368 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c8c:	d901      	bls.n	8003c92 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0db      	b.n	8003e4a <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ed      	beq.n	8003c7e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003cb2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003cb6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	02db      	lsls	r3, r3, #11
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d0a:	f7fe fb2d 	bl	8002368 <HAL_GetTick>
 8003d0e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d10:	e009      	b.n	8003d26 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d12:	f7fe fb29 	bl	8002368 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d20:	d901      	bls.n	8003d26 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e091      	b.n	8003e4a <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ed      	beq.n	8003d12 <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0206 	orr.w	r2, r2, #6
 8003d46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0203 	bic.w	r2, r2, #3
 8003d5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0203 	bic.w	r2, r2, #3
 8003d88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003db0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6899      	ldr	r1, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_DSI_Init+0x1ae>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	e000      	b.n	8003dd4 <HAL_DSI_Init+0x1b0>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <HAL_DSI_Init+0x230>)
 8003dda:	fb03 f202 	mul.w	r2, r3, r2
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	409a      	lsls	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003e0a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	003d0900 	.word	0x003d0900

08003e58 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7c1b      	ldrb	r3, [r3, #16]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_DSI_ConfigErrorMonitor+0x16>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e0ab      	b.n	8003fc6 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003ea8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003eac:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003eca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0202 	orr.w	r2, r2, #2
 8003f06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 020c 	orr.w	r2, r2, #12
 8003f24:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0210 	orr.w	r2, r2, #16
 8003f42:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0220 	orr.w	r2, r2, #32
 8003f60:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003fba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00f      	beq.n	800400a <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f8ad 	bl	8004164 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00f      	beq.n	800403a <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2202      	movs	r2, #2
 8004030:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f89f 	bl	8004178 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 808c 	beq.w	800415c <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800404c:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004064:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f043 0202 	orr.w	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f043 0208 	orr.w	r2, r3, #8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f043 0210 	orr.w	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f818 	bl	800418c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7c1b      	ldrb	r3, [r3, #16]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_DSI_SetGenericVCID+0x16>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e016      	b.n	80041e4 <HAL_DSI_SetGenericVCID+0x44>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0203 	bic.w	r2, r2, #3
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7c1b      	ldrb	r3, [r3, #16]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004202:	2302      	movs	r3, #2
 8004204:	e0c5      	b.n	8004392 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0203 	bic.w	r2, r2, #3
 8004252:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68d9      	ldr	r1, [r3, #12]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0207 	bic.w	r2, r2, #7
 8004274:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6959      	ldr	r1, [r3, #20]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	431a      	orrs	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 020f 	bic.w	r2, r2, #15
 80042a2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6919      	ldr	r1, [r3, #16]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 020e 	bic.w	r2, r2, #14
 80042c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	005a      	lsls	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004314:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	431a      	orrs	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0202 	orr.w	r2, r2, #2
 8004386:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7c1b      	ldrb	r3, [r3, #16]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_DSI_ConfigCommand+0x16>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e049      	b.n	800444a <HAL_DSI_ConfigCommand+0xaa>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_DSI_ConfigCommand+0xb8>)
 80043c8:	400b      	ands	r3, r1
 80043ca:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80043da:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80043e0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80043e6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80043ec:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80043f2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80043f8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80043fe:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004404:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800440a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004410:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004416:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0202 	bic.w	r2, r2, #2
 800442e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	fef080ff 	.word	0xfef080ff

0800445c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7c1b      	ldrb	r3, [r3, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_DSI_ConfigFlowControl+0x16>
 800446e:	2302      	movs	r3, #2
 8004470:	e016      	b.n	80044a0 <HAL_DSI_ConfigFlowControl+0x44>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 021f 	bic.w	r2, r2, #31
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7c1b      	ldrb	r3, [r3, #16]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_DSI_ConfigPhyTimer+0x16>
 80044be:	2302      	movs	r3, #2
 80044c0:	e058      	b.n	8004574 <HAL_DSI_ConfigPhyTimer+0xc8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bf38      	it	cc
 80044d4:	4613      	movcc	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80044e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	041a      	lsls	r2, r3, #16
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004516:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004550:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	021a      	lsls	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7c1b      	ldrb	r3, [r3, #16]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004592:	2302      	movs	r3, #2
 8004594:	e0b4      	b.n	8004700 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80045aa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6899      	ldr	r1, [r3, #8]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	b292      	uxth	r2, r2
 80045cc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	041a      	lsls	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	0c1b      	lsrs	r3, r3, #16
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800468a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	041b      	lsls	r3, r3, #16
 80046b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	0c1b      	lsrs	r3, r3, #16
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7c1b      	ldrb	r3, [r3, #16]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800471e:	2302      	movs	r3, #2
 8004720:	e01b      	b.n	800475a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004738:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	065a      	lsls	r2, r3, #25
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004768:	b480      	push	{r7}
 800476a:	b089      	sub	sp, #36	; 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e177      	b.n	8004a74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004784:	2201      	movs	r2, #1
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4013      	ands	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	429a      	cmp	r2, r3
 800479e:	f040 8166 	bne.w	8004a6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d005      	beq.n	80047ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d130      	bne.n	800481c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	2203      	movs	r2, #3
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047f0:	2201      	movs	r2, #1
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 0201 	and.w	r2, r3, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d017      	beq.n	8004858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d123      	bne.n	80048ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	08da      	lsrs	r2, r3, #3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3208      	adds	r2, #8
 800486c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	220f      	movs	r2, #15
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	08da      	lsrs	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3208      	adds	r2, #8
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	2203      	movs	r2, #3
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0203 	and.w	r2, r3, #3
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80c0 	beq.w	8004a6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	4b66      	ldr	r3, [pc, #408]	; (8004a8c <HAL_GPIO_Init+0x324>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	4a65      	ldr	r2, [pc, #404]	; (8004a8c <HAL_GPIO_Init+0x324>)
 80048f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048fc:	6453      	str	r3, [r2, #68]	; 0x44
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <HAL_GPIO_Init+0x324>)
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800490a:	4a61      	ldr	r2, [pc, #388]	; (8004a90 <HAL_GPIO_Init+0x328>)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	089b      	lsrs	r3, r3, #2
 8004910:	3302      	adds	r3, #2
 8004912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	220f      	movs	r2, #15
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <HAL_GPIO_Init+0x32c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d037      	beq.n	80049a6 <HAL_GPIO_Init+0x23e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a57      	ldr	r2, [pc, #348]	; (8004a98 <HAL_GPIO_Init+0x330>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d031      	beq.n	80049a2 <HAL_GPIO_Init+0x23a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a56      	ldr	r2, [pc, #344]	; (8004a9c <HAL_GPIO_Init+0x334>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02b      	beq.n	800499e <HAL_GPIO_Init+0x236>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a55      	ldr	r2, [pc, #340]	; (8004aa0 <HAL_GPIO_Init+0x338>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d025      	beq.n	800499a <HAL_GPIO_Init+0x232>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a54      	ldr	r2, [pc, #336]	; (8004aa4 <HAL_GPIO_Init+0x33c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01f      	beq.n	8004996 <HAL_GPIO_Init+0x22e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a53      	ldr	r2, [pc, #332]	; (8004aa8 <HAL_GPIO_Init+0x340>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d019      	beq.n	8004992 <HAL_GPIO_Init+0x22a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a52      	ldr	r2, [pc, #328]	; (8004aac <HAL_GPIO_Init+0x344>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_GPIO_Init+0x226>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a51      	ldr	r2, [pc, #324]	; (8004ab0 <HAL_GPIO_Init+0x348>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00d      	beq.n	800498a <HAL_GPIO_Init+0x222>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a50      	ldr	r2, [pc, #320]	; (8004ab4 <HAL_GPIO_Init+0x34c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <HAL_GPIO_Init+0x21e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a4f      	ldr	r2, [pc, #316]	; (8004ab8 <HAL_GPIO_Init+0x350>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <HAL_GPIO_Init+0x21a>
 800497e:	2309      	movs	r3, #9
 8004980:	e012      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 8004982:	230a      	movs	r3, #10
 8004984:	e010      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 8004986:	2308      	movs	r3, #8
 8004988:	e00e      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 800498a:	2307      	movs	r3, #7
 800498c:	e00c      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 800498e:	2306      	movs	r3, #6
 8004990:	e00a      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 8004992:	2305      	movs	r3, #5
 8004994:	e008      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 8004996:	2304      	movs	r3, #4
 8004998:	e006      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 800499a:	2303      	movs	r3, #3
 800499c:	e004      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 800499e:	2302      	movs	r3, #2
 80049a0:	e002      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 80049a6:	2300      	movs	r3, #0
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	f002 0203 	and.w	r2, r2, #3
 80049ae:	0092      	lsls	r2, r2, #2
 80049b0:	4093      	lsls	r3, r2
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b8:	4935      	ldr	r1, [pc, #212]	; (8004a90 <HAL_GPIO_Init+0x328>)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	3302      	adds	r3, #2
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049c6:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <HAL_GPIO_Init+0x354>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049ea:	4a34      	ldr	r2, [pc, #208]	; (8004abc <HAL_GPIO_Init+0x354>)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049f0:	4b32      	ldr	r3, [pc, #200]	; (8004abc <HAL_GPIO_Init+0x354>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a14:	4a29      	ldr	r2, [pc, #164]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a3e:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	f67f ae84 	bls.w	8004784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40013800 	.word	0x40013800
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40020400 	.word	0x40020400
 8004a9c:	40020800 	.word	0x40020800
 8004aa0:	40020c00 	.word	0x40020c00
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40021400 	.word	0x40021400
 8004aac:	40021800 	.word	0x40021800
 8004ab0:	40021c00 	.word	0x40021c00
 8004ab4:	40022000 	.word	0x40022000
 8004ab8:	40022400 	.word	0x40022400
 8004abc:	40013c00 	.word	0x40013c00

08004ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	e001      	b.n	8004ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b0c:	e003      	b.n	8004b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e12b      	b.n	8004d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fed0 	bl	80018f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	; 0x24
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b88:	f000 ff82 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 8004b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4a81      	ldr	r2, [pc, #516]	; (8004d98 <HAL_I2C_Init+0x274>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d807      	bhi.n	8004ba8 <HAL_I2C_Init+0x84>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a80      	ldr	r2, [pc, #512]	; (8004d9c <HAL_I2C_Init+0x278>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	bf94      	ite	ls
 8004ba0:	2301      	movls	r3, #1
 8004ba2:	2300      	movhi	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e006      	b.n	8004bb6 <HAL_I2C_Init+0x92>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a7d      	ldr	r2, [pc, #500]	; (8004da0 <HAL_I2C_Init+0x27c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	bf94      	ite	ls
 8004bb0:	2301      	movls	r3, #1
 8004bb2:	2300      	movhi	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e0e7      	b.n	8004d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a78      	ldr	r2, [pc, #480]	; (8004da4 <HAL_I2C_Init+0x280>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0c9b      	lsrs	r3, r3, #18
 8004bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4a6a      	ldr	r2, [pc, #424]	; (8004d98 <HAL_I2C_Init+0x274>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d802      	bhi.n	8004bf8 <HAL_I2C_Init+0xd4>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	e009      	b.n	8004c0c <HAL_I2C_Init+0xe8>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	4a69      	ldr	r2, [pc, #420]	; (8004da8 <HAL_I2C_Init+0x284>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	099b      	lsrs	r3, r3, #6
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	495c      	ldr	r1, [pc, #368]	; (8004d98 <HAL_I2C_Init+0x274>)
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d819      	bhi.n	8004c60 <HAL_I2C_Init+0x13c>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1e59      	subs	r1, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c40:	400b      	ands	r3, r1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_I2C_Init+0x138>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1e59      	subs	r1, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c54:	3301      	adds	r3, #1
 8004c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5a:	e051      	b.n	8004d00 <HAL_I2C_Init+0x1dc>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	e04f      	b.n	8004d00 <HAL_I2C_Init+0x1dc>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d111      	bne.n	8004c8c <HAL_I2C_Init+0x168>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1e58      	subs	r0, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	440b      	add	r3, r1
 8004c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	e012      	b.n	8004cb2 <HAL_I2C_Init+0x18e>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1e58      	subs	r0, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	0099      	lsls	r1, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Init+0x196>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e022      	b.n	8004d00 <HAL_I2C_Init+0x1dc>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_I2C_Init+0x1bc>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1e58      	subs	r0, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	440b      	add	r3, r1
 8004cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cde:	e00f      	b.n	8004d00 <HAL_I2C_Init+0x1dc>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e58      	subs	r0, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6859      	ldr	r1, [r3, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	0099      	lsls	r1, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	6809      	ldr	r1, [r1, #0]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69da      	ldr	r2, [r3, #28]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6911      	ldr	r1, [r2, #16]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68d2      	ldr	r2, [r2, #12]
 8004d3a:	4311      	orrs	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	000186a0 	.word	0x000186a0
 8004d9c:	001e847f 	.word	0x001e847f
 8004da0:	003d08ff 	.word	0x003d08ff
 8004da4:	431bde83 	.word	0x431bde83
 8004da8:	10624dd3 	.word	0x10624dd3

08004dac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e0bf      	b.n	8004f3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc fe0a 	bl	80019ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004dee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6999      	ldr	r1, [r3, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b4a      	ldr	r3, [pc, #296]	; (8004f48 <HAL_LTDC_Init+0x19c>)
 8004e20:	400b      	ands	r3, r1
 8004e22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6899      	ldr	r1, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68d9      	ldr	r1, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <HAL_LTDC_Init+0x19c>)
 8004e4e:	400b      	ands	r3, r1
 8004e50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68d9      	ldr	r1, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6919      	ldr	r1, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b33      	ldr	r3, [pc, #204]	; (8004f48 <HAL_LTDC_Init+0x19c>)
 8004e7c:	400b      	ands	r3, r1
 8004e7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	041b      	lsls	r3, r3, #16
 8004e86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6919      	ldr	r1, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6959      	ldr	r1, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <HAL_LTDC_Init+0x19c>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6959      	ldr	r1, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0206 	orr.w	r2, r2, #6
 8004f1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	f000f800 	.word	0xf000f800

08004f4c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d023      	beq.n	8004fb6 <HAL_LTDC_IRQHandler+0x6a>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01e      	beq.n	8004fb6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0204 	bic.w	r2, r2, #4
 8004f86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f86f 	bl	8005094 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d023      	beq.n	8005008 <HAL_LTDC_IRQHandler+0xbc>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01e      	beq.n	8005008 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0202 	bic.w	r2, r2, #2
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fe8:	f043 0202 	orr.w	r2, r3, #2
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f846 	bl	8005094 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01b      	beq.n	800504a <HAL_LTDC_IRQHandler+0xfe>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d016      	beq.n	800504a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2201      	movs	r2, #1
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f82f 	bl	80050a8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <HAL_LTDC_IRQHandler+0x140>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0208 	bic.w	r2, r2, #8
 800506c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2208      	movs	r2, #8
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f818 	bl	80050bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050d0:	b5b0      	push	{r4, r5, r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_LTDC_ConfigLayer+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e02c      	b.n	8005144 <HAL_LTDC_ConfigLayer+0x74>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2134      	movs	r1, #52	; 0x34
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	4413      	add	r3, r2
 8005106:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4614      	mov	r4, r2
 800510e:	461d      	mov	r5, r3
 8005110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800511a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f811 	bl	800514c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2201      	movs	r2, #1
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bdb0      	pop	{r4, r5, r7, pc}

0800514c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800514c:	b480      	push	{r7}
 800514e:	b089      	sub	sp, #36	; 0x24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005168:	4413      	add	r3, r2
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	01db      	lsls	r3, r3, #7
 8005178:	4413      	add	r3, r2
 800517a:	3384      	adds	r3, #132	; 0x84
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	4611      	mov	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	01d2      	lsls	r2, r2, #7
 8005188:	440a      	add	r2, r1
 800518a:	3284      	adds	r2, #132	; 0x84
 800518c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005190:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a2:	4413      	add	r3, r2
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4619      	mov	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	01db      	lsls	r3, r3, #7
 80051b0:	440b      	add	r3, r1
 80051b2:	3384      	adds	r3, #132	; 0x84
 80051b4:	4619      	mov	r1, r3
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ca:	4413      	add	r3, r2
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	01db      	lsls	r3, r3, #7
 80051da:	4413      	add	r3, r2
 80051dc:	3384      	adds	r3, #132	; 0x84
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	4611      	mov	r1, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	01d2      	lsls	r2, r2, #7
 80051ea:	440a      	add	r2, r1
 80051ec:	3284      	adds	r2, #132	; 0x84
 80051ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005202:	4413      	add	r3, r2
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4619      	mov	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	01db      	lsls	r3, r3, #7
 8005210:	440b      	add	r3, r1
 8005212:	3384      	adds	r3, #132	; 0x84
 8005214:	4619      	mov	r1, r3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	01db      	lsls	r3, r3, #7
 8005226:	4413      	add	r3, r2
 8005228:	3384      	adds	r3, #132	; 0x84
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	4611      	mov	r1, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	01d2      	lsls	r2, r2, #7
 8005236:	440a      	add	r2, r1
 8005238:	3284      	adds	r2, #132	; 0x84
 800523a:	f023 0307 	bic.w	r3, r3, #7
 800523e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	01db      	lsls	r3, r3, #7
 800524a:	4413      	add	r3, r2
 800524c:	3384      	adds	r3, #132	; 0x84
 800524e:	461a      	mov	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	01db      	lsls	r3, r3, #7
 800527c:	4413      	add	r3, r2
 800527e:	3384      	adds	r3, #132	; 0x84
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	01db      	lsls	r3, r3, #7
 800528c:	4413      	add	r3, r2
 800528e:	3384      	adds	r3, #132	; 0x84
 8005290:	461a      	mov	r2, r3
 8005292:	2300      	movs	r3, #0
 8005294:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800529c:	461a      	mov	r2, r3
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4619      	mov	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	01db      	lsls	r3, r3, #7
 80052b0:	440b      	add	r3, r1
 80052b2:	3384      	adds	r3, #132	; 0x84
 80052b4:	4619      	mov	r1, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	01db      	lsls	r3, r3, #7
 80052c6:	4413      	add	r3, r2
 80052c8:	3384      	adds	r3, #132	; 0x84
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	4611      	mov	r1, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	01d2      	lsls	r2, r2, #7
 80052d6:	440a      	add	r2, r1
 80052d8:	3284      	adds	r2, #132	; 0x84
 80052da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	01db      	lsls	r3, r3, #7
 80052ea:	4413      	add	r3, r2
 80052ec:	3384      	adds	r3, #132	; 0x84
 80052ee:	461a      	mov	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	01db      	lsls	r3, r3, #7
 8005300:	4413      	add	r3, r2
 8005302:	3384      	adds	r3, #132	; 0x84
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	4611      	mov	r1, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	01d2      	lsls	r2, r2, #7
 8005310:	440a      	add	r2, r1
 8005312:	3284      	adds	r2, #132	; 0x84
 8005314:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005318:	f023 0307 	bic.w	r3, r3, #7
 800531c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	6809      	ldr	r1, [r1, #0]
 800532a:	4608      	mov	r0, r1
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	01c9      	lsls	r1, r1, #7
 8005330:	4401      	add	r1, r0
 8005332:	3184      	adds	r1, #132	; 0x84
 8005334:	4313      	orrs	r3, r2
 8005336:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	01db      	lsls	r3, r3, #7
 8005342:	4413      	add	r3, r2
 8005344:	3384      	adds	r3, #132	; 0x84
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	01db      	lsls	r3, r3, #7
 8005352:	4413      	add	r3, r2
 8005354:	3384      	adds	r3, #132	; 0x84
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	01db      	lsls	r3, r3, #7
 8005366:	4413      	add	r3, r2
 8005368:	3384      	adds	r3, #132	; 0x84
 800536a:	461a      	mov	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800537a:	2304      	movs	r3, #4
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	e01b      	b.n	80053b8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d102      	bne.n	800538e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005388:	2303      	movs	r3, #3
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e014      	b.n	80053b8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d00b      	beq.n	80053ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800539a:	2b02      	cmp	r3, #2
 800539c:	d007      	beq.n	80053ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d003      	beq.n	80053ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053aa:	2b07      	cmp	r3, #7
 80053ac:	d102      	bne.n	80053b4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80053ae:	2302      	movs	r3, #2
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	e001      	b.n	80053b8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80053b4:	2301      	movs	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	4413      	add	r3, r2
 80053c4:	3384      	adds	r3, #132	; 0x84
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	4611      	mov	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	01d2      	lsls	r2, r2, #7
 80053d2:	440a      	add	r2, r1
 80053d4:	3284      	adds	r2, #132	; 0x84
 80053d6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80053da:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	041a      	lsls	r2, r3, #16
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6859      	ldr	r1, [r3, #4]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1acb      	subs	r3, r1, r3
 80053f2:	69f9      	ldr	r1, [r7, #28]
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	3303      	adds	r3, #3
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	6809      	ldr	r1, [r1, #0]
 80053fe:	4608      	mov	r0, r1
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	01c9      	lsls	r1, r1, #7
 8005404:	4401      	add	r1, r0
 8005406:	3184      	adds	r1, #132	; 0x84
 8005408:	4313      	orrs	r3, r2
 800540a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	01db      	lsls	r3, r3, #7
 8005416:	4413      	add	r3, r2
 8005418:	3384      	adds	r3, #132	; 0x84
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	4611      	mov	r1, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	01d2      	lsls	r2, r2, #7
 8005426:	440a      	add	r2, r1
 8005428:	3284      	adds	r2, #132	; 0x84
 800542a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800542e:	f023 0307 	bic.w	r3, r3, #7
 8005432:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	01db      	lsls	r3, r3, #7
 800543e:	4413      	add	r3, r2
 8005440:	3384      	adds	r3, #132	; 0x84
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	01db      	lsls	r3, r3, #7
 8005454:	4413      	add	r3, r2
 8005456:	3384      	adds	r3, #132	; 0x84
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	4611      	mov	r1, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	01d2      	lsls	r2, r2, #7
 8005464:	440a      	add	r2, r1
 8005466:	3284      	adds	r2, #132	; 0x84
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6013      	str	r3, [r2, #0]
}
 800546e:	bf00      	nop
 8005470:	3724      	adds	r7, #36	; 0x24
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4b20      	ldr	r3, [pc, #128]	; (800550c <HAL_PWREx_EnableOverDrive+0x90>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	4a1f      	ldr	r2, [pc, #124]	; (800550c <HAL_PWREx_EnableOverDrive+0x90>)
 8005490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005494:	6413      	str	r3, [r2, #64]	; 0x40
 8005496:	4b1d      	ldr	r3, [pc, #116]	; (800550c <HAL_PWREx_EnableOverDrive+0x90>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <HAL_PWREx_EnableOverDrive+0x94>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054a8:	f7fc ff5e 	bl	8002368 <HAL_GetTick>
 80054ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054ae:	e009      	b.n	80054c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054b0:	f7fc ff5a 	bl	8002368 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054be:	d901      	bls.n	80054c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e01f      	b.n	8005504 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054c4:	4b13      	ldr	r3, [pc, #76]	; (8005514 <HAL_PWREx_EnableOverDrive+0x98>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d0:	d1ee      	bne.n	80054b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054d2:	4b11      	ldr	r3, [pc, #68]	; (8005518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054d4:	2201      	movs	r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054d8:	f7fc ff46 	bl	8002368 <HAL_GetTick>
 80054dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054de:	e009      	b.n	80054f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054e0:	f7fc ff42 	bl	8002368 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ee:	d901      	bls.n	80054f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e007      	b.n	8005504 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054f4:	4b07      	ldr	r3, [pc, #28]	; (8005514 <HAL_PWREx_EnableOverDrive+0x98>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005500:	d1ee      	bne.n	80054e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	420e0040 	.word	0x420e0040
 8005514:	40007000 	.word	0x40007000
 8005518:	420e0044 	.word	0x420e0044

0800551c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af02      	add	r7, sp, #8
 8005522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005524:	f7fc ff20 	bl	8002368 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e069      	b.n	8005608 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fc fa8f 	bl	8001a6c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800554e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f85e 	bl	8005614 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	3b01      	subs	r3, #1
 8005568:	021a      	lsls	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	2120      	movs	r1, #32
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f856 	bl	8005630 <QSPI_WaitFlagStateUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005588:	7afb      	ldrb	r3, [r7, #11]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d137      	bne.n	80055fe <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005598:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6852      	ldr	r2, [r2, #4]
 80055a0:	0611      	lsls	r1, r2, #24
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68d2      	ldr	r2, [r2, #12]
 80055a6:	4311      	orrs	r1, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	69d2      	ldr	r2, [r2, #28]
 80055ac:	4311      	orrs	r1, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6a12      	ldr	r2, [r2, #32]
 80055b2:	4311      	orrs	r1, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	430b      	orrs	r3, r1
 80055ba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4b13      	ldr	r3, [pc, #76]	; (8005610 <HAL_QSPI_Init+0xf4>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6912      	ldr	r2, [r2, #16]
 80055ca:	0411      	lsls	r1, r2, #16
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6952      	ldr	r2, [r2, #20]
 80055d0:	4311      	orrs	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6992      	ldr	r2, [r2, #24]
 80055d6:	4311      	orrs	r1, r2
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	430b      	orrs	r3, r1
 80055de:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005606:	7afb      	ldrb	r3, [r7, #11]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	ffe0f8fe 	.word	0xffe0f8fe

08005614 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005640:	e01a      	b.n	8005678 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d016      	beq.n	8005678 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564a:	f7fc fe8d 	bl	8002368 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	429a      	cmp	r2, r3
 8005658:	d302      	bcc.n	8005660 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10b      	bne.n	8005678 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2204      	movs	r2, #4
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	f043 0201 	orr.w	r2, r3, #1
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e00e      	b.n	8005696 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf14      	ite	ne
 8005686:	2301      	movne	r3, #1
 8005688:	2300      	moveq	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	429a      	cmp	r2, r3
 8005692:	d1d6      	bne.n	8005642 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0cc      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b4:	4b68      	ldr	r3, [pc, #416]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d90c      	bls.n	80056dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c2:	4b65      	ldr	r3, [pc, #404]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ca:	4b63      	ldr	r3, [pc, #396]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0b8      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d020      	beq.n	800572a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f4:	4b59      	ldr	r3, [pc, #356]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4a58      	ldr	r2, [pc, #352]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800570c:	4b53      	ldr	r3, [pc, #332]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4a52      	ldr	r2, [pc, #328]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005718:	4b50      	ldr	r3, [pc, #320]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	494d      	ldr	r1, [pc, #308]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d044      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d107      	bne.n	800574e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573e:	4b47      	ldr	r3, [pc, #284]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d119      	bne.n	800577e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e07f      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d003      	beq.n	800575e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575a:	2b03      	cmp	r3, #3
 800575c:	d107      	bne.n	800576e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800575e:	4b3f      	ldr	r3, [pc, #252]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e06f      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576e:	4b3b      	ldr	r3, [pc, #236]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e067      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800577e:	4b37      	ldr	r3, [pc, #220]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f023 0203 	bic.w	r2, r3, #3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4934      	ldr	r1, [pc, #208]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	4313      	orrs	r3, r2
 800578e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005790:	f7fc fdea 	bl	8002368 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005796:	e00a      	b.n	80057ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005798:	f7fc fde6 	bl	8002368 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e04f      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ae:	4b2b      	ldr	r3, [pc, #172]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 020c 	and.w	r2, r3, #12
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	429a      	cmp	r2, r3
 80057be:	d1eb      	bne.n	8005798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057c0:	4b25      	ldr	r3, [pc, #148]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d20c      	bcs.n	80057e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b22      	ldr	r3, [pc, #136]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d6:	4b20      	ldr	r3, [pc, #128]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d001      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e032      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f4:	4b19      	ldr	r3, [pc, #100]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4916      	ldr	r1, [pc, #88]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	490e      	ldr	r1, [pc, #56]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	4313      	orrs	r3, r2
 8005824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005826:	f000 f821 	bl	800586c <HAL_RCC_GetSysClockFreq>
 800582a:	4602      	mov	r2, r0
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	091b      	lsrs	r3, r3, #4
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	490a      	ldr	r1, [pc, #40]	; (8005860 <HAL_RCC_ClockConfig+0x1c0>)
 8005838:	5ccb      	ldrb	r3, [r1, r3]
 800583a:	fa22 f303 	lsr.w	r3, r2, r3
 800583e:	4a09      	ldr	r2, [pc, #36]	; (8005864 <HAL_RCC_ClockConfig+0x1c4>)
 8005840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_RCC_ClockConfig+0x1c8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7fc fc48 	bl	80020dc <HAL_InitTick>

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40023c00 	.word	0x40023c00
 800585c:	40023800 	.word	0x40023800
 8005860:	0800d0c0 	.word	0x0800d0c0
 8005864:	20000000 	.word	0x20000000
 8005868:	20000004 	.word	0x20000004

0800586c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800586c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005870:	b094      	sub	sp, #80	; 0x50
 8005872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
 8005878:	2300      	movs	r3, #0
 800587a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800587c:	2300      	movs	r3, #0
 800587e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005884:	4b79      	ldr	r3, [pc, #484]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 030c 	and.w	r3, r3, #12
 800588c:	2b08      	cmp	r3, #8
 800588e:	d00d      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x40>
 8005890:	2b08      	cmp	r3, #8
 8005892:	f200 80e1 	bhi.w	8005a58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_RCC_GetSysClockFreq+0x34>
 800589a:	2b04      	cmp	r3, #4
 800589c:	d003      	beq.n	80058a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800589e:	e0db      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058a0:	4b73      	ldr	r3, [pc, #460]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x204>)
 80058a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058a4:	e0db      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058a6:	4b73      	ldr	r3, [pc, #460]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x208>)
 80058a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058aa:	e0d8      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058ac:	4b6f      	ldr	r3, [pc, #444]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b6:	4b6d      	ldr	r3, [pc, #436]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d063      	beq.n	800598a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c2:	4b6a      	ldr	r3, [pc, #424]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	2200      	movs	r2, #0
 80058ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80058cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d4:	633b      	str	r3, [r7, #48]	; 0x30
 80058d6:	2300      	movs	r3, #0
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
 80058da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058de:	4622      	mov	r2, r4
 80058e0:	462b      	mov	r3, r5
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f04f 0100 	mov.w	r1, #0
 80058ea:	0159      	lsls	r1, r3, #5
 80058ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058f0:	0150      	lsls	r0, r2, #5
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4621      	mov	r1, r4
 80058f8:	1a51      	subs	r1, r2, r1
 80058fa:	6139      	str	r1, [r7, #16]
 80058fc:	4629      	mov	r1, r5
 80058fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005910:	4659      	mov	r1, fp
 8005912:	018b      	lsls	r3, r1, #6
 8005914:	4651      	mov	r1, sl
 8005916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800591a:	4651      	mov	r1, sl
 800591c:	018a      	lsls	r2, r1, #6
 800591e:	4651      	mov	r1, sl
 8005920:	ebb2 0801 	subs.w	r8, r2, r1
 8005924:	4659      	mov	r1, fp
 8005926:	eb63 0901 	sbc.w	r9, r3, r1
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800593a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800593e:	4690      	mov	r8, r2
 8005940:	4699      	mov	r9, r3
 8005942:	4623      	mov	r3, r4
 8005944:	eb18 0303 	adds.w	r3, r8, r3
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	462b      	mov	r3, r5
 800594c:	eb49 0303 	adc.w	r3, r9, r3
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800595e:	4629      	mov	r1, r5
 8005960:	024b      	lsls	r3, r1, #9
 8005962:	4621      	mov	r1, r4
 8005964:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005968:	4621      	mov	r1, r4
 800596a:	024a      	lsls	r2, r1, #9
 800596c:	4610      	mov	r0, r2
 800596e:	4619      	mov	r1, r3
 8005970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005972:	2200      	movs	r2, #0
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
 8005976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800597c:	f7fa fc40 	bl	8000200 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4613      	mov	r3, r2
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005988:	e058      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598a:	4b38      	ldr	r3, [pc, #224]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	2200      	movs	r2, #0
 8005992:	4618      	mov	r0, r3
 8005994:	4611      	mov	r1, r2
 8005996:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800599a:	623b      	str	r3, [r7, #32]
 800599c:	2300      	movs	r3, #0
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
 80059a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	f04f 0000 	mov.w	r0, #0
 80059ac:	f04f 0100 	mov.w	r1, #0
 80059b0:	0159      	lsls	r1, r3, #5
 80059b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b6:	0150      	lsls	r0, r2, #5
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4641      	mov	r1, r8
 80059be:	ebb2 0a01 	subs.w	sl, r2, r1
 80059c2:	4649      	mov	r1, r9
 80059c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059dc:	ebb2 040a 	subs.w	r4, r2, sl
 80059e0:	eb63 050b 	sbc.w	r5, r3, fp
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	00eb      	lsls	r3, r5, #3
 80059ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059f2:	00e2      	lsls	r2, r4, #3
 80059f4:	4614      	mov	r4, r2
 80059f6:	461d      	mov	r5, r3
 80059f8:	4643      	mov	r3, r8
 80059fa:	18e3      	adds	r3, r4, r3
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	464b      	mov	r3, r9
 8005a00:	eb45 0303 	adc.w	r3, r5, r3
 8005a04:	607b      	str	r3, [r7, #4]
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a12:	4629      	mov	r1, r5
 8005a14:	028b      	lsls	r3, r1, #10
 8005a16:	4621      	mov	r1, r4
 8005a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	028a      	lsls	r2, r1, #10
 8005a20:	4610      	mov	r0, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a26:	2200      	movs	r2, #0
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	61fa      	str	r2, [r7, #28]
 8005a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a30:	f7fa fbe6 	bl	8000200 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	3301      	adds	r3, #1
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a56:	e002      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3750      	adds	r7, #80	; 0x50
 8005a64:	46bd      	mov	sp, r7
 8005a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	00f42400 	.word	0x00f42400
 8005a74:	007a1200 	.word	0x007a1200

08005a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000000 	.word	0x20000000

08005a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a94:	f7ff fff0 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	0a9b      	lsrs	r3, r3, #10
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	4903      	ldr	r1, [pc, #12]	; (8005ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa6:	5ccb      	ldrb	r3, [r1, r3]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	0800d0d0 	.word	0x0800d0d0

08005ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005abc:	f7ff ffdc 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	0b5b      	lsrs	r3, r3, #13
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4903      	ldr	r1, [pc, #12]	; (8005adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	0800d0d0 	.word	0x0800d0d0

08005ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	220f      	movs	r2, #15
 8005aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005af0:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <HAL_RCC_GetClockConfig+0x5c>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0203 	and.w	r2, r3, #3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <HAL_RCC_GetClockConfig+0x5c>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <HAL_RCC_GetClockConfig+0x5c>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <HAL_RCC_GetClockConfig+0x5c>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	08db      	lsrs	r3, r3, #3
 8005b1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <HAL_RCC_GetClockConfig+0x60>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 020f 	and.w	r2, r3, #15
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	601a      	str	r2, [r3, #0]
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40023c00 	.word	0x40023c00

08005b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b6c:	4b66      	ldr	r3, [pc, #408]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b72:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	4963      	ldr	r1, [pc, #396]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005b8e:	4b5e      	ldr	r3, [pc, #376]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b94:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	495a      	ldr	r1, [pc, #360]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10b      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d075      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bc8:	4b50      	ldr	r3, [pc, #320]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bce:	f7fc fbcb 	bl	8002368 <HAL_GetTick>
 8005bd2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bd6:	f7fc fbc7 	bl	8002368 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1dc      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005be8:	4b47      	ldr	r3, [pc, #284]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f0      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	019a      	lsls	r2, r3, #6
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	071b      	lsls	r3, r3, #28
 8005c0c:	493e      	ldr	r1, [pc, #248]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01f      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c20:	4b39      	ldr	r3, [pc, #228]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c26:	0f1b      	lsrs	r3, r3, #28
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	019a      	lsls	r2, r3, #6
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	071b      	lsls	r3, r3, #28
 8005c40:	4931      	ldr	r1, [pc, #196]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c48:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c4e:	f023 021f 	bic.w	r2, r3, #31
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	492b      	ldr	r1, [pc, #172]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00d      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	019a      	lsls	r2, r3, #6
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	061b      	lsls	r3, r3, #24
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	071b      	lsls	r3, r3, #28
 8005c80:	4921      	ldr	r1, [pc, #132]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c88:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c8e:	f7fc fb6b 	bl	8002368 <HAL_GetTick>
 8005c92:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c96:	f7fc fb67 	bl	8002368 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e17c      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ca8:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0f0      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d112      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10c      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80ce 	beq.w	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce2:	f040 80c8 	bne.w	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cec:	f7fc fb3c 	bl	8002368 <HAL_GetTick>
 8005cf0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cf2:	e00f      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005cf4:	f7fc fb38 	bl	8002368 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d908      	bls.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e14d      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8005d06:	bf00      	nop
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	42470068 	.word	0x42470068
 8005d10:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d14:	4ba5      	ldr	r3, [pc, #660]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d20:	d0e8      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02e      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005d2e:	4b9f      	ldr	r3, [pc, #636]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	0c1b      	lsrs	r3, r3, #16
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d40:	4b9a      	ldr	r3, [pc, #616]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d46:	0f1b      	lsrs	r3, r3, #28
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	019a      	lsls	r2, r3, #6
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	041b      	lsls	r3, r3, #16
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	061b      	lsls	r3, r3, #24
 8005d64:	431a      	orrs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	071b      	lsls	r3, r3, #28
 8005d6a:	4990      	ldr	r1, [pc, #576]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d72:	4b8e      	ldr	r3, [pc, #568]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	3b01      	subs	r3, #1
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	4989      	ldr	r1, [pc, #548]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02c      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005d98:	4b84      	ldr	r3, [pc, #528]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	0c1b      	lsrs	r3, r3, #16
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	3301      	adds	r3, #1
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005daa:	4b80      	ldr	r3, [pc, #512]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	0e1b      	lsrs	r3, r3, #24
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	019a      	lsls	r2, r3, #6
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	061b      	lsls	r3, r3, #24
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	071b      	lsls	r3, r3, #28
 8005dd4:	4975      	ldr	r1, [pc, #468]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ddc:	4b73      	ldr	r3, [pc, #460]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	4970      	ldr	r1, [pc, #448]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d024      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e06:	d11f      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e08:	4b68      	ldr	r3, [pc, #416]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0e:	0e1b      	lsrs	r3, r3, #24
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e16:	4b65      	ldr	r3, [pc, #404]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1c:	0f1b      	lsrs	r3, r3, #28
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	019a      	lsls	r2, r3, #6
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	3b01      	subs	r3, #1
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	431a      	orrs	r2, r3
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	061b      	lsls	r3, r3, #24
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	071b      	lsls	r3, r3, #28
 8005e40:	495a      	ldr	r1, [pc, #360]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e48:	4b59      	ldr	r3, [pc, #356]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e4e:	f7fc fa8b 	bl	8002368 <HAL_GetTick>
 8005e52:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e54:	e008      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e56:	f7fc fa87 	bl	8002368 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e09c      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e68:	4b50      	ldr	r3, [pc, #320]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e74:	d1ef      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8083 	beq.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	4b48      	ldr	r3, [pc, #288]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	4a47      	ldr	r2, [pc, #284]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e92:	6413      	str	r3, [r2, #64]	; 0x40
 8005e94:	4b45      	ldr	r3, [pc, #276]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ea0:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a43      	ldr	r2, [pc, #268]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eaa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eac:	f7fc fa5c 	bl	8002368 <HAL_GetTick>
 8005eb0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005eb4:	f7fc fa58 	bl	8002368 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e06d      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ed2:	4b36      	ldr	r3, [pc, #216]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02f      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d028      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005efa:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f00:	4b2d      	ldr	r3, [pc, #180]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f06:	4a29      	ldr	r2, [pc, #164]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f0c:	4b27      	ldr	r3, [pc, #156]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d114      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f18:	f7fc fa26 	bl	8002368 <HAL_GetTick>
 8005f1c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f1e:	e00a      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f20:	f7fc fa22 	bl	8002368 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e035      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f36:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0ee      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f4e:	d10d      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005f50:	4b16      	ldr	r3, [pc, #88]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f64:	4911      	ldr	r1, [pc, #68]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
 8005f6a:	e005      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4a0e      	ldr	r2, [pc, #56]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f76:	6093      	str	r3, [r2, #8]
 8005f78:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f84:	4909      	ldr	r1, [pc, #36]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8005f9e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3720      	adds	r7, #32
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	42470070 	.word	0x42470070
 8005fb4:	40007000 	.word	0x40007000
 8005fb8:	42470e40 	.word	0x42470e40
 8005fbc:	424711e0 	.word	0x424711e0

08005fc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e273      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d075      	beq.n	80060ca <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005fde:	4b88      	ldr	r3, [pc, #544]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d00c      	beq.n	8006004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fea:	4b85      	ldr	r3, [pc, #532]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d112      	bne.n	800601c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ff6:	4b82      	ldr	r3, [pc, #520]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006002:	d10b      	bne.n	800601c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006004:	4b7e      	ldr	r3, [pc, #504]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d05b      	beq.n	80060c8 <HAL_RCC_OscConfig+0x108>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d157      	bne.n	80060c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e24e      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006024:	d106      	bne.n	8006034 <HAL_RCC_OscConfig+0x74>
 8006026:	4b76      	ldr	r3, [pc, #472]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a75      	ldr	r2, [pc, #468]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 800602c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e01d      	b.n	8006070 <HAL_RCC_OscConfig+0xb0>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800603c:	d10c      	bne.n	8006058 <HAL_RCC_OscConfig+0x98>
 800603e:	4b70      	ldr	r3, [pc, #448]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a6f      	ldr	r2, [pc, #444]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	4b6d      	ldr	r3, [pc, #436]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a6c      	ldr	r2, [pc, #432]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e00b      	b.n	8006070 <HAL_RCC_OscConfig+0xb0>
 8006058:	4b69      	ldr	r3, [pc, #420]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a68      	ldr	r2, [pc, #416]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 800605e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	4b66      	ldr	r3, [pc, #408]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a65      	ldr	r2, [pc, #404]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 800606a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800606e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d013      	beq.n	80060a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fc f976 	bl	8002368 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006080:	f7fc f972 	bl	8002368 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e213      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006092:	4b5b      	ldr	r3, [pc, #364]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0xc0>
 800609e:	e014      	b.n	80060ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fc f962 	bl	8002368 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a8:	f7fc f95e 	bl	8002368 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	; 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e1ff      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ba:	4b51      	ldr	r3, [pc, #324]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0xe8>
 80060c6:	e000      	b.n	80060ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d063      	beq.n	800619e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80060d6:	4b4a      	ldr	r3, [pc, #296]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00b      	beq.n	80060fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060e2:	4b47      	ldr	r3, [pc, #284]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d11c      	bne.n	8006128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ee:	4b44      	ldr	r3, [pc, #272]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d116      	bne.n	8006128 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060fa:	4b41      	ldr	r3, [pc, #260]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_RCC_OscConfig+0x152>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d001      	beq.n	8006112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e1d3      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006112:	4b3b      	ldr	r3, [pc, #236]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	4937      	ldr	r1, [pc, #220]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006122:	4313      	orrs	r3, r2
 8006124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006126:	e03a      	b.n	800619e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d020      	beq.n	8006172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006130:	4b34      	ldr	r3, [pc, #208]	; (8006204 <HAL_RCC_OscConfig+0x244>)
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006136:	f7fc f917 	bl	8002368 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800613e:	f7fc f913 	bl	8002368 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e1b4      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006150:	4b2b      	ldr	r3, [pc, #172]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f0      	beq.n	800613e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800615c:	4b28      	ldr	r3, [pc, #160]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4925      	ldr	r1, [pc, #148]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 800616c:	4313      	orrs	r3, r2
 800616e:	600b      	str	r3, [r1, #0]
 8006170:	e015      	b.n	800619e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006172:	4b24      	ldr	r3, [pc, #144]	; (8006204 <HAL_RCC_OscConfig+0x244>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fc f8f6 	bl	8002368 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006180:	f7fc f8f2 	bl	8002368 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e193      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006192:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f0      	bne.n	8006180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d036      	beq.n	8006218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d016      	beq.n	80061e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <HAL_RCC_OscConfig+0x248>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b8:	f7fc f8d6 	bl	8002368 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061c0:	f7fc f8d2 	bl	8002368 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e173      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_RCC_OscConfig+0x240>)
 80061d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x200>
 80061de:	e01b      	b.n	8006218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061e0:	4b09      	ldr	r3, [pc, #36]	; (8006208 <HAL_RCC_OscConfig+0x248>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e6:	f7fc f8bf 	bl	8002368 <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ec:	e00e      	b.n	800620c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ee:	f7fc f8bb 	bl	8002368 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d907      	bls.n	800620c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e15c      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
 8006200:	40023800 	.word	0x40023800
 8006204:	42470000 	.word	0x42470000
 8006208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800620c:	4b8a      	ldr	r3, [pc, #552]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 800620e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1ea      	bne.n	80061ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8097 	beq.w	8006354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800622a:	4b83      	ldr	r3, [pc, #524]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10f      	bne.n	8006256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006236:	2300      	movs	r3, #0
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	4b7f      	ldr	r3, [pc, #508]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	4a7e      	ldr	r2, [pc, #504]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 8006240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006244:	6413      	str	r3, [r2, #64]	; 0x40
 8006246:	4b7c      	ldr	r3, [pc, #496]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006252:	2301      	movs	r3, #1
 8006254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006256:	4b79      	ldr	r3, [pc, #484]	; (800643c <HAL_RCC_OscConfig+0x47c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d118      	bne.n	8006294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006262:	4b76      	ldr	r3, [pc, #472]	; (800643c <HAL_RCC_OscConfig+0x47c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a75      	ldr	r2, [pc, #468]	; (800643c <HAL_RCC_OscConfig+0x47c>)
 8006268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800626e:	f7fc f87b 	bl	8002368 <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006276:	f7fc f877 	bl	8002368 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e118      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006288:	4b6c      	ldr	r3, [pc, #432]	; (800643c <HAL_RCC_OscConfig+0x47c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f0      	beq.n	8006276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d106      	bne.n	80062aa <HAL_RCC_OscConfig+0x2ea>
 800629c:	4b66      	ldr	r3, [pc, #408]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4a65      	ldr	r2, [pc, #404]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
 80062a8:	e01c      	b.n	80062e4 <HAL_RCC_OscConfig+0x324>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d10c      	bne.n	80062cc <HAL_RCC_OscConfig+0x30c>
 80062b2:	4b61      	ldr	r3, [pc, #388]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	4a60      	ldr	r2, [pc, #384]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062b8:	f043 0304 	orr.w	r3, r3, #4
 80062bc:	6713      	str	r3, [r2, #112]	; 0x70
 80062be:	4b5e      	ldr	r3, [pc, #376]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	4a5d      	ldr	r2, [pc, #372]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	6713      	str	r3, [r2, #112]	; 0x70
 80062ca:	e00b      	b.n	80062e4 <HAL_RCC_OscConfig+0x324>
 80062cc:	4b5a      	ldr	r3, [pc, #360]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d0:	4a59      	ldr	r2, [pc, #356]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062d2:	f023 0301 	bic.w	r3, r3, #1
 80062d6:	6713      	str	r3, [r2, #112]	; 0x70
 80062d8:	4b57      	ldr	r3, [pc, #348]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062dc:	4a56      	ldr	r2, [pc, #344]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80062de:	f023 0304 	bic.w	r3, r3, #4
 80062e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d015      	beq.n	8006318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ec:	f7fc f83c 	bl	8002368 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f2:	e00a      	b.n	800630a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f4:	f7fc f838 	bl	8002368 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e0d7      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630a:	4b4b      	ldr	r3, [pc, #300]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0ee      	beq.n	80062f4 <HAL_RCC_OscConfig+0x334>
 8006316:	e014      	b.n	8006342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006318:	f7fc f826 	bl	8002368 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800631e:	e00a      	b.n	8006336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fc f822 	bl	8002368 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e0c1      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006336:	4b40      	ldr	r3, [pc, #256]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ee      	bne.n	8006320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d105      	bne.n	8006354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006348:	4b3b      	ldr	r3, [pc, #236]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	4a3a      	ldr	r2, [pc, #232]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 800634e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80ad 	beq.w	80064b8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800635e:	4b36      	ldr	r3, [pc, #216]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
 8006366:	2b08      	cmp	r3, #8
 8006368:	d060      	beq.n	800642c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d145      	bne.n	80063fe <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006372:	4b33      	ldr	r3, [pc, #204]	; (8006440 <HAL_RCC_OscConfig+0x480>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fb fff6 	bl	8002368 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006380:	f7fb fff2 	bl	8002368 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e093      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006392:	4b29      	ldr	r3, [pc, #164]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69da      	ldr	r2, [r3, #28]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	019b      	lsls	r3, r3, #6
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	3b01      	subs	r3, #1
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	061b      	lsls	r3, r3, #24
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	071b      	lsls	r3, r3, #28
 80063ca:	491b      	ldr	r1, [pc, #108]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d0:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x480>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d6:	f7fb ffc7 	bl	8002368 <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063dc:	e008      	b.n	80063f0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063de:	f7fb ffc3 	bl	8002368 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e064      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0f0      	beq.n	80063de <HAL_RCC_OscConfig+0x41e>
 80063fc:	e05c      	b.n	80064b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <HAL_RCC_OscConfig+0x480>)
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fb ffb0 	bl	8002368 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640c:	f7fb ffac 	bl	8002368 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e04d      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_RCC_OscConfig+0x478>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0x44c>
 800642a:	e045      	b.n	80064b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d107      	bne.n	8006444 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e040      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
 8006438:	40023800 	.word	0x40023800
 800643c:	40007000 	.word	0x40007000
 8006440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006444:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <HAL_RCC_OscConfig+0x504>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d030      	beq.n	80064b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800645c:	429a      	cmp	r2, r3
 800645e:	d129      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646a:	429a      	cmp	r2, r3
 800646c:	d122      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006474:	4013      	ands	r3, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800647a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800647c:	4293      	cmp	r3, r2
 800647e:	d119      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	3b01      	subs	r3, #1
 800648e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d10f      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d107      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d001      	beq.n	80064b8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40023800 	.word	0x40023800

080064c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e022      	b.n	8006520 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d105      	bne.n	80064f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fb fb37 	bl	8001b60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2203      	movs	r2, #3
 80064f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f814 	bl	8006528 <HAL_SD_InitCard>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e00a      	b.n	8006520 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006528:	b5b0      	push	{r4, r5, r7, lr}
 800652a:	b08e      	sub	sp, #56	; 0x38
 800652c:	af04      	add	r7, sp, #16
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006530:	2300      	movs	r3, #0
 8006532:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006540:	2300      	movs	r3, #0
 8006542:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006544:	2376      	movs	r3, #118	; 0x76
 8006546:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681d      	ldr	r5, [r3, #0]
 800654c:	466c      	mov	r4, sp
 800654e:	f107 0314 	add.w	r3, r7, #20
 8006552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800655a:	f107 0308 	add.w	r3, r7, #8
 800655e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006560:	4628      	mov	r0, r5
 8006562:	f002 fbbf 	bl	8008ce4 <SDIO_Init>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800656c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e04c      	b.n	8006612 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006578:	4b28      	ldr	r3, [pc, #160]	; (800661c <HAL_SD_InitCard+0xf4>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f002 fbf7 	bl	8008d76 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006588:	4b24      	ldr	r3, [pc, #144]	; (800661c <HAL_SD_InitCard+0xf4>)
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fff0 	bl	8007574 <SD_PowerON>
 8006594:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e02e      	b.n	8006612 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 ff0f 	bl	80073d8 <SD_InitCard>
 80065ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e01b      	b.n	8006612 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065e2:	4618      	mov	r0, r3
 80065e4:	f002 fc5a 	bl	8008e9c <SDMMC_CmdBlockLength>
 80065e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00f      	beq.n	8006610 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <HAL_SD_InitCard+0xf8>)
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3728      	adds	r7, #40	; 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bdb0      	pop	{r4, r5, r7, pc}
 800661a:	bf00      	nop
 800661c:	422580a0 	.word	0x422580a0
 8006620:	004005ff 	.word	0x004005ff

08006624 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08c      	sub	sp, #48	; 0x30
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d107      	bne.n	800664c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0be      	b.n	80067ca <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	f040 80b7 	bne.w	80067c8 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	441a      	add	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666a:	429a      	cmp	r2, r3
 800666c:	d907      	bls.n	800667e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e0a5      	b.n	80067ca <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2203      	movs	r2, #3
 8006682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2200      	movs	r2, #0
 800668c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800669c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	4a4c      	ldr	r2, [pc, #304]	; (80067d4 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80066a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a4b      	ldr	r2, [pc, #300]	; (80067d8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80066ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2200      	movs	r2, #0
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	2200      	movs	r2, #0
 80066bc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3380      	adds	r3, #128	; 0x80
 80066e4:	4619      	mov	r1, r3
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	025b      	lsls	r3, r3, #9
 80066ec:	089b      	lsrs	r3, r3, #2
 80066ee:	f7fc fdbd 	bl	800326c <HAL_DMA_Start_IT>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d017      	beq.n	8006728 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006706:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a33      	ldr	r2, [pc, #204]	; (80067dc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e050      	b.n	80067ca <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006728:	4b2d      	ldr	r3, [pc, #180]	; (80067e0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	2b01      	cmp	r3, #1
 8006734:	d002      	beq.n	800673c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	025b      	lsls	r3, r3, #9
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800673c:	f04f 33ff 	mov.w	r3, #4294967295
 8006740:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	025b      	lsls	r3, r3, #9
 8006746:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006748:	2390      	movs	r3, #144	; 0x90
 800674a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800674c:	2302      	movs	r3, #2
 800674e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006750:	2300      	movs	r3, #0
 8006752:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006754:	2301      	movs	r3, #1
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f107 0210 	add.w	r2, r7, #16
 8006760:	4611      	mov	r1, r2
 8006762:	4618      	mov	r0, r3
 8006764:	f002 fb6e 	bl	8008e44 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d90a      	bls.n	8006784 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2282      	movs	r2, #130	; 0x82
 8006772:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800677a:	4618      	mov	r0, r3
 800677c:	f002 fbd2 	bl	8008f24 <SDMMC_CmdReadMultiBlock>
 8006780:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006782:	e009      	b.n	8006798 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2281      	movs	r2, #129	; 0x81
 8006788:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006790:	4618      	mov	r0, r3
 8006792:	f002 fba5 	bl	8008ee0 <SDMMC_CmdReadSingleBlock>
 8006796:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d012      	beq.n	80067c4 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a0e      	ldr	r2, [pc, #56]	; (80067dc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	431a      	orrs	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e002      	b.n	80067ca <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e000      	b.n	80067ca <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3730      	adds	r7, #48	; 0x30
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	080071e7 	.word	0x080071e7
 80067d8:	08007259 	.word	0x08007259
 80067dc:	004005ff 	.word	0x004005ff
 80067e0:	4225858c 	.word	0x4225858c

080067e4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08c      	sub	sp, #48	; 0x30
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d107      	bne.n	800680c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e0c1      	b.n	8006990 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	f040 80ba 	bne.w	800698e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	429a      	cmp	r2, r3
 800682c:	d907      	bls.n	800683e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e0a8      	b.n	8006990 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2203      	movs	r2, #3
 8006842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2200      	movs	r2, #0
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 021a 	orr.w	r2, r2, #26
 800685c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	4a4d      	ldr	r2, [pc, #308]	; (8006998 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8006864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	4a4c      	ldr	r2, [pc, #304]	; (800699c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800686c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	2200      	movs	r2, #0
 8006874:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	2b01      	cmp	r3, #1
 800687c:	d002      	beq.n	8006884 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	025b      	lsls	r3, r3, #9
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d90a      	bls.n	80068a0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	22a0      	movs	r2, #160	; 0xa0
 800688e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006896:	4618      	mov	r0, r3
 8006898:	f002 fb88 	bl	8008fac <SDMMC_CmdWriteMultiBlock>
 800689c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800689e:	e009      	b.n	80068b4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2290      	movs	r2, #144	; 0x90
 80068a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ac:	4618      	mov	r0, r3
 80068ae:	f002 fb5b 	bl	8008f68 <SDMMC_CmdWriteSingleBlock>
 80068b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80068b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d012      	beq.n	80068e0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a38      	ldr	r2, [pc, #224]	; (80069a0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e057      	b.n	8006990 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80068e0:	4b30      	ldr	r3, [pc, #192]	; (80069a4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	2240      	movs	r2, #64	; 0x40
 80068ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3380      	adds	r3, #128	; 0x80
 8006916:	461a      	mov	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	025b      	lsls	r3, r3, #9
 800691c:	089b      	lsrs	r3, r3, #2
 800691e:	f7fc fca5 	bl	800326c <HAL_DMA_Start_IT>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01a      	beq.n	800695e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 021a 	bic.w	r2, r2, #26
 8006936:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e018      	b.n	8006990 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800695e:	f04f 33ff 	mov.w	r3, #4294967295
 8006962:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	025b      	lsls	r3, r3, #9
 8006968:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800696a:	2390      	movs	r3, #144	; 0x90
 800696c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006972:	2300      	movs	r3, #0
 8006974:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006976:	2301      	movs	r3, #1
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f107 0210 	add.w	r2, r7, #16
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f002 fa5d 	bl	8008e44 <SDIO_ConfigData>

      return HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3730      	adds	r7, #48	; 0x30
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	080071bd 	.word	0x080071bd
 800699c:	08007259 	.word	0x08007259
 80069a0:	004005ff 	.word	0x004005ff
 80069a4:	4225858c 	.word	0x4225858c

080069a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <HAL_SD_IRQHandler+0x2e>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 ffef 	bl	80079b2 <SD_Read_IT>
 80069d4:	e155      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 808f 	beq.w	8006b04 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80069fe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006a02:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d039      	beq.n	8006a92 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <HAL_SD_IRQHandler+0x8a>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d011      	beq.n	8006a56 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f002 fada 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 8006a3c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f91f 	bl	8006c94 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <HAL_SD_IRQHandler+0xda>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f002 ff40 	bl	8009908 <HAL_SD_RxCpltCallback>
 8006a88:	e0fb      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f002 ff32 	bl	80098f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a90:	e0f7      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80f2 	beq.w	8006c82 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d011      	beq.n	8006acc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f002 fa9f 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 8006ab2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d008      	beq.n	8006acc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8e4 	bl	8006c94 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 80d5 	bne.w	8006c82 <HAL_SD_IRQHandler+0x2da>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 80cf 	bne.w	8006c82 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0208 	bic.w	r2, r2, #8
 8006af2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 fef9 	bl	80098f4 <HAL_SD_TxCpltCallback>
}
 8006b02:	e0be      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d008      	beq.n	8006b24 <HAL_SD_IRQHandler+0x17c>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 ff99 	bl	8007a54 <SD_Write_IT>
 8006b22:	e0ae      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80a7 	beq.w	8006c82 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	f043 0202 	orr.w	r2, r3, #2
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d005      	beq.n	8006b68 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	f043 0208 	orr.w	r2, r3, #8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	f043 0220 	orr.w	r2, r3, #32
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	f043 0210 	orr.w	r2, r3, #16
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006bb4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f002 fa18 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f855 	bl	8006c94 <HAL_SD_ErrorCallback>
}
 8006bea:	e04a      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d045      	beq.n	8006c82 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f003 0310 	and.w	r3, r3, #16
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <HAL_SD_IRQHandler+0x262>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d011      	beq.n	8006c2e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	4a1f      	ldr	r2, [pc, #124]	; (8006c8c <HAL_SD_IRQHandler+0x2e4>)
 8006c10:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fc fb80 	bl	800331c <HAL_DMA_Abort_IT>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d02f      	beq.n	8006c82 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fb68 	bl	80072fc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c2c:	e029      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <HAL_SD_IRQHandler+0x29a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d011      	beq.n	8006c66 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <HAL_SD_IRQHandler+0x2e8>)
 8006c48:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fc fb64 	bl	800331c <HAL_DMA_Abort_IT>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d013      	beq.n	8006c82 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fb83 	bl	800736a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c64:	e00d      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f002 fe30 	bl	80098e0 <HAL_SD_AbortCallback>
}
 8006c80:	e7ff      	b.n	8006c82 <HAL_SD_IRQHandler+0x2da>
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	080072fd 	.word	0x080072fd
 8006c90:	0800736b 	.word	0x0800736b

08006c94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb6:	0f9b      	lsrs	r3, r3, #30
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc2:	0e9b      	lsrs	r3, r3, #26
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd4:	0e1b      	lsrs	r3, r3, #24
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce6:	0c1b      	lsrs	r3, r3, #16
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d08:	0d1b      	lsrs	r3, r3, #20
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d14:	0c1b      	lsrs	r3, r3, #16
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d26:	0bdb      	lsrs	r3, r3, #15
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d38:	0b9b      	lsrs	r3, r3, #14
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d4a:	0b5b      	lsrs	r3, r3, #13
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d5c:	0b1b      	lsrs	r3, r3, #12
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d163      	bne.n	8006e40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d7c:	009a      	lsls	r2, r3, #2
 8006d7e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d82:	4013      	ands	r3, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006d88:	0f92      	lsrs	r2, r2, #30
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d94:	0edb      	lsrs	r3, r3, #27
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da6:	0e1b      	lsrs	r3, r3, #24
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db8:	0d5b      	lsrs	r3, r3, #21
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dca:	0c9b      	lsrs	r3, r3, #18
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ddc:	0bdb      	lsrs	r3, r3, #15
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	7e1b      	ldrb	r3, [r3, #24]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	3302      	adds	r3, #2
 8006e00:	2201      	movs	r2, #1
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006e0a:	fb03 f202 	mul.w	r2, r3, r2
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	7a1b      	ldrb	r3, [r3, #8]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006e2c:	0a52      	lsrs	r2, r2, #9
 8006e2e:	fb03 f202 	mul.w	r2, r3, r2
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e3c:	661a      	str	r2, [r3, #96]	; 0x60
 8006e3e:	e031      	b.n	8006ea4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d11d      	bne.n	8006e84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	3301      	adds	r3, #1
 8006e64:	029a      	lsls	r2, r3, #10
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	661a      	str	r2, [r3, #96]	; 0x60
 8006e82:	e00f      	b.n	8006ea4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a58      	ldr	r2, [pc, #352]	; (8006fec <HAL_SD_GetCardCSD+0x344>)
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e09d      	b.n	8006fe0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea8:	0b9b      	lsrs	r3, r3, #14
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eba:	09db      	lsrs	r3, r3, #7
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006edc:	0fdb      	lsrs	r3, r3, #31
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee8:	0f5b      	lsrs	r3, r3, #29
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efa:	0e9b      	lsrs	r3, r3, #26
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	0d9b      	lsrs	r3, r3, #22
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	0d5b      	lsrs	r3, r3, #21
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	0c1b      	lsrs	r3, r3, #16
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4e:	0bdb      	lsrs	r3, r3, #15
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	0b9b      	lsrs	r3, r3, #14
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f76:	0b5b      	lsrs	r3, r3, #13
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	0b1b      	lsrs	r3, r3, #12
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	0a9b      	lsrs	r3, r3, #10
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	0a1b      	lsrs	r3, r3, #8
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	004005ff 	.word	0x004005ff

08006ff0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007048:	b5b0      	push	{r4, r5, r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af04      	add	r7, sp, #16
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2203      	movs	r2, #3
 800705c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007064:	2b03      	cmp	r3, #3
 8007066:	d02e      	beq.n	80070c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706e:	d106      	bne.n	800707e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	639a      	str	r2, [r3, #56]	; 0x38
 800707c:	e029      	b.n	80070d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007084:	d10a      	bne.n	800709c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fb2a 	bl	80076e0 <SD_WideBus_Enable>
 800708c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	639a      	str	r2, [r3, #56]	; 0x38
 800709a:	e01a      	b.n	80070d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fb67 	bl	8007776 <SD_WideBus_Disable>
 80070a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38
 80070b6:	e00c      	b.n	80070d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
 80070c4:	e005      	b.n	80070d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a26      	ldr	r2, [pc, #152]	; (8007178 <HAL_SD_ConfigWideBusOperation+0x130>)
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070f0:	e01f      	b.n	8007132 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681d      	ldr	r5, [r3, #0]
 8007118:	466c      	mov	r4, sp
 800711a:	f107 0314 	add.w	r3, r7, #20
 800711e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007126:	f107 0308 	add.w	r3, r7, #8
 800712a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800712c:	4628      	mov	r0, r5
 800712e:	f001 fdd9 	bl	8008ce4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800713a:	4618      	mov	r0, r3
 800713c:	f001 feae 	bl	8008e9c <SDMMC_CmdBlockLength>
 8007140:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00c      	beq.n	8007162 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <HAL_SD_ConfigWideBusOperation+0x130>)
 800714e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800716a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800716e:	4618      	mov	r0, r3
 8007170:	3728      	adds	r7, #40	; 0x28
 8007172:	46bd      	mov	sp, r7
 8007174:	bdb0      	pop	{r4, r5, r7, pc}
 8007176:	bf00      	nop
 8007178:	004005ff 	.word	0x004005ff

0800717c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007188:	f107 030c 	add.w	r3, r7, #12
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa7e 	bl	8007690 <SD_SendStatus>
 8007194:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	0a5b      	lsrs	r3, r3, #9
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80071b2:	693b      	ldr	r3, [r7, #16]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80071da:	bf00      	nop
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	2b82      	cmp	r3, #130	; 0x82
 80071fa:	d111      	bne.n	8007220 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f001 fef5 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 8007206:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	431a      	orrs	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff fd3a 	bl	8006c94 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0208 	bic.w	r2, r2, #8
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f240 523a 	movw	r2, #1338	; 0x53a
 8007238:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f002 fb5d 	bl	8009908 <HAL_SD_RxCpltCallback>
#endif
}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fc fa04 	bl	8003674 <HAL_DMA_GetError>
 800726c:	4603      	mov	r3, r0
 800726e:	2b02      	cmp	r3, #2
 8007270:	d03e      	beq.n	80072f0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d002      	beq.n	800728e <SD_DMAError+0x36>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d12d      	bne.n	80072ea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a19      	ldr	r2, [pc, #100]	; (80072f8 <SD_DMAError+0xa0>)
 8007294:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80072a4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80072b2:	6978      	ldr	r0, [r7, #20]
 80072b4:	f7ff ff62 	bl	800717c <HAL_SD_GetCardState>
 80072b8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d002      	beq.n	80072c6 <SD_DMAError+0x6e>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d10a      	bne.n	80072dc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 fe90 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 80072d0:	4602      	mov	r2, r0
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	431a      	orrs	r2, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80072ea:	6978      	ldr	r0, [r7, #20]
 80072ec:	f7ff fcd2 	bl	8006c94 <HAL_SD_ErrorCallback>
#endif
  }
}
 80072f0:	bf00      	nop
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	004005ff 	.word	0x004005ff

080072fc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007312:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff ff31 	bl	800717c <HAL_SD_GetCardState>
 800731a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b06      	cmp	r3, #6
 800732e:	d002      	beq.n	8007336 <SD_DMATxAbort+0x3a>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b05      	cmp	r3, #5
 8007334:	d10a      	bne.n	800734c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f001 fe58 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 8007340:	4602      	mov	r2, r0
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	431a      	orrs	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f002 fac3 	bl	80098e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800735a:	e002      	b.n	8007362 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7ff fc99 	bl	8006c94 <HAL_SD_ErrorCallback>
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007380:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff fefa 	bl	800717c <HAL_SD_GetCardState>
 8007388:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b06      	cmp	r3, #6
 800739c:	d002      	beq.n	80073a4 <SD_DMARxAbort+0x3a>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d10a      	bne.n	80073ba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fe21 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 80073ae:	4602      	mov	r2, r0
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d103      	bne.n	80073ca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f002 fa8c 	bl	80098e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80073c8:	e002      	b.n	80073d0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7ff fc62 	bl	8006c94 <HAL_SD_ErrorCallback>
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073d8:	b5b0      	push	{r4, r5, r7, lr}
 80073da:	b094      	sub	sp, #80	; 0x50
 80073dc:	af04      	add	r7, sp, #16
 80073de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80073e0:	2301      	movs	r3, #1
 80073e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fcd3 	bl	8008d94 <SDIO_GetPowerState>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073f8:	e0b8      	b.n	800756c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d02f      	beq.n	8007462 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f001 fefc 	bl	8009204 <SDMMC_CmdSendCID>
 800740c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800740e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <SD_InitCard+0x40>
    {
      return errorstate;
 8007414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007416:	e0a9      	b.n	800756c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fcfd 	bl	8008e1e <SDIO_GetResponse>
 8007424:	4602      	mov	r2, r0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2104      	movs	r1, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f001 fcf4 	bl	8008e1e <SDIO_GetResponse>
 8007436:	4602      	mov	r2, r0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2108      	movs	r1, #8
 8007442:	4618      	mov	r0, r3
 8007444:	f001 fceb 	bl	8008e1e <SDIO_GetResponse>
 8007448:	4602      	mov	r2, r0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	210c      	movs	r1, #12
 8007454:	4618      	mov	r0, r3
 8007456:	f001 fce2 	bl	8008e1e <SDIO_GetResponse>
 800745a:	4602      	mov	r2, r0
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007466:	2b03      	cmp	r3, #3
 8007468:	d00d      	beq.n	8007486 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f107 020e 	add.w	r2, r7, #14
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f001 ff02 	bl	800927e <SDMMC_CmdSetRelAdd>
 800747a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800747c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <SD_InitCard+0xae>
    {
      return errorstate;
 8007482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007484:	e072      	b.n	800756c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	2b03      	cmp	r3, #3
 800748c:	d036      	beq.n	80074fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800748e:	89fb      	ldrh	r3, [r7, #14]
 8007490:	461a      	mov	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f001 fecc 	bl	8009240 <SDMMC_CmdSendCSD>
 80074a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80074b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b2:	e05b      	b.n	800756c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fcaf 	bl	8008e1e <SDIO_GetResponse>
 80074c0:	4602      	mov	r2, r0
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2104      	movs	r1, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 fca6 	bl	8008e1e <SDIO_GetResponse>
 80074d2:	4602      	mov	r2, r0
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2108      	movs	r1, #8
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 fc9d 	bl	8008e1e <SDIO_GetResponse>
 80074e4:	4602      	mov	r2, r0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	210c      	movs	r1, #12
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 fc94 	bl	8008e1e <SDIO_GetResponse>
 80074f6:	4602      	mov	r2, r0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2104      	movs	r1, #4
 8007502:	4618      	mov	r0, r3
 8007504:	f001 fc8b 	bl	8008e1e <SDIO_GetResponse>
 8007508:	4603      	mov	r3, r0
 800750a:	0d1a      	lsrs	r2, r3, #20
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff fbc6 	bl	8006ca8 <HAL_SD_GetCardCSD>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007526:	e021      	b.n	800756c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6819      	ldr	r1, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	2200      	movs	r2, #0
 8007534:	461c      	mov	r4, r3
 8007536:	4615      	mov	r5, r2
 8007538:	4622      	mov	r2, r4
 800753a:	462b      	mov	r3, r5
 800753c:	4608      	mov	r0, r1
 800753e:	f001 fd79 	bl	8009034 <SDMMC_CmdSelDesel>
 8007542:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <SD_InitCard+0x176>
  {
    return errorstate;
 800754a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754c:	e00e      	b.n	800756c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681d      	ldr	r5, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	466c      	mov	r4, sp
 8007556:	f103 0210 	add.w	r2, r3, #16
 800755a:	ca07      	ldmia	r2, {r0, r1, r2}
 800755c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007560:	3304      	adds	r3, #4
 8007562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007564:	4628      	mov	r0, r5
 8007566:	f001 fbbd 	bl	8008ce4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3740      	adds	r7, #64	; 0x40
 8007570:	46bd      	mov	sp, r7
 8007572:	bdb0      	pop	{r4, r5, r7, pc}

08007574 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f001 fd74 	bl	800907a <SDMMC_CmdGoIdleState>
 8007592:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <SD_PowerON+0x2a>
  {
    return errorstate;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	e072      	b.n	8007684 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 fd87 	bl	80090b6 <SDMMC_CmdOperCond>
 80075a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00d      	beq.n	80075cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 fd5d 	bl	800907a <SDMMC_CmdGoIdleState>
 80075c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	e05b      	b.n	8007684 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d137      	bne.n	800764a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2100      	movs	r1, #0
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 fd87 	bl	80090f4 <SDMMC_CmdAppCommand>
 80075e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d02d      	beq.n	800764a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075f2:	e047      	b.n	8007684 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2100      	movs	r1, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fd7a 	bl	80090f4 <SDMMC_CmdAppCommand>
 8007600:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <SD_PowerON+0x98>
    {
      return errorstate;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	e03b      	b.n	8007684 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	491e      	ldr	r1, [pc, #120]	; (800768c <SD_PowerON+0x118>)
 8007612:	4618      	mov	r0, r3
 8007614:	f001 fd90 	bl	8009138 <SDMMC_CmdAppOperCommand>
 8007618:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007624:	e02e      	b.n	8007684 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f001 fbf6 	bl	8008e1e <SDIO_GetResponse>
 8007632:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	0fdb      	lsrs	r3, r3, #31
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <SD_PowerON+0xcc>
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <SD_PowerON+0xce>
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]

    count++;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3301      	adds	r3, #1
 8007648:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007650:	4293      	cmp	r3, r2
 8007652:	d802      	bhi.n	800765a <SD_PowerON+0xe6>
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0cc      	beq.n	80075f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007660:	4293      	cmp	r3, r2
 8007662:	d902      	bls.n	800766a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007668:	e00c      	b.n	8007684 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	645a      	str	r2, [r3, #68]	; 0x44
 800767a:	e002      	b.n	8007682 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	c1100000 	.word	0xc1100000

08007690 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80076a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076a4:	e018      	b.n	80076d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ae:	041b      	lsls	r3, r3, #16
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f001 fe04 	bl	80092c0 <SDMMC_CmdSendStatus>
 80076b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	e009      	b.n	80076d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 fba7 	bl	8008e1e <SDIO_GetResponse>
 80076d0:	4602      	mov	r2, r0
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80076e8:	2300      	movs	r3, #0
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2100      	movs	r1, #0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 fb91 	bl	8008e1e <SDIO_GetResponse>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007706:	d102      	bne.n	800770e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800770c:	e02f      	b.n	800776e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800770e:	f107 030c 	add.w	r3, r7, #12
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f879 	bl	800780c <SD_FindSCR>
 800771a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	e023      	b.n	800776e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01c      	beq.n	800776a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007738:	041b      	lsls	r3, r3, #16
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f001 fcd9 	bl	80090f4 <SDMMC_CmdAppCommand>
 8007742:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	e00f      	b.n	800776e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2102      	movs	r1, #2
 8007754:	4618      	mov	r0, r3
 8007756:	f001 fd12 	bl	800917e <SDMMC_CmdBusWidth>
 800775a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	e003      	b.n	800776e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007766:	2300      	movs	r3, #0
 8007768:	e001      	b.n	800776e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800776a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f001 fb46 	bl	8008e1e <SDIO_GetResponse>
 8007792:	4603      	mov	r3, r0
 8007794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800779c:	d102      	bne.n	80077a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800779e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077a2:	e02f      	b.n	8007804 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f82e 	bl	800780c <SD_FindSCR>
 80077b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	e023      	b.n	8007804 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d01c      	beq.n	8007800 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ce:	041b      	lsls	r3, r3, #16
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f001 fc8e 	bl	80090f4 <SDMMC_CmdAppCommand>
 80077d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	e00f      	b.n	8007804 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 fcc7 	bl	800917e <SDMMC_CmdBusWidth>
 80077f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	e003      	b.n	8007804 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e001      	b.n	8007804 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007800:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b08f      	sub	sp, #60	; 0x3c
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007816:	f7fa fda7 	bl	8002368 <HAL_GetTick>
 800781a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007820:	2300      	movs	r3, #0
 8007822:	60bb      	str	r3, [r7, #8]
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2108      	movs	r1, #8
 8007832:	4618      	mov	r0, r3
 8007834:	f001 fb32 	bl	8008e9c <SDMMC_CmdBlockLength>
 8007838:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	e0b2      	b.n	80079aa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f001 fc4f 	bl	80090f4 <SDMMC_CmdAppCommand>
 8007856:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <SD_FindSCR+0x56>
  {
    return errorstate;
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	e0a3      	b.n	80079aa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007862:	f04f 33ff 	mov.w	r3, #4294967295
 8007866:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007868:	2308      	movs	r3, #8
 800786a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800786c:	2330      	movs	r3, #48	; 0x30
 800786e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007870:	2302      	movs	r3, #2
 8007872:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007874:	2300      	movs	r3, #0
 8007876:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007878:	2301      	movs	r3, #1
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f107 0210 	add.w	r2, r7, #16
 8007884:	4611      	mov	r1, r2
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fadc 	bl	8008e44 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f001 fc96 	bl	80091c2 <SDMMC_CmdSendSCR>
 8007896:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d02a      	beq.n	80078f4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	e083      	b.n	80079aa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00f      	beq.n	80078d0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6819      	ldr	r1, [r3, #0]
 80078b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	f107 0208 	add.w	r2, r7, #8
 80078bc:	18d4      	adds	r4, r2, r3
 80078be:	4608      	mov	r0, r1
 80078c0:	f001 fa3b 	bl	8008d3a <SDIO_ReadFIFO>
 80078c4:	4603      	mov	r3, r0
 80078c6:	6023      	str	r3, [r4, #0]
      index++;
 80078c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ca:	3301      	adds	r3, #1
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34
 80078ce:	e006      	b.n	80078de <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d012      	beq.n	8007904 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80078de:	f7fa fd43 	bl	8002368 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ec:	d102      	bne.n	80078f4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80078ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078f2:	e05a      	b.n	80079aa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0cf      	beq.n	80078a2 <SD_FindSCR+0x96>
 8007902:	e000      	b.n	8007906 <SD_FindSCR+0xfa>
      break;
 8007904:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2208      	movs	r2, #8
 800791a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800791c:	2308      	movs	r3, #8
 800791e:	e044      	b.n	80079aa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2202      	movs	r2, #2
 8007934:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007936:	2302      	movs	r3, #2
 8007938:	e037      	b.n	80079aa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2220      	movs	r2, #32
 800794e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007950:	2320      	movs	r3, #32
 8007952:	e02a      	b.n	80079aa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f240 523a 	movw	r2, #1338	; 0x53a
 800795c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	061a      	lsls	r2, r3, #24
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800796a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007974:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	0e1b      	lsrs	r3, r3, #24
 800797a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	601a      	str	r2, [r3, #0]
    scr++;
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	3304      	adds	r3, #4
 8007984:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	061a      	lsls	r2, r3, #24
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007992:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	0a1b      	lsrs	r3, r3, #8
 8007998:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800799c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	0e1b      	lsrs	r3, r3, #24
 80079a2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	373c      	adds	r7, #60	; 0x3c
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd90      	pop	{r4, r7, pc}

080079b2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b086      	sub	sp, #24
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d03f      	beq.n	8007a4c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80079cc:	2300      	movs	r3, #0
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e033      	b.n	8007a3a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 f9af 	bl	8008d3a <SDIO_ReadFIFO>
 80079dc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3301      	adds	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	0a1b      	lsrs	r3, r3, #8
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	0c1b      	lsrs	r3, r3, #16
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	3301      	adds	r3, #1
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b07      	cmp	r3, #7
 8007a3e:	d9c8      	bls.n	80079d2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d043      	beq.n	8007af6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e037      	b.n	8007ae4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	021a      	lsls	r2, r3, #8
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	041a      	lsls	r2, r3, #16
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	061a      	lsls	r2, r3, #24
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f107 0208 	add.w	r2, r7, #8
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 f93b 	bl	8008d54 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2b07      	cmp	r3, #7
 8007ae8:	d9c4      	bls.n	8007a74 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007af6:	bf00      	nop
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e025      	b.n	8007b5e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fa face 	bl	80020c8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f000 ffde 	bl	8008b00 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	f001 f849 	bl	8008be6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e07b      	b.n	8007c70 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d108      	bne.n	8007b92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b88:	d009      	beq.n	8007b9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	61da      	str	r2, [r3, #28]
 8007b90:	e005      	b.n	8007b9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fa f8eb 	bl	8001d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c22:	ea42 0103 	orr.w	r1, r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	0c1b      	lsrs	r3, r3, #16
 8007c3c:	f003 0104 	and.w	r1, r3, #4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	f003 0210 	and.w	r2, r3, #16
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69da      	ldr	r2, [r3, #28]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e041      	b.n	8007d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fa f8e0 	bl	8001e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f000 fa96 	bl	80081e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d001      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e04e      	b.n	8007dce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0201 	orr.w	r2, r2, #1
 8007d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a23      	ldr	r2, [pc, #140]	; (8007ddc <HAL_TIM_Base_Start_IT+0xc4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d022      	beq.n	8007d98 <HAL_TIM_Base_Start_IT+0x80>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d5a:	d01d      	beq.n	8007d98 <HAL_TIM_Base_Start_IT+0x80>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d018      	beq.n	8007d98 <HAL_TIM_Base_Start_IT+0x80>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1e      	ldr	r2, [pc, #120]	; (8007de4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d013      	beq.n	8007d98 <HAL_TIM_Base_Start_IT+0x80>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00e      	beq.n	8007d98 <HAL_TIM_Base_Start_IT+0x80>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a1b      	ldr	r2, [pc, #108]	; (8007dec <HAL_TIM_Base_Start_IT+0xd4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d009      	beq.n	8007d98 <HAL_TIM_Base_Start_IT+0x80>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a19      	ldr	r2, [pc, #100]	; (8007df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d004      	beq.n	8007d98 <HAL_TIM_Base_Start_IT+0x80>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d111      	bne.n	8007dbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b06      	cmp	r3, #6
 8007da8:	d010      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0201 	orr.w	r2, r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dba:	e007      	b.n	8007dcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0201 	orr.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40010400 	.word	0x40010400
 8007df0:	40014000 	.word	0x40014000
 8007df4:	40001800 	.word	0x40001800

08007df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d122      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d11b      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0202 	mvn.w	r2, #2
 8007e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9b5 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9a7 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9b8 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d122      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d11b      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0204 	mvn.w	r2, #4
 8007e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f98b 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f97d 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f98e 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d122      	bne.n	8007efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d11b      	bne.n	8007efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0208 	mvn.w	r2, #8
 8007ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f961 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007ee8:	e005      	b.n	8007ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f953 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f964 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0310 	and.w	r3, r3, #16
 8007f06:	2b10      	cmp	r3, #16
 8007f08:	d122      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d11b      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f06f 0210 	mvn.w	r2, #16
 8007f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2208      	movs	r2, #8
 8007f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f937 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007f3c:	e005      	b.n	8007f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f929 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f93a 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d10e      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d107      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0201 	mvn.w	r2, #1
 8007f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7f9 fab6 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f86:	2b80      	cmp	r3, #128	; 0x80
 8007f88:	d10e      	bne.n	8007fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f94:	2b80      	cmp	r3, #128	; 0x80
 8007f96:	d107      	bne.n	8007fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fae0 	bl	8008568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d10e      	bne.n	8007fd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d107      	bne.n	8007fd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f8ff 	bl	80081d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f003 0320 	and.w	r3, r3, #32
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d10e      	bne.n	8008000 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f003 0320 	and.w	r3, r3, #32
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d107      	bne.n	8008000 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f06f 0220 	mvn.w	r2, #32
 8007ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 faaa 	bl	8008554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_TIM_ConfigClockSource+0x1c>
 8008020:	2302      	movs	r3, #2
 8008022:	e0b4      	b.n	800818e <HAL_TIM_ConfigClockSource+0x186>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800804a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800805c:	d03e      	beq.n	80080dc <HAL_TIM_ConfigClockSource+0xd4>
 800805e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008062:	f200 8087 	bhi.w	8008174 <HAL_TIM_ConfigClockSource+0x16c>
 8008066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800806a:	f000 8086 	beq.w	800817a <HAL_TIM_ConfigClockSource+0x172>
 800806e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008072:	d87f      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x16c>
 8008074:	2b70      	cmp	r3, #112	; 0x70
 8008076:	d01a      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0xa6>
 8008078:	2b70      	cmp	r3, #112	; 0x70
 800807a:	d87b      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x16c>
 800807c:	2b60      	cmp	r3, #96	; 0x60
 800807e:	d050      	beq.n	8008122 <HAL_TIM_ConfigClockSource+0x11a>
 8008080:	2b60      	cmp	r3, #96	; 0x60
 8008082:	d877      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x16c>
 8008084:	2b50      	cmp	r3, #80	; 0x50
 8008086:	d03c      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0xfa>
 8008088:	2b50      	cmp	r3, #80	; 0x50
 800808a:	d873      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x16c>
 800808c:	2b40      	cmp	r3, #64	; 0x40
 800808e:	d058      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0x13a>
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	d86f      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x16c>
 8008094:	2b30      	cmp	r3, #48	; 0x30
 8008096:	d064      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x15a>
 8008098:	2b30      	cmp	r3, #48	; 0x30
 800809a:	d86b      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x16c>
 800809c:	2b20      	cmp	r3, #32
 800809e:	d060      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x15a>
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d867      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x16c>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d05c      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x15a>
 80080a8:	2b10      	cmp	r3, #16
 80080aa:	d05a      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x15a>
 80080ac:	e062      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	6899      	ldr	r1, [r3, #8]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f000 f9ad 	bl	800841c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	609a      	str	r2, [r3, #8]
      break;
 80080da:	e04f      	b.n	800817c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	6899      	ldr	r1, [r3, #8]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f000 f996 	bl	800841c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080fe:	609a      	str	r2, [r3, #8]
      break;
 8008100:	e03c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	6859      	ldr	r1, [r3, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	461a      	mov	r2, r3
 8008110:	f000 f90a 	bl	8008328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2150      	movs	r1, #80	; 0x50
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f963 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 8008120:	e02c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	6859      	ldr	r1, [r3, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	461a      	mov	r2, r3
 8008130:	f000 f929 	bl	8008386 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2160      	movs	r1, #96	; 0x60
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f953 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 8008140:	e01c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6859      	ldr	r1, [r3, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	461a      	mov	r2, r3
 8008150:	f000 f8ea 	bl	8008328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2140      	movs	r1, #64	; 0x40
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f943 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 8008160:	e00c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f000 f93a 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 8008172:	e003      	b.n	800817c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	73fb      	strb	r3, [r7, #15]
      break;
 8008178:	e000      	b.n	800817c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800817a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800818c:	7bfb      	ldrb	r3, [r7, #15]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a40      	ldr	r2, [pc, #256]	; (80082fc <TIM_Base_SetConfig+0x114>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008206:	d00f      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a3d      	ldr	r2, [pc, #244]	; (8008300 <TIM_Base_SetConfig+0x118>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00b      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a3c      	ldr	r2, [pc, #240]	; (8008304 <TIM_Base_SetConfig+0x11c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d007      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a3b      	ldr	r2, [pc, #236]	; (8008308 <TIM_Base_SetConfig+0x120>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a3a      	ldr	r2, [pc, #232]	; (800830c <TIM_Base_SetConfig+0x124>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d108      	bne.n	800823a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a2f      	ldr	r2, [pc, #188]	; (80082fc <TIM_Base_SetConfig+0x114>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d02b      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008248:	d027      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2c      	ldr	r2, [pc, #176]	; (8008300 <TIM_Base_SetConfig+0x118>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d023      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2b      	ldr	r2, [pc, #172]	; (8008304 <TIM_Base_SetConfig+0x11c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01f      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2a      	ldr	r2, [pc, #168]	; (8008308 <TIM_Base_SetConfig+0x120>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01b      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a29      	ldr	r2, [pc, #164]	; (800830c <TIM_Base_SetConfig+0x124>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d017      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a28      	ldr	r2, [pc, #160]	; (8008310 <TIM_Base_SetConfig+0x128>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d013      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a27      	ldr	r2, [pc, #156]	; (8008314 <TIM_Base_SetConfig+0x12c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00f      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a26      	ldr	r2, [pc, #152]	; (8008318 <TIM_Base_SetConfig+0x130>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00b      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a25      	ldr	r2, [pc, #148]	; (800831c <TIM_Base_SetConfig+0x134>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d007      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a24      	ldr	r2, [pc, #144]	; (8008320 <TIM_Base_SetConfig+0x138>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d003      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a23      	ldr	r2, [pc, #140]	; (8008324 <TIM_Base_SetConfig+0x13c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d108      	bne.n	80082ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a0a      	ldr	r2, [pc, #40]	; (80082fc <TIM_Base_SetConfig+0x114>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_Base_SetConfig+0xf8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a0c      	ldr	r2, [pc, #48]	; (800830c <TIM_Base_SetConfig+0x124>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d103      	bne.n	80082e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	691a      	ldr	r2, [r3, #16]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	615a      	str	r2, [r3, #20]
}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40010000 	.word	0x40010000
 8008300:	40000400 	.word	0x40000400
 8008304:	40000800 	.word	0x40000800
 8008308:	40000c00 	.word	0x40000c00
 800830c:	40010400 	.word	0x40010400
 8008310:	40014000 	.word	0x40014000
 8008314:	40014400 	.word	0x40014400
 8008318:	40014800 	.word	0x40014800
 800831c:	40001800 	.word	0x40001800
 8008320:	40001c00 	.word	0x40001c00
 8008324:	40002000 	.word	0x40002000

08008328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	f023 0201 	bic.w	r2, r3, #1
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	011b      	lsls	r3, r3, #4
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	4313      	orrs	r3, r2
 800835c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f023 030a 	bic.w	r3, r3, #10
 8008364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	621a      	str	r2, [r3, #32]
}
 800837a:	bf00      	nop
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008386:	b480      	push	{r7}
 8008388:	b087      	sub	sp, #28
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f023 0210 	bic.w	r2, r3, #16
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	031b      	lsls	r3, r3, #12
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	011b      	lsls	r3, r3, #4
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	621a      	str	r2, [r3, #32]
}
 80083da:	bf00      	nop
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	f043 0307 	orr.w	r3, r3, #7
 8008408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	609a      	str	r2, [r3, #8]
}
 8008410:	bf00      	nop
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	021a      	lsls	r2, r3, #8
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	431a      	orrs	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4313      	orrs	r3, r2
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	609a      	str	r2, [r3, #8]
}
 8008450:	bf00      	nop
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008470:	2302      	movs	r3, #2
 8008472:	e05a      	b.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a21      	ldr	r2, [pc, #132]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d022      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c0:	d01d      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1d      	ldr	r2, [pc, #116]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d018      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1b      	ldr	r2, [pc, #108]	; (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d013      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1a      	ldr	r2, [pc, #104]	; (8008544 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00e      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a18      	ldr	r2, [pc, #96]	; (8008548 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d009      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a17      	ldr	r2, [pc, #92]	; (800854c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d004      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a15      	ldr	r2, [pc, #84]	; (8008550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d10c      	bne.n	8008518 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	4313      	orrs	r3, r2
 800850e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40010000 	.word	0x40010000
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40010400 	.word	0x40010400
 800854c:	40014000 	.word	0x40014000
 8008550:	40001800 	.word	0x40001800

08008554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e03f      	b.n	800860e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7f9 fca2 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2224      	movs	r2, #36	; 0x24
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f829 	bl	8008618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695a      	ldr	r2, [r3, #20]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800861c:	b0c0      	sub	sp, #256	; 0x100
 800861e:	af00      	add	r7, sp, #0
 8008620:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008634:	68d9      	ldr	r1, [r3, #12]
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	ea40 0301 	orr.w	r3, r0, r1
 8008640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	431a      	orrs	r2, r3
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	431a      	orrs	r2, r3
 8008658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008670:	f021 010c 	bic.w	r1, r1, #12
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800867e:	430b      	orrs	r3, r1
 8008680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800868e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008692:	6999      	ldr	r1, [r3, #24]
 8008694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	ea40 0301 	orr.w	r3, r0, r1
 800869e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4b8f      	ldr	r3, [pc, #572]	; (80088e4 <UART_SetConfig+0x2cc>)
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d005      	beq.n	80086b8 <UART_SetConfig+0xa0>
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b8d      	ldr	r3, [pc, #564]	; (80088e8 <UART_SetConfig+0x2d0>)
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d104      	bne.n	80086c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086b8:	f7fd f9fe 	bl	8005ab8 <HAL_RCC_GetPCLK2Freq>
 80086bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086c0:	e003      	b.n	80086ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086c2:	f7fd f9e5 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 80086c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d4:	f040 810c 	bne.w	80088f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086dc:	2200      	movs	r2, #0
 80086de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80086ea:	4622      	mov	r2, r4
 80086ec:	462b      	mov	r3, r5
 80086ee:	1891      	adds	r1, r2, r2
 80086f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80086f2:	415b      	adcs	r3, r3
 80086f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086fa:	4621      	mov	r1, r4
 80086fc:	eb12 0801 	adds.w	r8, r2, r1
 8008700:	4629      	mov	r1, r5
 8008702:	eb43 0901 	adc.w	r9, r3, r1
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	f04f 0300 	mov.w	r3, #0
 800870e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800871a:	4690      	mov	r8, r2
 800871c:	4699      	mov	r9, r3
 800871e:	4623      	mov	r3, r4
 8008720:	eb18 0303 	adds.w	r3, r8, r3
 8008724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008728:	462b      	mov	r3, r5
 800872a:	eb49 0303 	adc.w	r3, r9, r3
 800872e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800873e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008746:	460b      	mov	r3, r1
 8008748:	18db      	adds	r3, r3, r3
 800874a:	653b      	str	r3, [r7, #80]	; 0x50
 800874c:	4613      	mov	r3, r2
 800874e:	eb42 0303 	adc.w	r3, r2, r3
 8008752:	657b      	str	r3, [r7, #84]	; 0x54
 8008754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800875c:	f7f7 fd50 	bl	8000200 <__aeabi_uldivmod>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4b61      	ldr	r3, [pc, #388]	; (80088ec <UART_SetConfig+0x2d4>)
 8008766:	fba3 2302 	umull	r2, r3, r3, r2
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	011c      	lsls	r4, r3, #4
 800876e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008772:	2200      	movs	r2, #0
 8008774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008778:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800877c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008780:	4642      	mov	r2, r8
 8008782:	464b      	mov	r3, r9
 8008784:	1891      	adds	r1, r2, r2
 8008786:	64b9      	str	r1, [r7, #72]	; 0x48
 8008788:	415b      	adcs	r3, r3
 800878a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800878c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008790:	4641      	mov	r1, r8
 8008792:	eb12 0a01 	adds.w	sl, r2, r1
 8008796:	4649      	mov	r1, r9
 8008798:	eb43 0b01 	adc.w	fp, r3, r1
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087b0:	4692      	mov	sl, r2
 80087b2:	469b      	mov	fp, r3
 80087b4:	4643      	mov	r3, r8
 80087b6:	eb1a 0303 	adds.w	r3, sl, r3
 80087ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087be:	464b      	mov	r3, r9
 80087c0:	eb4b 0303 	adc.w	r3, fp, r3
 80087c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80087d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087dc:	460b      	mov	r3, r1
 80087de:	18db      	adds	r3, r3, r3
 80087e0:	643b      	str	r3, [r7, #64]	; 0x40
 80087e2:	4613      	mov	r3, r2
 80087e4:	eb42 0303 	adc.w	r3, r2, r3
 80087e8:	647b      	str	r3, [r7, #68]	; 0x44
 80087ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80087f2:	f7f7 fd05 	bl	8000200 <__aeabi_uldivmod>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4611      	mov	r1, r2
 80087fc:	4b3b      	ldr	r3, [pc, #236]	; (80088ec <UART_SetConfig+0x2d4>)
 80087fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008802:	095b      	lsrs	r3, r3, #5
 8008804:	2264      	movs	r2, #100	; 0x64
 8008806:	fb02 f303 	mul.w	r3, r2, r3
 800880a:	1acb      	subs	r3, r1, r3
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008812:	4b36      	ldr	r3, [pc, #216]	; (80088ec <UART_SetConfig+0x2d4>)
 8008814:	fba3 2302 	umull	r2, r3, r3, r2
 8008818:	095b      	lsrs	r3, r3, #5
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008820:	441c      	add	r4, r3
 8008822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008826:	2200      	movs	r2, #0
 8008828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800882c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008834:	4642      	mov	r2, r8
 8008836:	464b      	mov	r3, r9
 8008838:	1891      	adds	r1, r2, r2
 800883a:	63b9      	str	r1, [r7, #56]	; 0x38
 800883c:	415b      	adcs	r3, r3
 800883e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008844:	4641      	mov	r1, r8
 8008846:	1851      	adds	r1, r2, r1
 8008848:	6339      	str	r1, [r7, #48]	; 0x30
 800884a:	4649      	mov	r1, r9
 800884c:	414b      	adcs	r3, r1
 800884e:	637b      	str	r3, [r7, #52]	; 0x34
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800885c:	4659      	mov	r1, fp
 800885e:	00cb      	lsls	r3, r1, #3
 8008860:	4651      	mov	r1, sl
 8008862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008866:	4651      	mov	r1, sl
 8008868:	00ca      	lsls	r2, r1, #3
 800886a:	4610      	mov	r0, r2
 800886c:	4619      	mov	r1, r3
 800886e:	4603      	mov	r3, r0
 8008870:	4642      	mov	r2, r8
 8008872:	189b      	adds	r3, r3, r2
 8008874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008878:	464b      	mov	r3, r9
 800887a:	460a      	mov	r2, r1
 800887c:	eb42 0303 	adc.w	r3, r2, r3
 8008880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008890:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008898:	460b      	mov	r3, r1
 800889a:	18db      	adds	r3, r3, r3
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
 800889e:	4613      	mov	r3, r2
 80088a0:	eb42 0303 	adc.w	r3, r2, r3
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80088ae:	f7f7 fca7 	bl	8000200 <__aeabi_uldivmod>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <UART_SetConfig+0x2d4>)
 80088b8:	fba3 1302 	umull	r1, r3, r3, r2
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	2164      	movs	r1, #100	; 0x64
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	3332      	adds	r3, #50	; 0x32
 80088ca:	4a08      	ldr	r2, [pc, #32]	; (80088ec <UART_SetConfig+0x2d4>)
 80088cc:	fba2 2303 	umull	r2, r3, r2, r3
 80088d0:	095b      	lsrs	r3, r3, #5
 80088d2:	f003 0207 	and.w	r2, r3, #7
 80088d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4422      	add	r2, r4
 80088de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088e0:	e106      	b.n	8008af0 <UART_SetConfig+0x4d8>
 80088e2:	bf00      	nop
 80088e4:	40011000 	.word	0x40011000
 80088e8:	40011400 	.word	0x40011400
 80088ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008902:	4642      	mov	r2, r8
 8008904:	464b      	mov	r3, r9
 8008906:	1891      	adds	r1, r2, r2
 8008908:	6239      	str	r1, [r7, #32]
 800890a:	415b      	adcs	r3, r3
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
 800890e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008912:	4641      	mov	r1, r8
 8008914:	1854      	adds	r4, r2, r1
 8008916:	4649      	mov	r1, r9
 8008918:	eb43 0501 	adc.w	r5, r3, r1
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	f04f 0300 	mov.w	r3, #0
 8008924:	00eb      	lsls	r3, r5, #3
 8008926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800892a:	00e2      	lsls	r2, r4, #3
 800892c:	4614      	mov	r4, r2
 800892e:	461d      	mov	r5, r3
 8008930:	4643      	mov	r3, r8
 8008932:	18e3      	adds	r3, r4, r3
 8008934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008938:	464b      	mov	r3, r9
 800893a:	eb45 0303 	adc.w	r3, r5, r3
 800893e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800894e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800895e:	4629      	mov	r1, r5
 8008960:	008b      	lsls	r3, r1, #2
 8008962:	4621      	mov	r1, r4
 8008964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008968:	4621      	mov	r1, r4
 800896a:	008a      	lsls	r2, r1, #2
 800896c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008970:	f7f7 fc46 	bl	8000200 <__aeabi_uldivmod>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4b60      	ldr	r3, [pc, #384]	; (8008afc <UART_SetConfig+0x4e4>)
 800897a:	fba3 2302 	umull	r2, r3, r3, r2
 800897e:	095b      	lsrs	r3, r3, #5
 8008980:	011c      	lsls	r4, r3, #4
 8008982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008986:	2200      	movs	r2, #0
 8008988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800898c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008994:	4642      	mov	r2, r8
 8008996:	464b      	mov	r3, r9
 8008998:	1891      	adds	r1, r2, r2
 800899a:	61b9      	str	r1, [r7, #24]
 800899c:	415b      	adcs	r3, r3
 800899e:	61fb      	str	r3, [r7, #28]
 80089a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089a4:	4641      	mov	r1, r8
 80089a6:	1851      	adds	r1, r2, r1
 80089a8:	6139      	str	r1, [r7, #16]
 80089aa:	4649      	mov	r1, r9
 80089ac:	414b      	adcs	r3, r1
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	f04f 0200 	mov.w	r2, #0
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089bc:	4659      	mov	r1, fp
 80089be:	00cb      	lsls	r3, r1, #3
 80089c0:	4651      	mov	r1, sl
 80089c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089c6:	4651      	mov	r1, sl
 80089c8:	00ca      	lsls	r2, r1, #3
 80089ca:	4610      	mov	r0, r2
 80089cc:	4619      	mov	r1, r3
 80089ce:	4603      	mov	r3, r0
 80089d0:	4642      	mov	r2, r8
 80089d2:	189b      	adds	r3, r3, r2
 80089d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089d8:	464b      	mov	r3, r9
 80089da:	460a      	mov	r2, r1
 80089dc:	eb42 0303 	adc.w	r3, r2, r3
 80089e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80089ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80089f0:	f04f 0200 	mov.w	r2, #0
 80089f4:	f04f 0300 	mov.w	r3, #0
 80089f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80089fc:	4649      	mov	r1, r9
 80089fe:	008b      	lsls	r3, r1, #2
 8008a00:	4641      	mov	r1, r8
 8008a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a06:	4641      	mov	r1, r8
 8008a08:	008a      	lsls	r2, r1, #2
 8008a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a0e:	f7f7 fbf7 	bl	8000200 <__aeabi_uldivmod>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	4b38      	ldr	r3, [pc, #224]	; (8008afc <UART_SetConfig+0x4e4>)
 8008a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a1e:	095b      	lsrs	r3, r3, #5
 8008a20:	2264      	movs	r2, #100	; 0x64
 8008a22:	fb02 f303 	mul.w	r3, r2, r3
 8008a26:	1acb      	subs	r3, r1, r3
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	3332      	adds	r3, #50	; 0x32
 8008a2c:	4a33      	ldr	r2, [pc, #204]	; (8008afc <UART_SetConfig+0x4e4>)
 8008a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a32:	095b      	lsrs	r3, r3, #5
 8008a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a38:	441c      	add	r4, r3
 8008a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a3e:	2200      	movs	r2, #0
 8008a40:	673b      	str	r3, [r7, #112]	; 0x70
 8008a42:	677a      	str	r2, [r7, #116]	; 0x74
 8008a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a48:	4642      	mov	r2, r8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	1891      	adds	r1, r2, r2
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	415b      	adcs	r3, r3
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a58:	4641      	mov	r1, r8
 8008a5a:	1851      	adds	r1, r2, r1
 8008a5c:	6039      	str	r1, [r7, #0]
 8008a5e:	4649      	mov	r1, r9
 8008a60:	414b      	adcs	r3, r1
 8008a62:	607b      	str	r3, [r7, #4]
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a70:	4659      	mov	r1, fp
 8008a72:	00cb      	lsls	r3, r1, #3
 8008a74:	4651      	mov	r1, sl
 8008a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a7a:	4651      	mov	r1, sl
 8008a7c:	00ca      	lsls	r2, r1, #3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	4619      	mov	r1, r3
 8008a82:	4603      	mov	r3, r0
 8008a84:	4642      	mov	r2, r8
 8008a86:	189b      	adds	r3, r3, r2
 8008a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	460a      	mov	r2, r1
 8008a8e:	eb42 0303 	adc.w	r3, r2, r3
 8008a92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8008a9e:	667a      	str	r2, [r7, #100]	; 0x64
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	f04f 0300 	mov.w	r3, #0
 8008aa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008aac:	4649      	mov	r1, r9
 8008aae:	008b      	lsls	r3, r1, #2
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ab6:	4641      	mov	r1, r8
 8008ab8:	008a      	lsls	r2, r1, #2
 8008aba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008abe:	f7f7 fb9f 	bl	8000200 <__aeabi_uldivmod>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <UART_SetConfig+0x4e4>)
 8008ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8008acc:	095b      	lsrs	r3, r3, #5
 8008ace:	2164      	movs	r1, #100	; 0x64
 8008ad0:	fb01 f303 	mul.w	r3, r1, r3
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	3332      	adds	r3, #50	; 0x32
 8008ada:	4a08      	ldr	r2, [pc, #32]	; (8008afc <UART_SetConfig+0x4e4>)
 8008adc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	f003 020f 	and.w	r2, r3, #15
 8008ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4422      	add	r2, r4
 8008aee:	609a      	str	r2, [r3, #8]
}
 8008af0:	bf00      	nop
 8008af2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008af6:	46bd      	mov	sp, r7
 8008af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008afc:	51eb851f 	.word	0x51eb851f

08008b00 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d029      	beq.n	8008b6e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008b26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b2a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b34:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008b3a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008b40:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008b46:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008b4c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008b52:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008b58:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008b5e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	e034      	b.n	8008bd8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b7a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b84:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b8a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008b9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ba2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008bb2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008bb8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008bbe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008bc4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b087      	sub	sp, #28
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d02e      	beq.n	8008c5e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c0c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008c1c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008c26:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008c30:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008c3a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008c44:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	609a      	str	r2, [r3, #8]
 8008c5c:	e03b      	b.n	8008cd6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c6e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008c80:	4313      	orrs	r3, r2
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c94:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008ca4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008cae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008cb8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	f107 001c 	add.w	r0, r7, #28
 8008cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008cfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008cfe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008d02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008d06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008d0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008d0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008d1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	b004      	add	sp, #16
 8008d38:	4770      	bx	lr

08008d3a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2203      	movs	r2, #3
 8008d82:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008d84:	2002      	movs	r0, #2
 8008d86:	f7f9 fafb 	bl	8002380 <HAL_Delay>
  
  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0303 	and.w	r3, r3, #3
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008dce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008dd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008dda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008dea:	f023 030f 	bic.w	r3, r3, #15
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	b2db      	uxtb	r3, r3
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b085      	sub	sp, #20
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3314      	adds	r3, #20
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	4413      	add	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
}  
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008e70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008e76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0

}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008eaa:	2310      	movs	r3, #16
 8008eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eae:	2340      	movs	r3, #64	; 0x40
 8008eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff74 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ecc:	2110      	movs	r1, #16
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa44 	bl	800935c <SDMMC_GetCmdResp1>
 8008ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008eee:	2311      	movs	r3, #17
 8008ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ef2:	2340      	movs	r3, #64	; 0x40
 8008ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f00:	f107 0308 	add.w	r3, r7, #8
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ff52 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f10:	2111      	movs	r1, #17
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa22 	bl	800935c <SDMMC_GetCmdResp1>
 8008f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008f32:	2312      	movs	r3, #18
 8008f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f36:	2340      	movs	r3, #64	; 0x40
 8008f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f44:	f107 0308 	add.w	r3, r7, #8
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff ff30 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f54:	2112      	movs	r1, #18
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa00 	bl	800935c <SDMMC_GetCmdResp1>
 8008f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f5e:	69fb      	ldr	r3, [r7, #28]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3720      	adds	r7, #32
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f76:	2318      	movs	r3, #24
 8008f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f7a:	2340      	movs	r3, #64	; 0x40
 8008f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f88:	f107 0308 	add.w	r3, r7, #8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff ff0e 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f98:	2118      	movs	r1, #24
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f9de 	bl	800935c <SDMMC_GetCmdResp1>
 8008fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008fba:	2319      	movs	r3, #25
 8008fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fbe:	2340      	movs	r3, #64	; 0x40
 8008fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fcc:	f107 0308 	add.w	r3, r7, #8
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff feec 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fdc:	2119      	movs	r1, #25
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9bc 	bl	800935c <SDMMC_GetCmdResp1>
 8008fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ffc:	230c      	movs	r3, #12
 8008ffe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009000:	2340      	movs	r3, #64	; 0x40
 8009002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800900c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff fecb 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800901a:	4a05      	ldr	r2, [pc, #20]	; (8009030 <SDMMC_CmdStopTransfer+0x40>)
 800901c:	210c      	movs	r1, #12
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f99c 	bl	800935c <SDMMC_GetCmdResp1>
 8009024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009026:	69fb      	ldr	r3, [r7, #28]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3720      	adds	r7, #32
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	05f5e100 	.word	0x05f5e100

08009034 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08a      	sub	sp, #40	; 0x28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009044:	2307      	movs	r3, #7
 8009046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009048:	2340      	movs	r3, #64	; 0x40
 800904a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009054:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009056:	f107 0310 	add.w	r3, r7, #16
 800905a:	4619      	mov	r1, r3
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff fea7 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009062:	f241 3288 	movw	r2, #5000	; 0x1388
 8009066:	2107      	movs	r1, #7
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 f977 	bl	800935c <SDMMC_GetCmdResp1>
 800906e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009072:	4618      	mov	r0, r3
 8009074:	3728      	adds	r7, #40	; 0x28
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800908a:	2300      	movs	r3, #0
 800908c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009096:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fe86 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f92d 	bl	8009304 <SDMMC_GetCmdError>
 80090aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ac:	69fb      	ldr	r3, [r7, #28]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80090be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80090c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80090c4:	2308      	movs	r3, #8
 80090c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090c8:	2340      	movs	r3, #64	; 0x40
 80090ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fe67 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fb24 	bl	8009730 <SDMMC_GetCmdResp7>
 80090e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ea:	69fb      	ldr	r3, [r7, #28]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009102:	2337      	movs	r3, #55	; 0x37
 8009104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800910e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009112:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009114:	f107 0308 	add.w	r3, r7, #8
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fe48 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009120:	f241 3288 	movw	r2, #5000	; 0x1388
 8009124:	2137      	movs	r1, #55	; 0x37
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f918 	bl	800935c <SDMMC_GetCmdResp1>
 800912c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800912e:	69fb      	ldr	r3, [r7, #28]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800914c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800914e:	2329      	movs	r3, #41	; 0x29
 8009150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800915a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800915e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009160:	f107 0308 	add.w	r3, r7, #8
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff fe22 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fa2b 	bl	80095c8 <SDMMC_GetCmdResp3>
 8009172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009174:	69fb      	ldr	r3, [r7, #28]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3720      	adds	r7, #32
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b088      	sub	sp, #32
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800918c:	2306      	movs	r3, #6
 800918e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009190:	2340      	movs	r3, #64	; 0x40
 8009192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009194:	2300      	movs	r3, #0
 8009196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800919c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800919e:	f107 0308 	add.w	r3, r7, #8
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fe03 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80091aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ae:	2106      	movs	r1, #6
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f8d3 	bl	800935c <SDMMC_GetCmdResp1>
 80091b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091b8:	69fb      	ldr	r3, [r7, #28]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3720      	adds	r7, #32
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b088      	sub	sp, #32
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80091ce:	2333      	movs	r3, #51	; 0x33
 80091d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091d2:	2340      	movs	r3, #64	; 0x40
 80091d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091e0:	f107 0308 	add.w	r3, r7, #8
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff fde2 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80091ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f0:	2133      	movs	r1, #51	; 0x33
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f8b2 	bl	800935c <SDMMC_GetCmdResp1>
 80091f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091fa:	69fb      	ldr	r3, [r7, #28]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3720      	adds	r7, #32
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009210:	2302      	movs	r3, #2
 8009212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009214:	23c0      	movs	r3, #192	; 0xc0
 8009216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800921c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009220:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009222:	f107 0308 	add.w	r3, r7, #8
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff fdc1 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f982 	bl	8009538 <SDMMC_GetCmdResp2>
 8009234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009236:	69fb      	ldr	r3, [r7, #28]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3720      	adds	r7, #32
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800924e:	2309      	movs	r3, #9
 8009250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009252:	23c0      	movs	r3, #192	; 0xc0
 8009254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800925a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800925e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009260:	f107 0308 	add.w	r3, r7, #8
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff fda2 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f963 	bl	8009538 <SDMMC_GetCmdResp2>
 8009272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009274:	69fb      	ldr	r3, [r7, #28]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b088      	sub	sp, #32
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800928c:	2303      	movs	r3, #3
 800928e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009290:	2340      	movs	r3, #64	; 0x40
 8009292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800929e:	f107 0308 	add.w	r3, r7, #8
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff fd83 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	2103      	movs	r1, #3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f9c8 	bl	8009644 <SDMMC_GetCmdResp6>
 80092b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092b6:	69fb      	ldr	r3, [r7, #28]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3720      	adds	r7, #32
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80092ce:	230d      	movs	r3, #13
 80092d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092d2:	2340      	movs	r3, #64	; 0x40
 80092d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092e0:	f107 0308 	add.w	r3, r7, #8
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff fd62 	bl	8008db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80092ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f0:	210d      	movs	r1, #13
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f832 	bl	800935c <SDMMC_GetCmdResp1>
 80092f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092fa:	69fb      	ldr	r3, [r7, #28]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800930c:	4b11      	ldr	r3, [pc, #68]	; (8009354 <SDMMC_GetCmdError+0x50>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a11      	ldr	r2, [pc, #68]	; (8009358 <SDMMC_GetCmdError+0x54>)
 8009312:	fba2 2303 	umull	r2, r3, r2, r3
 8009316:	0a5b      	lsrs	r3, r3, #9
 8009318:	f241 3288 	movw	r2, #5000	; 0x1388
 800931c:	fb02 f303 	mul.w	r3, r2, r3
 8009320:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	1e5a      	subs	r2, r3, #1
 8009326:	60fa      	str	r2, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800932c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009330:	e009      	b.n	8009346 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0f1      	beq.n	8009322 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	22c5      	movs	r2, #197	; 0xc5
 8009342:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000000 	.word	0x20000000
 8009358:	10624dd3 	.word	0x10624dd3

0800935c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	460b      	mov	r3, r1
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800936a:	4b70      	ldr	r3, [pc, #448]	; (800952c <SDMMC_GetCmdResp1+0x1d0>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a70      	ldr	r2, [pc, #448]	; (8009530 <SDMMC_GetCmdResp1+0x1d4>)
 8009370:	fba2 2303 	umull	r2, r3, r2, r3
 8009374:	0a5a      	lsrs	r2, r3, #9
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	fb02 f303 	mul.w	r3, r2, r3
 800937c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	1e5a      	subs	r2, r3, #1
 8009382:	61fa      	str	r2, [r7, #28]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800938c:	e0c9      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0ef      	beq.n	800937e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1ea      	bne.n	800937e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2204      	movs	r2, #4
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093ba:	2304      	movs	r3, #4
 80093bc:	e0b1      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2201      	movs	r2, #1
 80093ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e0a6      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	22c5      	movs	r2, #197	; 0xc5
 80093d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f7ff fd12 	bl	8008e04 <SDIO_GetCommandResponse>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	7afb      	ldrb	r3, [r7, #11]
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d001      	beq.n	80093ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e099      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80093ee:	2100      	movs	r1, #0
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7ff fd14 	bl	8008e1e <SDIO_GetResponse>
 80093f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	4b4e      	ldr	r3, [pc, #312]	; (8009534 <SDMMC_GetCmdResp1+0x1d8>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009402:	2300      	movs	r3, #0
 8009404:	e08d      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	da02      	bge.n	8009412 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800940c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009410:	e087      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800941c:	2340      	movs	r3, #64	; 0x40
 800941e:	e080      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800942a:	2380      	movs	r3, #128	; 0x80
 800942c:	e079      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800943c:	e071      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800944c:	e069      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800945c:	e061      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800946c:	e059      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800947c:	e051      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800948c:	e049      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800949c:	e041      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80094a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ac:	e039      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80094b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094bc:	e031      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80094c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80094cc:	e029      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80094d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094dc:	e021      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80094e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80094ec:	e019      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80094f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80094fc:	e011      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009508:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800950c:	e009      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009518:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800951c:	e001      	b.n	8009522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800951e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009522:	4618      	mov	r0, r3
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000000 	.word	0x20000000
 8009530:	10624dd3 	.word	0x10624dd3
 8009534:	fdffe008 	.word	0xfdffe008

08009538 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009540:	4b1f      	ldr	r3, [pc, #124]	; (80095c0 <SDMMC_GetCmdResp2+0x88>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a1f      	ldr	r2, [pc, #124]	; (80095c4 <SDMMC_GetCmdResp2+0x8c>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	0a5b      	lsrs	r3, r3, #9
 800954c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009550:	fb02 f303 	mul.w	r3, r2, r3
 8009554:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	1e5a      	subs	r2, r3, #1
 800955a:	60fa      	str	r2, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009564:	e026      	b.n	80095b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0ef      	beq.n	8009556 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1ea      	bne.n	8009556 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2204      	movs	r2, #4
 8009590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009592:	2304      	movs	r3, #4
 8009594:	e00e      	b.n	80095b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d004      	beq.n	80095ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e003      	b.n	80095b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	22c5      	movs	r2, #197	; 0xc5
 80095b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	20000000 	.word	0x20000000
 80095c4:	10624dd3 	.word	0x10624dd3

080095c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095d0:	4b1a      	ldr	r3, [pc, #104]	; (800963c <SDMMC_GetCmdResp3+0x74>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a1a      	ldr	r2, [pc, #104]	; (8009640 <SDMMC_GetCmdResp3+0x78>)
 80095d6:	fba2 2303 	umull	r2, r3, r2, r3
 80095da:	0a5b      	lsrs	r3, r3, #9
 80095dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e0:	fb02 f303 	mul.w	r3, r2, r3
 80095e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	1e5a      	subs	r2, r3, #1
 80095ea:	60fa      	str	r2, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095f4:	e01b      	b.n	800962e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0ef      	beq.n	80095e6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1ea      	bne.n	80095e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2204      	movs	r2, #4
 8009620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009622:	2304      	movs	r3, #4
 8009624:	e003      	b.n	800962e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	22c5      	movs	r2, #197	; 0xc5
 800962a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000000 	.word	0x20000000
 8009640:	10624dd3 	.word	0x10624dd3

08009644 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	460b      	mov	r3, r1
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009652:	4b35      	ldr	r3, [pc, #212]	; (8009728 <SDMMC_GetCmdResp6+0xe4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a35      	ldr	r2, [pc, #212]	; (800972c <SDMMC_GetCmdResp6+0xe8>)
 8009658:	fba2 2303 	umull	r2, r3, r2, r3
 800965c:	0a5b      	lsrs	r3, r3, #9
 800965e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009662:	fb02 f303 	mul.w	r3, r2, r3
 8009666:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	1e5a      	subs	r2, r3, #1
 800966c:	61fa      	str	r2, [r7, #28]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d102      	bne.n	8009678 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009672:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009676:	e052      	b.n	800971e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009684:	2b00      	cmp	r3, #0
 8009686:	d0ef      	beq.n	8009668 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1ea      	bne.n	8009668 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2204      	movs	r2, #4
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096a4:	2304      	movs	r3, #4
 80096a6:	e03a      	b.n	800971e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2201      	movs	r2, #1
 80096b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e02f      	b.n	800971e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff fba0 	bl	8008e04 <SDIO_GetCommandResponse>
 80096c4:	4603      	mov	r3, r0
 80096c6:	461a      	mov	r2, r3
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d001      	beq.n	80096d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e025      	b.n	800971e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	22c5      	movs	r2, #197	; 0xc5
 80096d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80096d8:	2100      	movs	r1, #0
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff fb9f 	bl	8008e1e <SDIO_GetResponse>
 80096e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	0c1b      	lsrs	r3, r3, #16
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	e011      	b.n	800971e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009708:	e009      	b.n	800971e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009718:	e001      	b.n	800971e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800971a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800971e:	4618      	mov	r0, r3
 8009720:	3720      	adds	r7, #32
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000000 	.word	0x20000000
 800972c:	10624dd3 	.word	0x10624dd3

08009730 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009738:	4b22      	ldr	r3, [pc, #136]	; (80097c4 <SDMMC_GetCmdResp7+0x94>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a22      	ldr	r2, [pc, #136]	; (80097c8 <SDMMC_GetCmdResp7+0x98>)
 800973e:	fba2 2303 	umull	r2, r3, r2, r3
 8009742:	0a5b      	lsrs	r3, r3, #9
 8009744:	f241 3288 	movw	r2, #5000	; 0x1388
 8009748:	fb02 f303 	mul.w	r3, r2, r3
 800974c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	1e5a      	subs	r2, r3, #1
 8009752:	60fa      	str	r2, [r7, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800975c:	e02c      	b.n	80097b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009762:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0ef      	beq.n	800974e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1ea      	bne.n	800974e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2204      	movs	r2, #4
 8009788:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800978a:	2304      	movs	r3, #4
 800978c:	e014      	b.n	80097b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	d004      	beq.n	80097a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e009      	b.n	80097b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2240      	movs	r2, #64	; 0x40
 80097b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80097b6:	2300      	movs	r3, #0
  
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	20000000 	.word	0x20000000
 80097c8:	10624dd3 	.word	0x10624dd3

080097cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80097d0:	4904      	ldr	r1, [pc, #16]	; (80097e4 <MX_FATFS_Init+0x18>)
 80097d2:	4805      	ldr	r0, [pc, #20]	; (80097e8 <MX_FATFS_Init+0x1c>)
 80097d4:	f000 faa0 	bl	8009d18 <FATFS_LinkDriver>
 80097d8:	4603      	mov	r3, r0
 80097da:	461a      	mov	r2, r3
 80097dc:	4b03      	ldr	r3, [pc, #12]	; (80097ec <MX_FATFS_Init+0x20>)
 80097de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80097e0:	bf00      	nop
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000648 	.word	0x20000648
 80097e8:	0800d0e0 	.word	0x0800d0e0
 80097ec:	20000644 	.word	0x20000644

080097f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80097fa:	f000 f896 	bl	800992a <BSP_SD_IsDetected>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b01      	cmp	r3, #1
 8009802:	d001      	beq.n	8009808 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e012      	b.n	800982e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009808:	480b      	ldr	r0, [pc, #44]	; (8009838 <BSP_SD_Init+0x48>)
 800980a:	f7fc fe5d 	bl	80064c8 <HAL_SD_Init>
 800980e:	4603      	mov	r3, r0
 8009810:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d109      	bne.n	800982c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800981c:	4806      	ldr	r0, [pc, #24]	; (8009838 <BSP_SD_Init+0x48>)
 800981e:	f7fd fc13 	bl	8007048 <HAL_SD_ConfigWideBusOperation>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800982c:	79fb      	ldrb	r3, [r7, #7]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20000314 	.word	0x20000314

0800983c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	68f9      	ldr	r1, [r7, #12]
 8009852:	4806      	ldr	r0, [pc, #24]	; (800986c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009854:	f7fc fee6 	bl	8006624 <HAL_SD_ReadBlocks_DMA>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009862:	7dfb      	ldrb	r3, [r7, #23]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000314 	.word	0x20000314

08009870 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	4806      	ldr	r0, [pc, #24]	; (80098a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009888:	f7fc ffac 	bl	80067e4 <HAL_SD_WriteBlocks_DMA>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009896:	7dfb      	ldrb	r3, [r7, #23]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20000314 	.word	0x20000314

080098a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80098a8:	4805      	ldr	r0, [pc, #20]	; (80098c0 <BSP_SD_GetCardState+0x1c>)
 80098aa:	f7fd fc67 	bl	800717c <HAL_SD_GetCardState>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	bf14      	ite	ne
 80098b4:	2301      	movne	r3, #1
 80098b6:	2300      	moveq	r3, #0
 80098b8:	b2db      	uxtb	r3, r3
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000314 	.word	0x20000314

080098c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	4803      	ldr	r0, [pc, #12]	; (80098dc <BSP_SD_GetCardInfo+0x18>)
 80098d0:	f7fd fb8e 	bl	8006ff0 <HAL_SD_GetCardInfo>
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20000314 	.word	0x20000314

080098e0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80098e8:	f000 f818 	bl	800991c <BSP_SD_AbortCallback>
}
 80098ec:	bf00      	nop
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80098fc:	f000 f9a8 	bl	8009c50 <BSP_SD_WriteCpltCallback>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009910:	f000 f9aa 	bl	8009c68 <BSP_SD_ReadCpltCallback>
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800991c:	b480      	push	{r7}
 800991e:	af00      	add	r7, sp, #0

}
 8009920:	bf00      	nop
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009930:	2301      	movs	r3, #1
 8009932:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009934:	f000 f80c 	bl	8009950 <BSP_PlatformIsDetected>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800993e:	2300      	movs	r3, #0
 8009940:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	b2db      	uxtb	r3, r3
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009956:	2301      	movs	r3, #1
 8009958:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800995a:	2104      	movs	r1, #4
 800995c:	4806      	ldr	r0, [pc, #24]	; (8009978 <BSP_PlatformIsDetected+0x28>)
 800995e:	f7fb f8af 	bl	8004ac0 <HAL_GPIO_ReadPin>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009968:	2300      	movs	r3, #0
 800996a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800996c:	79fb      	ldrb	r3, [r7, #7]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	40021800 	.word	0x40021800

0800997c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009984:	f7f8 fcf0 	bl	8002368 <HAL_GetTick>
 8009988:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800998a:	e006      	b.n	800999a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800998c:	f7ff ff8a 	bl	80098a4 <BSP_SD_GetCardState>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009996:	2300      	movs	r3, #0
 8009998:	e009      	b.n	80099ae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800999a:	f7f8 fce5 	bl	8002368 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d8f0      	bhi.n	800998c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80099aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80099c2:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <SD_CheckStatus+0x38>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80099c8:	f7ff ff6c 	bl	80098a4 <BSP_SD_GetCardState>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d107      	bne.n	80099e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80099d2:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <SD_CheckStatus+0x38>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	f023 0301 	bic.w	r3, r3, #1
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <SD_CheckStatus+0x38>)
 80099e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80099e2:	4b03      	ldr	r3, [pc, #12]	; (80099f0 <SD_CheckStatus+0x38>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b2db      	uxtb	r3, r3
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20000009 	.word	0x20000009

080099f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80099fe:	f7ff fef7 	bl	80097f0 <BSP_SD_Init>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d107      	bne.n	8009a18 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff ffd4 	bl	80099b8 <SD_CheckStatus>
 8009a10:	4603      	mov	r3, r0
 8009a12:	461a      	mov	r2, r3
 8009a14:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <SD_initialize+0x34>)
 8009a16:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009a18:	4b03      	ldr	r3, [pc, #12]	; (8009a28 <SD_initialize+0x34>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	b2db      	uxtb	r3, r3
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000009 	.word	0x20000009

08009a2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff ffbd 	bl	80099b8 <SD_CheckStatus>
 8009a3e:	4603      	mov	r3, r0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	607a      	str	r2, [r7, #4]
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a5c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a60:	f7ff ff8c 	bl	800997c <SD_CheckStatusWithTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da01      	bge.n	8009a6e <SD_read+0x26>
  {
    return res;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	e03b      	b.n	8009ae6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	68b8      	ldr	r0, [r7, #8]
 8009a74:	f7ff fee2 	bl	800983c <BSP_SD_ReadBlocks_DMA>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d132      	bne.n	8009ae4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009a7e:	4b1c      	ldr	r3, [pc, #112]	; (8009af0 <SD_read+0xa8>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009a84:	f7f8 fc70 	bl	8002368 <HAL_GetTick>
 8009a88:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009a8a:	bf00      	nop
 8009a8c:	4b18      	ldr	r3, [pc, #96]	; (8009af0 <SD_read+0xa8>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d108      	bne.n	8009aa6 <SD_read+0x5e>
 8009a94:	f7f8 fc68 	bl	8002368 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d9f2      	bls.n	8009a8c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009aa6:	4b12      	ldr	r3, [pc, #72]	; (8009af0 <SD_read+0xa8>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d102      	bne.n	8009ab4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
 8009ab2:	e017      	b.n	8009ae4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <SD_read+0xa8>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009aba:	f7f8 fc55 	bl	8002368 <HAL_GetTick>
 8009abe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ac0:	e007      	b.n	8009ad2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ac2:	f7ff feef 	bl	80098a4 <BSP_SD_GetCardState>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <SD_read+0x8a>
          {
            res = RES_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009ad0:	e008      	b.n	8009ae4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ad2:	f7f8 fc49 	bl	8002368 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d9ee      	bls.n	8009ac2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000650 	.word	0x20000650

08009af4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009b08:	4b24      	ldr	r3, [pc, #144]	; (8009b9c <SD_write+0xa8>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009b0e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009b12:	f7ff ff33 	bl	800997c <SD_CheckStatusWithTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	da01      	bge.n	8009b20 <SD_write+0x2c>
  {
    return res;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
 8009b1e:	e038      	b.n	8009b92 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	68b8      	ldr	r0, [r7, #8]
 8009b26:	f7ff fea3 	bl	8009870 <BSP_SD_WriteBlocks_DMA>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d12f      	bne.n	8009b90 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009b30:	f7f8 fc1a 	bl	8002368 <HAL_GetTick>
 8009b34:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009b36:	bf00      	nop
 8009b38:	4b18      	ldr	r3, [pc, #96]	; (8009b9c <SD_write+0xa8>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d108      	bne.n	8009b52 <SD_write+0x5e>
 8009b40:	f7f8 fc12 	bl	8002368 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d9f2      	bls.n	8009b38 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009b52:	4b12      	ldr	r3, [pc, #72]	; (8009b9c <SD_write+0xa8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d102      	bne.n	8009b60 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	75fb      	strb	r3, [r7, #23]
 8009b5e:	e017      	b.n	8009b90 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009b60:	4b0e      	ldr	r3, [pc, #56]	; (8009b9c <SD_write+0xa8>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009b66:	f7f8 fbff 	bl	8002368 <HAL_GetTick>
 8009b6a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b6c:	e007      	b.n	8009b7e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b6e:	f7ff fe99 	bl	80098a4 <BSP_SD_GetCardState>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <SD_write+0x8a>
          {
            res = RES_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	75fb      	strb	r3, [r7, #23]
            break;
 8009b7c:	e008      	b.n	8009b90 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b7e:	f7f8 fbf3 	bl	8002368 <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d9ee      	bls.n	8009b6e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	2000064c 	.word	0x2000064c

08009ba0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08c      	sub	sp, #48	; 0x30
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	603a      	str	r2, [r7, #0]
 8009baa:	71fb      	strb	r3, [r7, #7]
 8009bac:	460b      	mov	r3, r1
 8009bae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009bb6:	4b25      	ldr	r3, [pc, #148]	; (8009c4c <SD_ioctl+0xac>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <SD_ioctl+0x28>
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e03c      	b.n	8009c42 <SD_ioctl+0xa2>

  switch (cmd)
 8009bc8:	79bb      	ldrb	r3, [r7, #6]
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d834      	bhi.n	8009c38 <SD_ioctl+0x98>
 8009bce:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <SD_ioctl+0x34>)
 8009bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009bed 	.word	0x08009bed
 8009bdc:	08009c05 	.word	0x08009c05
 8009be0:	08009c1f 	.word	0x08009c1f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bea:	e028      	b.n	8009c3e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009bec:	f107 030c 	add.w	r3, r7, #12
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff fe67 	bl	80098c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c02:	e01c      	b.n	8009c3e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c04:	f107 030c 	add.w	r3, r7, #12
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff fe5b 	bl	80098c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c1c:	e00f      	b.n	8009c3e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c1e:	f107 030c 	add.w	r3, r7, #12
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fe4e 	bl	80098c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	0a5a      	lsrs	r2, r3, #9
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c36:	e002      	b.n	8009c3e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009c38:	2304      	movs	r3, #4
 8009c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3730      	adds	r7, #48	; 0x30
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000009 	.word	0x20000009

08009c50 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <BSP_SD_WriteCpltCallback+0x14>)
 8009c56:	2201      	movs	r2, #1
 8009c58:	601a      	str	r2, [r3, #0]
}
 8009c5a:	bf00      	nop
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	2000064c 	.word	0x2000064c

08009c68 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009c6c:	4b03      	ldr	r3, [pc, #12]	; (8009c7c <BSP_SD_ReadCpltCallback+0x14>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	bf00      	nop
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	20000650 	.word	0x20000650

08009c80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c96:	4b1f      	ldr	r3, [pc, #124]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009c98:	7a5b      	ldrb	r3, [r3, #9]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d131      	bne.n	8009d04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ca0:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009ca2:	7a5b      	ldrb	r3, [r3, #9]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	4b1a      	ldr	r3, [pc, #104]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009caa:	2100      	movs	r1, #0
 8009cac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009cae:	4b19      	ldr	r3, [pc, #100]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009cb0:	7a5b      	ldrb	r3, [r3, #9]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	4a17      	ldr	r2, [pc, #92]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009cbe:	4b15      	ldr	r3, [pc, #84]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009cc0:	7a5b      	ldrb	r3, [r3, #9]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	4b13      	ldr	r3, [pc, #76]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009cc8:	4413      	add	r3, r2
 8009cca:	79fa      	ldrb	r2, [r7, #7]
 8009ccc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009cce:	4b11      	ldr	r3, [pc, #68]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009cd0:	7a5b      	ldrb	r3, [r3, #9]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	b2d1      	uxtb	r1, r2
 8009cd8:	4a0e      	ldr	r2, [pc, #56]	; (8009d14 <FATFS_LinkDriverEx+0x94>)
 8009cda:	7251      	strb	r1, [r2, #9]
 8009cdc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009cde:	7dbb      	ldrb	r3, [r7, #22]
 8009ce0:	3330      	adds	r3, #48	; 0x30
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	3301      	adds	r3, #1
 8009cec:	223a      	movs	r2, #58	; 0x3a
 8009cee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	3302      	adds	r3, #2
 8009cf4:	222f      	movs	r2, #47	; 0x2f
 8009cf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	3303      	adds	r3, #3
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	371c      	adds	r7, #28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20000654 	.word	0x20000654

08009d18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d22:	2200      	movs	r2, #0
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff ffaa 	bl	8009c80 <FATFS_LinkDriverEx>
 8009d2c:	4603      	mov	r3, r0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <__NVIC_SetPriority>:
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	6039      	str	r1, [r7, #0]
 8009d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	db0a      	blt.n	8009d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	490c      	ldr	r1, [pc, #48]	; (8009d84 <__NVIC_SetPriority+0x4c>)
 8009d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d56:	0112      	lsls	r2, r2, #4
 8009d58:	b2d2      	uxtb	r2, r2
 8009d5a:	440b      	add	r3, r1
 8009d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009d60:	e00a      	b.n	8009d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	4908      	ldr	r1, [pc, #32]	; (8009d88 <__NVIC_SetPriority+0x50>)
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	f003 030f 	and.w	r3, r3, #15
 8009d6e:	3b04      	subs	r3, #4
 8009d70:	0112      	lsls	r2, r2, #4
 8009d72:	b2d2      	uxtb	r2, r2
 8009d74:	440b      	add	r3, r1
 8009d76:	761a      	strb	r2, [r3, #24]
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	e000e100 	.word	0xe000e100
 8009d88:	e000ed00 	.word	0xe000ed00

08009d8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d90:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <SysTick_Handler+0x1c>)
 8009d92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d94:	f001 fecc 	bl	800bb30 <xTaskGetSchedulerState>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d9e:	f002 fcb3 	bl	800c708 <xPortSysTickHandler>
  }
}
 8009da2:	bf00      	nop
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	e000e010 	.word	0xe000e010

08009dac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009dac:	b580      	push	{r7, lr}
 8009dae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009db0:	2100      	movs	r1, #0
 8009db2:	f06f 0004 	mvn.w	r0, #4
 8009db6:	f7ff ffbf 	bl	8009d38 <__NVIC_SetPriority>
#endif
}
 8009dba:	bf00      	nop
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dc6:	f3ef 8305 	mrs	r3, IPSR
 8009dca:	603b      	str	r3, [r7, #0]
  return(result);
 8009dcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009dd2:	f06f 0305 	mvn.w	r3, #5
 8009dd6:	607b      	str	r3, [r7, #4]
 8009dd8:	e00c      	b.n	8009df4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009dda:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <osKernelInitialize+0x44>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d105      	bne.n	8009dee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009de2:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <osKernelInitialize+0x44>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	607b      	str	r3, [r7, #4]
 8009dec:	e002      	b.n	8009df4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009dee:	f04f 33ff 	mov.w	r3, #4294967295
 8009df2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009df4:	687b      	ldr	r3, [r7, #4]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	20000660 	.word	0x20000660

08009e08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e0e:	f3ef 8305 	mrs	r3, IPSR
 8009e12:	603b      	str	r3, [r7, #0]
  return(result);
 8009e14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e1a:	f06f 0305 	mvn.w	r3, #5
 8009e1e:	607b      	str	r3, [r7, #4]
 8009e20:	e010      	b.n	8009e44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e22:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <osKernelStart+0x48>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d109      	bne.n	8009e3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e2a:	f7ff ffbf 	bl	8009dac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e2e:	4b08      	ldr	r3, [pc, #32]	; (8009e50 <osKernelStart+0x48>)
 8009e30:	2202      	movs	r2, #2
 8009e32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e34:	f001 fa00 	bl	800b238 <vTaskStartScheduler>
      stat = osOK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	607b      	str	r3, [r7, #4]
 8009e3c:	e002      	b.n	8009e44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e44:	687b      	ldr	r3, [r7, #4]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20000660 	.word	0x20000660

08009e54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08e      	sub	sp, #56	; 0x38
 8009e58:	af04      	add	r7, sp, #16
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e64:	f3ef 8305 	mrs	r3, IPSR
 8009e68:	617b      	str	r3, [r7, #20]
  return(result);
 8009e6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d17e      	bne.n	8009f6e <osThreadNew+0x11a>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d07b      	beq.n	8009f6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e76:	2380      	movs	r3, #128	; 0x80
 8009e78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e7a:	2318      	movs	r3, #24
 8009e7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295
 8009e86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d045      	beq.n	8009f1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <osThreadNew+0x48>
        name = attr->name;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d008      	beq.n	8009ec2 <osThreadNew+0x6e>
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	2b38      	cmp	r3, #56	; 0x38
 8009eb4:	d805      	bhi.n	8009ec2 <osThreadNew+0x6e>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <osThreadNew+0x72>
        return (NULL);
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e054      	b.n	8009f70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	089b      	lsrs	r3, r3, #2
 8009ed4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00e      	beq.n	8009efc <osThreadNew+0xa8>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	2bb3      	cmp	r3, #179	; 0xb3
 8009ee4:	d90a      	bls.n	8009efc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d006      	beq.n	8009efc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <osThreadNew+0xa8>
        mem = 1;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	e010      	b.n	8009f1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10c      	bne.n	8009f1e <osThreadNew+0xca>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d108      	bne.n	8009f1e <osThreadNew+0xca>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d104      	bne.n	8009f1e <osThreadNew+0xca>
          mem = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	61bb      	str	r3, [r7, #24]
 8009f18:	e001      	b.n	8009f1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d110      	bne.n	8009f46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f2c:	9202      	str	r2, [sp, #8]
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6a3a      	ldr	r2, [r7, #32]
 8009f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 ff86 	bl	800ae4c <xTaskCreateStatic>
 8009f40:	4603      	mov	r3, r0
 8009f42:	613b      	str	r3, [r7, #16]
 8009f44:	e013      	b.n	8009f6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d110      	bne.n	8009f6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	f107 0310 	add.w	r3, r7, #16
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 ffd1 	bl	800af06 <xTaskCreate>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d001      	beq.n	8009f6e <osThreadNew+0x11a>
            hTask = NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f6e:	693b      	ldr	r3, [r7, #16]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3728      	adds	r7, #40	; 0x28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f80:	f3ef 8305 	mrs	r3, IPSR
 8009f84:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <osDelay+0x1c>
    stat = osErrorISR;
 8009f8c:	f06f 0305 	mvn.w	r3, #5
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	e007      	b.n	8009fa4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 f916 	bl	800b1d0 <vTaskDelay>
    }
  }

  return (stat);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b08a      	sub	sp, #40	; 0x28
 8009fb2:	af02      	add	r7, sp, #8
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fbe:	f3ef 8305 	mrs	r3, IPSR
 8009fc2:	613b      	str	r3, [r7, #16]
  return(result);
 8009fc4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d175      	bne.n	800a0b6 <osSemaphoreNew+0x108>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d072      	beq.n	800a0b6 <osSemaphoreNew+0x108>
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d86e      	bhi.n	800a0b6 <osSemaphoreNew+0x108>
    mem = -1;
 8009fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fdc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d015      	beq.n	800a010 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d006      	beq.n	8009ffa <osSemaphoreNew+0x4c>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	2b4f      	cmp	r3, #79	; 0x4f
 8009ff2:	d902      	bls.n	8009ffa <osSemaphoreNew+0x4c>
        mem = 1;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	61bb      	str	r3, [r7, #24]
 8009ff8:	e00c      	b.n	800a014 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d108      	bne.n	800a014 <osSemaphoreNew+0x66>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d104      	bne.n	800a014 <osSemaphoreNew+0x66>
          mem = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61bb      	str	r3, [r7, #24]
 800a00e:	e001      	b.n	800a014 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d04c      	beq.n	800a0b6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d128      	bne.n	800a074 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d10a      	bne.n	800a03e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	2203      	movs	r2, #3
 800a02e:	9200      	str	r2, [sp, #0]
 800a030:	2200      	movs	r2, #0
 800a032:	2100      	movs	r1, #0
 800a034:	2001      	movs	r0, #1
 800a036:	f000 f993 	bl	800a360 <xQueueGenericCreateStatic>
 800a03a:	61f8      	str	r0, [r7, #28]
 800a03c:	e005      	b.n	800a04a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a03e:	2203      	movs	r2, #3
 800a040:	2100      	movs	r1, #0
 800a042:	2001      	movs	r0, #1
 800a044:	f000 fa04 	bl	800a450 <xQueueGenericCreate>
 800a048:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d022      	beq.n	800a096 <osSemaphoreNew+0xe8>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01f      	beq.n	800a096 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a056:	2300      	movs	r3, #0
 800a058:	2200      	movs	r2, #0
 800a05a:	2100      	movs	r1, #0
 800a05c:	69f8      	ldr	r0, [r7, #28]
 800a05e:	f000 fabf 	bl	800a5e0 <xQueueGenericSend>
 800a062:	4603      	mov	r3, r0
 800a064:	2b01      	cmp	r3, #1
 800a066:	d016      	beq.n	800a096 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a068:	69f8      	ldr	r0, [r7, #28]
 800a06a:	f000 fd33 	bl	800aad4 <vQueueDelete>
            hSemaphore = NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	61fb      	str	r3, [r7, #28]
 800a072:	e010      	b.n	800a096 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d108      	bne.n	800a08c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	461a      	mov	r2, r3
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fa41 	bl	800a50a <xQueueCreateCountingSemaphoreStatic>
 800a088:	61f8      	str	r0, [r7, #28]
 800a08a:	e004      	b.n	800a096 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fa72 	bl	800a578 <xQueueCreateCountingSemaphore>
 800a094:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00c      	beq.n	800a0b6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <osSemaphoreNew+0xfc>
          name = attr->name;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	e001      	b.n	800a0ae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a0ae:	6979      	ldr	r1, [r7, #20]
 800a0b0:	69f8      	ldr	r0, [r7, #28]
 800a0b2:	f000 fe43 	bl	800ad3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a0b6:	69fb      	ldr	r3, [r7, #28]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4a07      	ldr	r2, [pc, #28]	; (800a0ec <vApplicationGetIdleTaskMemory+0x2c>)
 800a0d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	4a06      	ldr	r2, [pc, #24]	; (800a0f0 <vApplicationGetIdleTaskMemory+0x30>)
 800a0d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2280      	movs	r2, #128	; 0x80
 800a0dc:	601a      	str	r2, [r3, #0]
}
 800a0de:	bf00      	nop
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	20000664 	.word	0x20000664
 800a0f0:	20000718 	.word	0x20000718

0800a0f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4a07      	ldr	r2, [pc, #28]	; (800a120 <vApplicationGetTimerTaskMemory+0x2c>)
 800a104:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	4a06      	ldr	r2, [pc, #24]	; (800a124 <vApplicationGetTimerTaskMemory+0x30>)
 800a10a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a112:	601a      	str	r2, [r3, #0]
}
 800a114:	bf00      	nop
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	20000918 	.word	0x20000918
 800a124:	200009cc 	.word	0x200009cc

0800a128 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f103 0208 	add.w	r2, r3, #8
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295
 800a140:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f103 0208 	add.w	r2, r3, #8
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f103 0208 	add.w	r2, r3, #8
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a176:	bf00      	nop
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a182:	b480      	push	{r7}
 800a184:	b085      	sub	sp, #20
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	601a      	str	r2, [r3, #0]
}
 800a1be:	bf00      	nop
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b085      	sub	sp, #20
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e0:	d103      	bne.n	800a1ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	60fb      	str	r3, [r7, #12]
 800a1e8:	e00c      	b.n	800a204 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	e002      	b.n	800a1f8 <vListInsert+0x2e>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	429a      	cmp	r2, r3
 800a202:	d2f6      	bcs.n	800a1f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	601a      	str	r2, [r3, #0]
}
 800a230:	bf00      	nop
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6892      	ldr	r2, [r2, #8]
 800a252:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6852      	ldr	r2, [r2, #4]
 800a25c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	429a      	cmp	r2, r3
 800a266:	d103      	bne.n	800a270 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	1e5a      	subs	r2, r3, #1
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10a      	bne.n	800a2ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2ba:	f002 f993 	bl	800c5e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c6:	68f9      	ldr	r1, [r7, #12]
 800a2c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2ca:	fb01 f303 	mul.w	r3, r1, r3
 800a2ce:	441a      	add	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	68f9      	ldr	r1, [r7, #12]
 800a2ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2f0:	fb01 f303 	mul.w	r3, r1, r3
 800a2f4:	441a      	add	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	22ff      	movs	r2, #255	; 0xff
 800a2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	22ff      	movs	r2, #255	; 0xff
 800a306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d114      	bne.n	800a33a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01a      	beq.n	800a34e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3310      	adds	r3, #16
 800a31c:	4618      	mov	r0, r3
 800a31e:	f001 fa43 	bl	800b7a8 <xTaskRemoveFromEventList>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d012      	beq.n	800a34e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a328:	4b0c      	ldr	r3, [pc, #48]	; (800a35c <xQueueGenericReset+0xcc>)
 800a32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	e009      	b.n	800a34e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3310      	adds	r3, #16
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fef2 	bl	800a128 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3324      	adds	r3, #36	; 0x24
 800a348:	4618      	mov	r0, r3
 800a34a:	f7ff feed 	bl	800a128 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a34e:	f002 f979 	bl	800c644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a352:	2301      	movs	r3, #1
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	e000ed04 	.word	0xe000ed04

0800a360 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08e      	sub	sp, #56	; 0x38
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10a      	bne.n	800a3a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <xQueueGenericCreateStatic+0x52>
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <xQueueGenericCreateStatic+0x56>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e000      	b.n	800a3b8 <xQueueGenericCreateStatic+0x58>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	623b      	str	r3, [r7, #32]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <xQueueGenericCreateStatic+0x7e>
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <xQueueGenericCreateStatic+0x82>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e000      	b.n	800a3e4 <xQueueGenericCreateStatic+0x84>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	61fb      	str	r3, [r7, #28]
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3fe:	2350      	movs	r3, #80	; 0x50
 800a400:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b50      	cmp	r3, #80	; 0x50
 800a406:	d00a      	beq.n	800a41e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	61bb      	str	r3, [r7, #24]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a41e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00d      	beq.n	800a446 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a432:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	4613      	mov	r3, r2
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f83f 	bl	800a4c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a448:	4618      	mov	r0, r3
 800a44a:	3730      	adds	r7, #48	; 0x30
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	; 0x28
 800a454:	af02      	add	r7, sp, #8
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	613b      	str	r3, [r7, #16]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	fb02 f303 	mul.w	r3, r2, r3
 800a482:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	3350      	adds	r3, #80	; 0x50
 800a488:	4618      	mov	r0, r3
 800a48a:	f002 f9cd 	bl	800c828 <pvPortMalloc>
 800a48e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d011      	beq.n	800a4ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	3350      	adds	r3, #80	; 0x50
 800a49e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4a8:	79fa      	ldrb	r2, [r7, #7]
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 f805 	bl	800a4c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
	}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3720      	adds	r7, #32
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d103      	bne.n	800a4e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e002      	b.n	800a4e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	69b8      	ldr	r0, [r7, #24]
 800a4f6:	f7ff fecb 	bl	800a290 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	78fa      	ldrb	r2, [r7, #3]
 800a4fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b08a      	sub	sp, #40	; 0x28
 800a50e:	af02      	add	r7, sp, #8
 800a510:	60f8      	str	r0, [r7, #12]
 800a512:	60b9      	str	r1, [r7, #8]
 800a514:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	61bb      	str	r3, [r7, #24]
}
 800a52e:	bf00      	nop
 800a530:	e7fe      	b.n	800a530 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	429a      	cmp	r2, r3
 800a538:	d90a      	bls.n	800a550 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	617b      	str	r3, [r7, #20]
}
 800a54c:	bf00      	nop
 800a54e:	e7fe      	b.n	800a54e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a550:	2302      	movs	r3, #2
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	2100      	movs	r1, #0
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff ff00 	bl	800a360 <xQueueGenericCreateStatic>
 800a560:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a56e:	69fb      	ldr	r3, [r7, #28]
	}
 800a570:	4618      	mov	r0, r3
 800a572:	3720      	adds	r7, #32
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	613b      	str	r3, [r7, #16]
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d90a      	bls.n	800a5bc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	60fb      	str	r3, [r7, #12]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5bc:	2202      	movs	r2, #2
 800a5be:	2100      	movs	r1, #0
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff ff45 	bl	800a450 <xQueueGenericCreate>
 800a5c6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a5d4:	697b      	ldr	r3, [r7, #20]
	}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08e      	sub	sp, #56	; 0x38
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10a      	bne.n	800a612 <xQueueGenericSend+0x32>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <xQueueGenericSend+0x40>
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <xQueueGenericSend+0x44>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <xQueueGenericSend+0x46>
 800a624:	2300      	movs	r3, #0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10a      	bne.n	800a640 <xQueueGenericSend+0x60>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b02      	cmp	r3, #2
 800a644:	d103      	bne.n	800a64e <xQueueGenericSend+0x6e>
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <xQueueGenericSend+0x72>
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <xQueueGenericSend+0x74>
 800a652:	2300      	movs	r3, #0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xQueueGenericSend+0x8e>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	623b      	str	r3, [r7, #32]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a66e:	f001 fa5f 	bl	800bb30 <xTaskGetSchedulerState>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d102      	bne.n	800a67e <xQueueGenericSend+0x9e>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <xQueueGenericSend+0xa2>
 800a67e:	2301      	movs	r3, #1
 800a680:	e000      	b.n	800a684 <xQueueGenericSend+0xa4>
 800a682:	2300      	movs	r3, #0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <xQueueGenericSend+0xbe>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	61fb      	str	r3, [r7, #28]
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a69e:	f001 ffa1 	bl	800c5e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d302      	bcc.n	800a6b4 <xQueueGenericSend+0xd4>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d129      	bne.n	800a708 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ba:	f000 fa2e 	bl	800ab1a <prvCopyDataToQueue>
 800a6be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d010      	beq.n	800a6ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ca:	3324      	adds	r3, #36	; 0x24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 f86b 	bl	800b7a8 <xTaskRemoveFromEventList>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d013      	beq.n	800a700 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6d8:	4b3f      	ldr	r3, [pc, #252]	; (800a7d8 <xQueueGenericSend+0x1f8>)
 800a6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	e00a      	b.n	800a700 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6f0:	4b39      	ldr	r3, [pc, #228]	; (800a7d8 <xQueueGenericSend+0x1f8>)
 800a6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a700:	f001 ffa0 	bl	800c644 <vPortExitCritical>
				return pdPASS;
 800a704:	2301      	movs	r3, #1
 800a706:	e063      	b.n	800a7d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d103      	bne.n	800a716 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a70e:	f001 ff99 	bl	800c644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a712:	2300      	movs	r3, #0
 800a714:	e05c      	b.n	800a7d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d106      	bne.n	800a72a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a71c:	f107 0314 	add.w	r3, r7, #20
 800a720:	4618      	mov	r0, r3
 800a722:	f001 f8a5 	bl	800b870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a726:	2301      	movs	r3, #1
 800a728:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a72a:	f001 ff8b 	bl	800c644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a72e:	f000 fdf5 	bl	800b31c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a732:	f001 ff57 	bl	800c5e4 <vPortEnterCritical>
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a73c:	b25b      	sxtb	r3, r3
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d103      	bne.n	800a74c <xQueueGenericSend+0x16c>
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a752:	b25b      	sxtb	r3, r3
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d103      	bne.n	800a762 <xQueueGenericSend+0x182>
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a762:	f001 ff6f 	bl	800c644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a766:	1d3a      	adds	r2, r7, #4
 800a768:	f107 0314 	add.w	r3, r7, #20
 800a76c:	4611      	mov	r1, r2
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 f894 	bl	800b89c <xTaskCheckForTimeOut>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d124      	bne.n	800a7c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a77c:	f000 fac5 	bl	800ad0a <prvIsQueueFull>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d018      	beq.n	800a7b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	3310      	adds	r3, #16
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	4611      	mov	r1, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 ffba 	bl	800b708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a796:	f000 fa50 	bl	800ac3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a79a:	f000 fdcd 	bl	800b338 <xTaskResumeAll>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f47f af7c 	bne.w	800a69e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a7a6:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <xQueueGenericSend+0x1f8>)
 800a7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	e772      	b.n	800a69e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7ba:	f000 fa3e 	bl	800ac3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7be:	f000 fdbb 	bl	800b338 <xTaskResumeAll>
 800a7c2:	e76c      	b.n	800a69e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c6:	f000 fa38 	bl	800ac3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ca:	f000 fdb5 	bl	800b338 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3738      	adds	r7, #56	; 0x38
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b090      	sub	sp, #64	; 0x40
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a806:	bf00      	nop
 800a808:	e7fe      	b.n	800a808 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d103      	bne.n	800a818 <xQueueGenericSendFromISR+0x3c>
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <xQueueGenericSendFromISR+0x40>
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <xQueueGenericSendFromISR+0x42>
 800a81c:	2300      	movs	r3, #0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10a      	bne.n	800a838 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d103      	bne.n	800a846 <xQueueGenericSendFromISR+0x6a>
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <xQueueGenericSendFromISR+0x6e>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <xQueueGenericSendFromISR+0x70>
 800a84a:	2300      	movs	r3, #0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	623b      	str	r3, [r7, #32]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a866:	f001 ff9f 	bl	800c7a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a86a:	f3ef 8211 	mrs	r2, BASEPRI
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	61fa      	str	r2, [r7, #28]
 800a880:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a882:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a884:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88e:	429a      	cmp	r2, r3
 800a890:	d302      	bcc.n	800a898 <xQueueGenericSendFromISR+0xbc>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b02      	cmp	r3, #2
 800a896:	d12f      	bne.n	800a8f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	68b9      	ldr	r1, [r7, #8]
 800a8ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8ae:	f000 f934 	bl	800ab1a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d112      	bne.n	800a8e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d016      	beq.n	800a8f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	3324      	adds	r3, #36	; 0x24
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 ff6d 	bl	800b7a8 <xTaskRemoveFromEventList>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00e      	beq.n	800a8f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00b      	beq.n	800a8f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	e007      	b.n	800a8f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	b25a      	sxtb	r2, r3
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a8f6:	e001      	b.n	800a8fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a906:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3740      	adds	r7, #64	; 0x40
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08c      	sub	sp, #48	; 0x30
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a920:	2300      	movs	r3, #0
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <xQueueReceive+0x30>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	623b      	str	r3, [r7, #32]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <xQueueReceive+0x3e>
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <xQueueReceive+0x42>
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <xQueueReceive+0x44>
 800a956:	2300      	movs	r3, #0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <xQueueReceive+0x5e>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	61fb      	str	r3, [r7, #28]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a972:	f001 f8dd 	bl	800bb30 <xTaskGetSchedulerState>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <xQueueReceive+0x6e>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <xQueueReceive+0x72>
 800a982:	2301      	movs	r3, #1
 800a984:	e000      	b.n	800a988 <xQueueReceive+0x74>
 800a986:	2300      	movs	r3, #0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10a      	bne.n	800a9a2 <xQueueReceive+0x8e>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	61bb      	str	r3, [r7, #24]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9a2:	f001 fe1f 	bl	800c5e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d01f      	beq.n	800a9f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9b6:	f000 f91a 	bl	800abee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	1e5a      	subs	r2, r3, #1
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00f      	beq.n	800a9ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	3310      	adds	r3, #16
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 feea 	bl	800b7a8 <xTaskRemoveFromEventList>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d007      	beq.n	800a9ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9da:	4b3d      	ldr	r3, [pc, #244]	; (800aad0 <xQueueReceive+0x1bc>)
 800a9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9ea:	f001 fe2b 	bl	800c644 <vPortExitCritical>
				return pdPASS;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e069      	b.n	800aac6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d103      	bne.n	800aa00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9f8:	f001 fe24 	bl	800c644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e062      	b.n	800aac6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa06:	f107 0310 	add.w	r3, r7, #16
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 ff30 	bl	800b870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa10:	2301      	movs	r3, #1
 800aa12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa14:	f001 fe16 	bl	800c644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa18:	f000 fc80 	bl	800b31c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa1c:	f001 fde2 	bl	800c5e4 <vPortEnterCritical>
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa26:	b25b      	sxtb	r3, r3
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d103      	bne.n	800aa36 <xQueueReceive+0x122>
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa3c:	b25b      	sxtb	r3, r3
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa42:	d103      	bne.n	800aa4c <xQueueReceive+0x138>
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa4c:	f001 fdfa 	bl	800c644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa50:	1d3a      	adds	r2, r7, #4
 800aa52:	f107 0310 	add.w	r3, r7, #16
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 ff1f 	bl	800b89c <xTaskCheckForTimeOut>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d123      	bne.n	800aaac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa66:	f000 f93a 	bl	800acde <prvIsQueueEmpty>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d017      	beq.n	800aaa0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	3324      	adds	r3, #36	; 0x24
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fe45 	bl	800b708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa80:	f000 f8db 	bl	800ac3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa84:	f000 fc58 	bl	800b338 <xTaskResumeAll>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d189      	bne.n	800a9a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa8e:	4b10      	ldr	r3, [pc, #64]	; (800aad0 <xQueueReceive+0x1bc>)
 800aa90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	e780      	b.n	800a9a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aaa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa2:	f000 f8ca 	bl	800ac3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaa6:	f000 fc47 	bl	800b338 <xTaskResumeAll>
 800aaaa:	e77a      	b.n	800a9a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aaac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaae:	f000 f8c4 	bl	800ac3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aab2:	f000 fc41 	bl	800b338 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab8:	f000 f911 	bl	800acde <prvIsQueueEmpty>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f43f af6f 	beq.w	800a9a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aac4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3730      	adds	r7, #48	; 0x30
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	e000ed04 	.word	0xe000ed04

0800aad4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <vQueueDelete+0x28>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	60bb      	str	r3, [r7, #8]
}
 800aaf8:	bf00      	nop
 800aafa:	e7fe      	b.n	800aafa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f000 f947 	bl	800ad90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d102      	bne.n	800ab12 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f001 ff57 	bl	800c9c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b086      	sub	sp, #24
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10d      	bne.n	800ab54 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d14d      	bne.n	800abdc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f001 f811 	bl	800bb6c <xTaskPriorityDisinherit>
 800ab4a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	609a      	str	r2, [r3, #8]
 800ab52:	e043      	b.n	800abdc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d119      	bne.n	800ab8e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6858      	ldr	r0, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab62:	461a      	mov	r2, r3
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	f002 f8cd 	bl	800cd04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	441a      	add	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d32b      	bcc.n	800abdc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	605a      	str	r2, [r3, #4]
 800ab8c:	e026      	b.n	800abdc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	68d8      	ldr	r0, [r3, #12]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	461a      	mov	r2, r3
 800ab98:	68b9      	ldr	r1, [r7, #8]
 800ab9a:	f002 f8b3 	bl	800cd04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68da      	ldr	r2, [r3, #12]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba6:	425b      	negs	r3, r3
 800aba8:	441a      	add	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d207      	bcs.n	800abca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc2:	425b      	negs	r3, r3
 800abc4:	441a      	add	r2, r3
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d105      	bne.n	800abdc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d002      	beq.n	800abdc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	3b01      	subs	r3, #1
 800abda:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800abe4:	697b      	ldr	r3, [r7, #20]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3718      	adds	r7, #24
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d018      	beq.n	800ac32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68da      	ldr	r2, [r3, #12]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac08:	441a      	add	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d303      	bcc.n	800ac22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	68d9      	ldr	r1, [r3, #12]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6838      	ldr	r0, [r7, #0]
 800ac2e:	f002 f869 	bl	800cd04 <memcpy>
	}
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac42:	f001 fccf 	bl	800c5e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac4e:	e011      	b.n	800ac74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d012      	beq.n	800ac7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3324      	adds	r3, #36	; 0x24
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fda3 	bl	800b7a8 <xTaskRemoveFromEventList>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac68:	f000 fe7a 	bl	800b960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dce9      	bgt.n	800ac50 <prvUnlockQueue+0x16>
 800ac7c:	e000      	b.n	800ac80 <prvUnlockQueue+0x46>
					break;
 800ac7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	22ff      	movs	r2, #255	; 0xff
 800ac84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac88:	f001 fcdc 	bl	800c644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac8c:	f001 fcaa 	bl	800c5e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac98:	e011      	b.n	800acbe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d012      	beq.n	800acc8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3310      	adds	r3, #16
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fd7e 	bl	800b7a8 <xTaskRemoveFromEventList>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800acb2:	f000 fe55 	bl	800b960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	3b01      	subs	r3, #1
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	dce9      	bgt.n	800ac9a <prvUnlockQueue+0x60>
 800acc6:	e000      	b.n	800acca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acc8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	22ff      	movs	r2, #255	; 0xff
 800acce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800acd2:	f001 fcb7 	bl	800c644 <vPortExitCritical>
}
 800acd6:	bf00      	nop
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ace6:	f001 fc7d 	bl	800c5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d102      	bne.n	800acf8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acf2:	2301      	movs	r3, #1
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	e001      	b.n	800acfc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acfc:	f001 fca2 	bl	800c644 <vPortExitCritical>

	return xReturn;
 800ad00:	68fb      	ldr	r3, [r7, #12]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad12:	f001 fc67 	bl	800c5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d102      	bne.n	800ad28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad22:	2301      	movs	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	e001      	b.n	800ad2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad2c:	f001 fc8a 	bl	800c644 <vPortExitCritical>

	return xReturn;
 800ad30:	68fb      	ldr	r3, [r7, #12]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	e014      	b.n	800ad76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad4c:	4a0f      	ldr	r2, [pc, #60]	; (800ad8c <vQueueAddToRegistry+0x50>)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10b      	bne.n	800ad70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad58:	490c      	ldr	r1, [pc, #48]	; (800ad8c <vQueueAddToRegistry+0x50>)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad62:	4a0a      	ldr	r2, [pc, #40]	; (800ad8c <vQueueAddToRegistry+0x50>)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	4413      	add	r3, r2
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad6e:	e006      	b.n	800ad7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3301      	adds	r3, #1
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b07      	cmp	r3, #7
 800ad7a:	d9e7      	bls.n	800ad4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad7c:	bf00      	nop
 800ad7e:	bf00      	nop
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	20000dcc 	.word	0x20000dcc

0800ad90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	e016      	b.n	800adcc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad9e:	4a10      	ldr	r2, [pc, #64]	; (800ade0 <vQueueUnregisterQueue+0x50>)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4413      	add	r3, r2
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d10b      	bne.n	800adc6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800adae:	4a0c      	ldr	r2, [pc, #48]	; (800ade0 <vQueueUnregisterQueue+0x50>)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2100      	movs	r1, #0
 800adb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800adb8:	4a09      	ldr	r2, [pc, #36]	; (800ade0 <vQueueUnregisterQueue+0x50>)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	4413      	add	r3, r2
 800adc0:	2200      	movs	r2, #0
 800adc2:	605a      	str	r2, [r3, #4]
				break;
 800adc4:	e006      	b.n	800add4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3301      	adds	r3, #1
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b07      	cmp	r3, #7
 800add0:	d9e5      	bls.n	800ad9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	20000dcc 	.word	0x20000dcc

0800ade4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800adf4:	f001 fbf6 	bl	800c5e4 <vPortEnterCritical>
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adfe:	b25b      	sxtb	r3, r3
 800ae00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae04:	d103      	bne.n	800ae0e <vQueueWaitForMessageRestricted+0x2a>
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae14:	b25b      	sxtb	r3, r3
 800ae16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1a:	d103      	bne.n	800ae24 <vQueueWaitForMessageRestricted+0x40>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae24:	f001 fc0e 	bl	800c644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d106      	bne.n	800ae3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	3324      	adds	r3, #36	; 0x24
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 fc89 	bl	800b750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae3e:	6978      	ldr	r0, [r7, #20]
 800ae40:	f7ff fefb 	bl	800ac3a <prvUnlockQueue>
	}
 800ae44:	bf00      	nop
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08e      	sub	sp, #56	; 0x38
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	623b      	str	r3, [r7, #32]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	61fb      	str	r3, [r7, #28]
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae92:	23b4      	movs	r3, #180	; 0xb4
 800ae94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2bb4      	cmp	r3, #180	; 0xb4
 800ae9a:	d00a      	beq.n	800aeb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	61bb      	str	r3, [r7, #24]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aeb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d01e      	beq.n	800aef8 <xTaskCreateStatic+0xac>
 800aeba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d01b      	beq.n	800aef8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aec8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	2202      	movs	r2, #2
 800aece:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aed2:	2300      	movs	r3, #0
 800aed4:	9303      	str	r3, [sp, #12]
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	9302      	str	r3, [sp, #8]
 800aeda:	f107 0314 	add.w	r3, r7, #20
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	68b9      	ldr	r1, [r7, #8]
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 f850 	bl	800af90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aef2:	f000 f8fd 	bl	800b0f0 <prvAddNewTaskToReadyList>
 800aef6:	e001      	b.n	800aefc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aef8:	2300      	movs	r3, #0
 800aefa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aefc:	697b      	ldr	r3, [r7, #20]
	}
 800aefe:	4618      	mov	r0, r3
 800af00:	3728      	adds	r7, #40	; 0x28
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af06:	b580      	push	{r7, lr}
 800af08:	b08c      	sub	sp, #48	; 0x30
 800af0a:	af04      	add	r7, sp, #16
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	603b      	str	r3, [r7, #0]
 800af12:	4613      	mov	r3, r2
 800af14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af16:	88fb      	ldrh	r3, [r7, #6]
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4618      	mov	r0, r3
 800af1c:	f001 fc84 	bl	800c828 <pvPortMalloc>
 800af20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00e      	beq.n	800af46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af28:	20b4      	movs	r0, #180	; 0xb4
 800af2a:	f001 fc7d 	bl	800c828 <pvPortMalloc>
 800af2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d003      	beq.n	800af3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	631a      	str	r2, [r3, #48]	; 0x30
 800af3c:	e005      	b.n	800af4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af3e:	6978      	ldr	r0, [r7, #20]
 800af40:	f001 fd3e 	bl	800c9c0 <vPortFree>
 800af44:	e001      	b.n	800af4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af46:	2300      	movs	r3, #0
 800af48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d017      	beq.n	800af80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af58:	88fa      	ldrh	r2, [r7, #6]
 800af5a:	2300      	movs	r3, #0
 800af5c:	9303      	str	r3, [sp, #12]
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	9302      	str	r3, [sp, #8]
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	68b9      	ldr	r1, [r7, #8]
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f000 f80e 	bl	800af90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af74:	69f8      	ldr	r0, [r7, #28]
 800af76:	f000 f8bb 	bl	800b0f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af7a:	2301      	movs	r3, #1
 800af7c:	61bb      	str	r3, [r7, #24]
 800af7e:	e002      	b.n	800af86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af80:	f04f 33ff 	mov.w	r3, #4294967295
 800af84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af86:	69bb      	ldr	r3, [r7, #24]
	}
 800af88:	4618      	mov	r0, r3
 800af8a:	3720      	adds	r7, #32
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	461a      	mov	r2, r3
 800afa8:	21a5      	movs	r1, #165	; 0xa5
 800afaa:	f001 fe27 	bl	800cbfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800afb8:	3b01      	subs	r3, #1
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	f023 0307 	bic.w	r3, r3, #7
 800afc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	f003 0307 	and.w	r3, r3, #7
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00a      	beq.n	800afe8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	617b      	str	r3, [r7, #20]
}
 800afe4:	bf00      	nop
 800afe6:	e7fe      	b.n	800afe6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d01f      	beq.n	800b034 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aff4:	2300      	movs	r3, #0
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	e012      	b.n	800b020 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	4413      	add	r3, r2
 800b000:	7819      	ldrb	r1, [r3, #0]
 800b002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	4413      	add	r3, r2
 800b008:	3334      	adds	r3, #52	; 0x34
 800b00a:	460a      	mov	r2, r1
 800b00c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	4413      	add	r3, r2
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d006      	beq.n	800b028 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	3301      	adds	r3, #1
 800b01e:	61fb      	str	r3, [r7, #28]
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	2b0f      	cmp	r3, #15
 800b024:	d9e9      	bls.n	800affa <prvInitialiseNewTask+0x6a>
 800b026:	e000      	b.n	800b02a <prvInitialiseNewTask+0x9a>
			{
				break;
 800b028:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b032:	e003      	b.n	800b03c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	2b37      	cmp	r3, #55	; 0x37
 800b040:	d901      	bls.n	800b046 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b042:	2337      	movs	r3, #55	; 0x37
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b04a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b050:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	2200      	movs	r2, #0
 800b056:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	3304      	adds	r3, #4
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7ff f883 	bl	800a168 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	3318      	adds	r3, #24
 800b066:	4618      	mov	r0, r3
 800b068:	f7ff f87e 	bl	800a168 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b070:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b074:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b080:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	2200      	movs	r2, #0
 800b086:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	2200      	movs	r2, #0
 800b08c:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	2200      	movs	r2, #0
 800b092:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a0:	3360      	adds	r3, #96	; 0x60
 800b0a2:	224c      	movs	r2, #76	; 0x4c
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f001 fda8 	bl	800cbfc <memset>
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	4a0d      	ldr	r2, [pc, #52]	; (800b0e4 <prvInitialiseNewTask+0x154>)
 800b0b0:	665a      	str	r2, [r3, #100]	; 0x64
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	4a0c      	ldr	r2, [pc, #48]	; (800b0e8 <prvInitialiseNewTask+0x158>)
 800b0b6:	669a      	str	r2, [r3, #104]	; 0x68
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ba:	4a0c      	ldr	r2, [pc, #48]	; (800b0ec <prvInitialiseNewTask+0x15c>)
 800b0bc:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	68f9      	ldr	r1, [r7, #12]
 800b0c2:	69b8      	ldr	r0, [r7, #24]
 800b0c4:	f001 f962 	bl	800c38c <pxPortInitialiseStack>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <prvInitialiseNewTask+0x14a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0da:	bf00      	nop
 800b0dc:	3720      	adds	r7, #32
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20009468 	.word	0x20009468
 800b0e8:	200094d0 	.word	0x200094d0
 800b0ec:	20009538 	.word	0x20009538

0800b0f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0f8:	f001 fa74 	bl	800c5e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0fc:	4b2d      	ldr	r3, [pc, #180]	; (800b1b4 <prvAddNewTaskToReadyList+0xc4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3301      	adds	r3, #1
 800b102:	4a2c      	ldr	r2, [pc, #176]	; (800b1b4 <prvAddNewTaskToReadyList+0xc4>)
 800b104:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b106:	4b2c      	ldr	r3, [pc, #176]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d109      	bne.n	800b122 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b10e:	4a2a      	ldr	r2, [pc, #168]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b114:	4b27      	ldr	r3, [pc, #156]	; (800b1b4 <prvAddNewTaskToReadyList+0xc4>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d110      	bne.n	800b13e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b11c:	f000 fc46 	bl	800b9ac <prvInitialiseTaskLists>
 800b120:	e00d      	b.n	800b13e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b122:	4b26      	ldr	r3, [pc, #152]	; (800b1bc <prvAddNewTaskToReadyList+0xcc>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b12a:	4b23      	ldr	r3, [pc, #140]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b134:	429a      	cmp	r2, r3
 800b136:	d802      	bhi.n	800b13e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b138:	4a1f      	ldr	r2, [pc, #124]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b13e:	4b20      	ldr	r3, [pc, #128]	; (800b1c0 <prvAddNewTaskToReadyList+0xd0>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3301      	adds	r3, #1
 800b144:	4a1e      	ldr	r2, [pc, #120]	; (800b1c0 <prvAddNewTaskToReadyList+0xd0>)
 800b146:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b148:	4b1d      	ldr	r3, [pc, #116]	; (800b1c0 <prvAddNewTaskToReadyList+0xd0>)
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b154:	4b1b      	ldr	r3, [pc, #108]	; (800b1c4 <prvAddNewTaskToReadyList+0xd4>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d903      	bls.n	800b164 <prvAddNewTaskToReadyList+0x74>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	4a18      	ldr	r2, [pc, #96]	; (800b1c4 <prvAddNewTaskToReadyList+0xd4>)
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4a15      	ldr	r2, [pc, #84]	; (800b1c8 <prvAddNewTaskToReadyList+0xd8>)
 800b172:	441a      	add	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3304      	adds	r3, #4
 800b178:	4619      	mov	r1, r3
 800b17a:	4610      	mov	r0, r2
 800b17c:	f7ff f801 	bl	800a182 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b180:	f001 fa60 	bl	800c644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b184:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <prvAddNewTaskToReadyList+0xcc>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00e      	beq.n	800b1aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b18c:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	429a      	cmp	r2, r3
 800b198:	d207      	bcs.n	800b1aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b19a:	4b0c      	ldr	r3, [pc, #48]	; (800b1cc <prvAddNewTaskToReadyList+0xdc>)
 800b19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1aa:	bf00      	nop
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	200012e0 	.word	0x200012e0
 800b1b8:	20000e0c 	.word	0x20000e0c
 800b1bc:	200012ec 	.word	0x200012ec
 800b1c0:	200012fc 	.word	0x200012fc
 800b1c4:	200012e8 	.word	0x200012e8
 800b1c8:	20000e10 	.word	0x20000e10
 800b1cc:	e000ed04 	.word	0xe000ed04

0800b1d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d017      	beq.n	800b212 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1e2:	4b13      	ldr	r3, [pc, #76]	; (800b230 <vTaskDelay+0x60>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <vTaskDelay+0x30>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	60bb      	str	r3, [r7, #8]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b200:	f000 f88c 	bl	800b31c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b204:	2100      	movs	r1, #0
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fd1e 	bl	800bc48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b20c:	f000 f894 	bl	800b338 <xTaskResumeAll>
 800b210:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d107      	bne.n	800b228 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b218:	4b06      	ldr	r3, [pc, #24]	; (800b234 <vTaskDelay+0x64>)
 800b21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b228:	bf00      	nop
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	20001308 	.word	0x20001308
 800b234:	e000ed04 	.word	0xe000ed04

0800b238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08a      	sub	sp, #40	; 0x28
 800b23c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b23e:	2300      	movs	r3, #0
 800b240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b246:	463a      	mov	r2, r7
 800b248:	1d39      	adds	r1, r7, #4
 800b24a:	f107 0308 	add.w	r3, r7, #8
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe ff36 	bl	800a0c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	9202      	str	r2, [sp, #8]
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	2300      	movs	r3, #0
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	2300      	movs	r3, #0
 800b264:	460a      	mov	r2, r1
 800b266:	4925      	ldr	r1, [pc, #148]	; (800b2fc <vTaskStartScheduler+0xc4>)
 800b268:	4825      	ldr	r0, [pc, #148]	; (800b300 <vTaskStartScheduler+0xc8>)
 800b26a:	f7ff fdef 	bl	800ae4c <xTaskCreateStatic>
 800b26e:	4603      	mov	r3, r0
 800b270:	4a24      	ldr	r2, [pc, #144]	; (800b304 <vTaskStartScheduler+0xcc>)
 800b272:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b274:	4b23      	ldr	r3, [pc, #140]	; (800b304 <vTaskStartScheduler+0xcc>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b27c:	2301      	movs	r3, #1
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	e001      	b.n	800b286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d102      	bne.n	800b292 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b28c:	f000 fd30 	bl	800bcf0 <xTimerCreateTimerTask>
 800b290:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d11d      	bne.n	800b2d4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	613b      	str	r3, [r7, #16]
}
 800b2aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2ac:	4b16      	ldr	r3, [pc, #88]	; (800b308 <vTaskStartScheduler+0xd0>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3360      	adds	r3, #96	; 0x60
 800b2b2:	4a16      	ldr	r2, [pc, #88]	; (800b30c <vTaskStartScheduler+0xd4>)
 800b2b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2b6:	4b16      	ldr	r3, [pc, #88]	; (800b310 <vTaskStartScheduler+0xd8>)
 800b2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2be:	4b15      	ldr	r3, [pc, #84]	; (800b314 <vTaskStartScheduler+0xdc>)
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2c4:	4b14      	ldr	r3, [pc, #80]	; (800b318 <vTaskStartScheduler+0xe0>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b2ca:	f7f5 f917 	bl	80004fc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2ce:	f001 f8e7 	bl	800c4a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2d2:	e00e      	b.n	800b2f2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2da:	d10a      	bne.n	800b2f2 <vTaskStartScheduler+0xba>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	60fb      	str	r3, [r7, #12]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <vTaskStartScheduler+0xb8>
}
 800b2f2:	bf00      	nop
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	0800ce9c 	.word	0x0800ce9c
 800b300:	0800b979 	.word	0x0800b979
 800b304:	20001304 	.word	0x20001304
 800b308:	20000e0c 	.word	0x20000e0c
 800b30c:	2000005c 	.word	0x2000005c
 800b310:	20001300 	.word	0x20001300
 800b314:	200012ec 	.word	0x200012ec
 800b318:	200012e4 	.word	0x200012e4

0800b31c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b31c:	b480      	push	{r7}
 800b31e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b320:	4b04      	ldr	r3, [pc, #16]	; (800b334 <vTaskSuspendAll+0x18>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3301      	adds	r3, #1
 800b326:	4a03      	ldr	r2, [pc, #12]	; (800b334 <vTaskSuspendAll+0x18>)
 800b328:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b32a:	bf00      	nop
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	20001308 	.word	0x20001308

0800b338 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b342:	2300      	movs	r3, #0
 800b344:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b346:	4b42      	ldr	r3, [pc, #264]	; (800b450 <xTaskResumeAll+0x118>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10a      	bne.n	800b364 <xTaskResumeAll+0x2c>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	603b      	str	r3, [r7, #0]
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b364:	f001 f93e 	bl	800c5e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b368:	4b39      	ldr	r3, [pc, #228]	; (800b450 <xTaskResumeAll+0x118>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	4a38      	ldr	r2, [pc, #224]	; (800b450 <xTaskResumeAll+0x118>)
 800b370:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b372:	4b37      	ldr	r3, [pc, #220]	; (800b450 <xTaskResumeAll+0x118>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d162      	bne.n	800b440 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b37a:	4b36      	ldr	r3, [pc, #216]	; (800b454 <xTaskResumeAll+0x11c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d05e      	beq.n	800b440 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b382:	e02f      	b.n	800b3e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b384:	4b34      	ldr	r3, [pc, #208]	; (800b458 <xTaskResumeAll+0x120>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3318      	adds	r3, #24
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe ff53 	bl	800a23c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3304      	adds	r3, #4
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe ff4e 	bl	800a23c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a4:	4b2d      	ldr	r3, [pc, #180]	; (800b45c <xTaskResumeAll+0x124>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d903      	bls.n	800b3b4 <xTaskResumeAll+0x7c>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b0:	4a2a      	ldr	r2, [pc, #168]	; (800b45c <xTaskResumeAll+0x124>)
 800b3b2:	6013      	str	r3, [r2, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4a27      	ldr	r2, [pc, #156]	; (800b460 <xTaskResumeAll+0x128>)
 800b3c2:	441a      	add	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4610      	mov	r0, r2
 800b3cc:	f7fe fed9 	bl	800a182 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d4:	4b23      	ldr	r3, [pc, #140]	; (800b464 <xTaskResumeAll+0x12c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d302      	bcc.n	800b3e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b3de:	4b22      	ldr	r3, [pc, #136]	; (800b468 <xTaskResumeAll+0x130>)
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3e4:	4b1c      	ldr	r3, [pc, #112]	; (800b458 <xTaskResumeAll+0x120>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1cb      	bne.n	800b384 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3f2:	f000 fb7d 	bl	800baf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3f6:	4b1d      	ldr	r3, [pc, #116]	; (800b46c <xTaskResumeAll+0x134>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d010      	beq.n	800b424 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b402:	f000 f847 	bl	800b494 <xTaskIncrementTick>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b40c:	4b16      	ldr	r3, [pc, #88]	; (800b468 <xTaskResumeAll+0x130>)
 800b40e:	2201      	movs	r2, #1
 800b410:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3b01      	subs	r3, #1
 800b416:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1f1      	bne.n	800b402 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b41e:	4b13      	ldr	r3, [pc, #76]	; (800b46c <xTaskResumeAll+0x134>)
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b424:	4b10      	ldr	r3, [pc, #64]	; (800b468 <xTaskResumeAll+0x130>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d009      	beq.n	800b440 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b42c:	2301      	movs	r3, #1
 800b42e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b430:	4b0f      	ldr	r3, [pc, #60]	; (800b470 <xTaskResumeAll+0x138>)
 800b432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b440:	f001 f900 	bl	800c644 <vPortExitCritical>

	return xAlreadyYielded;
 800b444:	68bb      	ldr	r3, [r7, #8]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20001308 	.word	0x20001308
 800b454:	200012e0 	.word	0x200012e0
 800b458:	200012a0 	.word	0x200012a0
 800b45c:	200012e8 	.word	0x200012e8
 800b460:	20000e10 	.word	0x20000e10
 800b464:	20000e0c 	.word	0x20000e0c
 800b468:	200012f4 	.word	0x200012f4
 800b46c:	200012f0 	.word	0x200012f0
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b47a:	4b05      	ldr	r3, [pc, #20]	; (800b490 <xTaskGetTickCount+0x1c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b480:	687b      	ldr	r3, [r7, #4]
}
 800b482:	4618      	mov	r0, r3
 800b484:	370c      	adds	r7, #12
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	200012e4 	.word	0x200012e4

0800b494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b49a:	2300      	movs	r3, #0
 800b49c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b49e:	4b4f      	ldr	r3, [pc, #316]	; (800b5dc <xTaskIncrementTick+0x148>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f040 808f 	bne.w	800b5c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4a8:	4b4d      	ldr	r3, [pc, #308]	; (800b5e0 <xTaskIncrementTick+0x14c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4b0:	4a4b      	ldr	r2, [pc, #300]	; (800b5e0 <xTaskIncrementTick+0x14c>)
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d120      	bne.n	800b4fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4bc:	4b49      	ldr	r3, [pc, #292]	; (800b5e4 <xTaskIncrementTick+0x150>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <xTaskIncrementTick+0x48>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	603b      	str	r3, [r7, #0]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <xTaskIncrementTick+0x46>
 800b4dc:	4b41      	ldr	r3, [pc, #260]	; (800b5e4 <xTaskIncrementTick+0x150>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	60fb      	str	r3, [r7, #12]
 800b4e2:	4b41      	ldr	r3, [pc, #260]	; (800b5e8 <xTaskIncrementTick+0x154>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a3f      	ldr	r2, [pc, #252]	; (800b5e4 <xTaskIncrementTick+0x150>)
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	4a3f      	ldr	r2, [pc, #252]	; (800b5e8 <xTaskIncrementTick+0x154>)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	4b3e      	ldr	r3, [pc, #248]	; (800b5ec <xTaskIncrementTick+0x158>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	4a3d      	ldr	r2, [pc, #244]	; (800b5ec <xTaskIncrementTick+0x158>)
 800b4f8:	6013      	str	r3, [r2, #0]
 800b4fa:	f000 faf9 	bl	800baf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4fe:	4b3c      	ldr	r3, [pc, #240]	; (800b5f0 <xTaskIncrementTick+0x15c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	429a      	cmp	r2, r3
 800b506:	d349      	bcc.n	800b59c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b508:	4b36      	ldr	r3, [pc, #216]	; (800b5e4 <xTaskIncrementTick+0x150>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d104      	bne.n	800b51c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b512:	4b37      	ldr	r3, [pc, #220]	; (800b5f0 <xTaskIncrementTick+0x15c>)
 800b514:	f04f 32ff 	mov.w	r2, #4294967295
 800b518:	601a      	str	r2, [r3, #0]
					break;
 800b51a:	e03f      	b.n	800b59c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b51c:	4b31      	ldr	r3, [pc, #196]	; (800b5e4 <xTaskIncrementTick+0x150>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	429a      	cmp	r2, r3
 800b532:	d203      	bcs.n	800b53c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b534:	4a2e      	ldr	r2, [pc, #184]	; (800b5f0 <xTaskIncrementTick+0x15c>)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b53a:	e02f      	b.n	800b59c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	3304      	adds	r3, #4
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fe7b 	bl	800a23c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d004      	beq.n	800b558 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	3318      	adds	r3, #24
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe fe72 	bl	800a23c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55c:	4b25      	ldr	r3, [pc, #148]	; (800b5f4 <xTaskIncrementTick+0x160>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	429a      	cmp	r2, r3
 800b562:	d903      	bls.n	800b56c <xTaskIncrementTick+0xd8>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b568:	4a22      	ldr	r2, [pc, #136]	; (800b5f4 <xTaskIncrementTick+0x160>)
 800b56a:	6013      	str	r3, [r2, #0]
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b570:	4613      	mov	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4a1f      	ldr	r2, [pc, #124]	; (800b5f8 <xTaskIncrementTick+0x164>)
 800b57a:	441a      	add	r2, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	3304      	adds	r3, #4
 800b580:	4619      	mov	r1, r3
 800b582:	4610      	mov	r0, r2
 800b584:	f7fe fdfd 	bl	800a182 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58c:	4b1b      	ldr	r3, [pc, #108]	; (800b5fc <xTaskIncrementTick+0x168>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b592:	429a      	cmp	r2, r3
 800b594:	d3b8      	bcc.n	800b508 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b596:	2301      	movs	r3, #1
 800b598:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b59a:	e7b5      	b.n	800b508 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b59c:	4b17      	ldr	r3, [pc, #92]	; (800b5fc <xTaskIncrementTick+0x168>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a2:	4915      	ldr	r1, [pc, #84]	; (800b5f8 <xTaskIncrementTick+0x164>)
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	440b      	add	r3, r1
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d901      	bls.n	800b5b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5b8:	4b11      	ldr	r3, [pc, #68]	; (800b600 <xTaskIncrementTick+0x16c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d007      	beq.n	800b5d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	617b      	str	r3, [r7, #20]
 800b5c4:	e004      	b.n	800b5d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5c6:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <xTaskIncrementTick+0x170>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	4a0d      	ldr	r2, [pc, #52]	; (800b604 <xTaskIncrementTick+0x170>)
 800b5ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5d0:	697b      	ldr	r3, [r7, #20]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20001308 	.word	0x20001308
 800b5e0:	200012e4 	.word	0x200012e4
 800b5e4:	20001298 	.word	0x20001298
 800b5e8:	2000129c 	.word	0x2000129c
 800b5ec:	200012f8 	.word	0x200012f8
 800b5f0:	20001300 	.word	0x20001300
 800b5f4:	200012e8 	.word	0x200012e8
 800b5f8:	20000e10 	.word	0x20000e10
 800b5fc:	20000e0c 	.word	0x20000e0c
 800b600:	200012f4 	.word	0x200012f4
 800b604:	200012f0 	.word	0x200012f0

0800b608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b60e:	4b36      	ldr	r3, [pc, #216]	; (800b6e8 <vTaskSwitchContext+0xe0>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b616:	4b35      	ldr	r3, [pc, #212]	; (800b6ec <vTaskSwitchContext+0xe4>)
 800b618:	2201      	movs	r2, #1
 800b61a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b61c:	e05f      	b.n	800b6de <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800b61e:	4b33      	ldr	r3, [pc, #204]	; (800b6ec <vTaskSwitchContext+0xe4>)
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b624:	f7f4 ff71 	bl	800050a <getRunTimeCounterValue>
 800b628:	4603      	mov	r3, r0
 800b62a:	4a31      	ldr	r2, [pc, #196]	; (800b6f0 <vTaskSwitchContext+0xe8>)
 800b62c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b62e:	4b30      	ldr	r3, [pc, #192]	; (800b6f0 <vTaskSwitchContext+0xe8>)
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	4b30      	ldr	r3, [pc, #192]	; (800b6f4 <vTaskSwitchContext+0xec>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d909      	bls.n	800b64e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b63a:	4b2f      	ldr	r3, [pc, #188]	; (800b6f8 <vTaskSwitchContext+0xf0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b640:	4a2b      	ldr	r2, [pc, #172]	; (800b6f0 <vTaskSwitchContext+0xe8>)
 800b642:	6810      	ldr	r0, [r2, #0]
 800b644:	4a2b      	ldr	r2, [pc, #172]	; (800b6f4 <vTaskSwitchContext+0xec>)
 800b646:	6812      	ldr	r2, [r2, #0]
 800b648:	1a82      	subs	r2, r0, r2
 800b64a:	440a      	add	r2, r1
 800b64c:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b64e:	4b28      	ldr	r3, [pc, #160]	; (800b6f0 <vTaskSwitchContext+0xe8>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a28      	ldr	r2, [pc, #160]	; (800b6f4 <vTaskSwitchContext+0xec>)
 800b654:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b656:	4b29      	ldr	r3, [pc, #164]	; (800b6fc <vTaskSwitchContext+0xf4>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	60fb      	str	r3, [r7, #12]
 800b65c:	e010      	b.n	800b680 <vTaskSwitchContext+0x78>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10a      	bne.n	800b67a <vTaskSwitchContext+0x72>
	__asm volatile
 800b664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b668:	f383 8811 	msr	BASEPRI, r3
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f3bf 8f4f 	dsb	sy
 800b674:	607b      	str	r3, [r7, #4]
}
 800b676:	bf00      	nop
 800b678:	e7fe      	b.n	800b678 <vTaskSwitchContext+0x70>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	491f      	ldr	r1, [pc, #124]	; (800b700 <vTaskSwitchContext+0xf8>)
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	4613      	mov	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	440b      	add	r3, r1
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0e4      	beq.n	800b65e <vTaskSwitchContext+0x56>
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4613      	mov	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4a18      	ldr	r2, [pc, #96]	; (800b700 <vTaskSwitchContext+0xf8>)
 800b6a0:	4413      	add	r3, r2
 800b6a2:	60bb      	str	r3, [r7, #8]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	605a      	str	r2, [r3, #4]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d104      	bne.n	800b6c4 <vTaskSwitchContext+0xbc>
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	605a      	str	r2, [r3, #4]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	4a0b      	ldr	r2, [pc, #44]	; (800b6f8 <vTaskSwitchContext+0xf0>)
 800b6cc:	6013      	str	r3, [r2, #0]
 800b6ce:	4a0b      	ldr	r2, [pc, #44]	; (800b6fc <vTaskSwitchContext+0xf4>)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6d4:	4b08      	ldr	r3, [pc, #32]	; (800b6f8 <vTaskSwitchContext+0xf0>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3360      	adds	r3, #96	; 0x60
 800b6da:	4a0a      	ldr	r2, [pc, #40]	; (800b704 <vTaskSwitchContext+0xfc>)
 800b6dc:	6013      	str	r3, [r2, #0]
}
 800b6de:	bf00      	nop
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20001308 	.word	0x20001308
 800b6ec:	200012f4 	.word	0x200012f4
 800b6f0:	20001310 	.word	0x20001310
 800b6f4:	2000130c 	.word	0x2000130c
 800b6f8:	20000e0c 	.word	0x20000e0c
 800b6fc:	200012e8 	.word	0x200012e8
 800b700:	20000e10 	.word	0x20000e10
 800b704:	2000005c 	.word	0x2000005c

0800b708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	60fb      	str	r3, [r7, #12]
}
 800b72a:	bf00      	nop
 800b72c:	e7fe      	b.n	800b72c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b72e:	4b07      	ldr	r3, [pc, #28]	; (800b74c <vTaskPlaceOnEventList+0x44>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	3318      	adds	r3, #24
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7fe fd47 	bl	800a1ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b73c:	2101      	movs	r1, #1
 800b73e:	6838      	ldr	r0, [r7, #0]
 800b740:	f000 fa82 	bl	800bc48 <prvAddCurrentTaskToDelayedList>
}
 800b744:	bf00      	nop
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	20000e0c 	.word	0x20000e0c

0800b750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10a      	bne.n	800b778 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	617b      	str	r3, [r7, #20]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3318      	adds	r3, #24
 800b77e:	4619      	mov	r1, r3
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f7fe fcfe 	bl	800a182 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b78c:	f04f 33ff 	mov.w	r3, #4294967295
 800b790:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b792:	6879      	ldr	r1, [r7, #4]
 800b794:	68b8      	ldr	r0, [r7, #8]
 800b796:	f000 fa57 	bl	800bc48 <prvAddCurrentTaskToDelayedList>
	}
 800b79a:	bf00      	nop
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000e0c 	.word	0x20000e0c

0800b7a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	60fb      	str	r3, [r7, #12]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	3318      	adds	r3, #24
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fe fd2f 	bl	800a23c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7de:	4b1e      	ldr	r3, [pc, #120]	; (800b858 <xTaskRemoveFromEventList+0xb0>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d11d      	bne.n	800b822 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe fd26 	bl	800a23c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f4:	4b19      	ldr	r3, [pc, #100]	; (800b85c <xTaskRemoveFromEventList+0xb4>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d903      	bls.n	800b804 <xTaskRemoveFromEventList+0x5c>
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	4a16      	ldr	r2, [pc, #88]	; (800b85c <xTaskRemoveFromEventList+0xb4>)
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4a13      	ldr	r2, [pc, #76]	; (800b860 <xTaskRemoveFromEventList+0xb8>)
 800b812:	441a      	add	r2, r3
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	3304      	adds	r3, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fe fcb1 	bl	800a182 <vListInsertEnd>
 800b820:	e005      	b.n	800b82e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	3318      	adds	r3, #24
 800b826:	4619      	mov	r1, r3
 800b828:	480e      	ldr	r0, [pc, #56]	; (800b864 <xTaskRemoveFromEventList+0xbc>)
 800b82a:	f7fe fcaa 	bl	800a182 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b832:	4b0d      	ldr	r3, [pc, #52]	; (800b868 <xTaskRemoveFromEventList+0xc0>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	429a      	cmp	r2, r3
 800b83a:	d905      	bls.n	800b848 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b83c:	2301      	movs	r3, #1
 800b83e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b840:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <xTaskRemoveFromEventList+0xc4>)
 800b842:	2201      	movs	r2, #1
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	e001      	b.n	800b84c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b84c:	697b      	ldr	r3, [r7, #20]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3718      	adds	r7, #24
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20001308 	.word	0x20001308
 800b85c:	200012e8 	.word	0x200012e8
 800b860:	20000e10 	.word	0x20000e10
 800b864:	200012a0 	.word	0x200012a0
 800b868:	20000e0c 	.word	0x20000e0c
 800b86c:	200012f4 	.word	0x200012f4

0800b870 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b878:	4b06      	ldr	r3, [pc, #24]	; (800b894 <vTaskInternalSetTimeOutState+0x24>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b880:	4b05      	ldr	r3, [pc, #20]	; (800b898 <vTaskInternalSetTimeOutState+0x28>)
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	605a      	str	r2, [r3, #4]
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	200012f8 	.word	0x200012f8
 800b898:	200012e4 	.word	0x200012e4

0800b89c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	613b      	str	r3, [r7, #16]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10a      	bne.n	800b8de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	60fb      	str	r3, [r7, #12]
}
 800b8da:	bf00      	nop
 800b8dc:	e7fe      	b.n	800b8dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8de:	f000 fe81 	bl	800c5e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8e2:	4b1d      	ldr	r3, [pc, #116]	; (800b958 <xTaskCheckForTimeOut+0xbc>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	69ba      	ldr	r2, [r7, #24]
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fa:	d102      	bne.n	800b902 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	61fb      	str	r3, [r7, #28]
 800b900:	e023      	b.n	800b94a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	4b15      	ldr	r3, [pc, #84]	; (800b95c <xTaskCheckForTimeOut+0xc0>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d007      	beq.n	800b91e <xTaskCheckForTimeOut+0x82>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	429a      	cmp	r2, r3
 800b916:	d302      	bcc.n	800b91e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b918:	2301      	movs	r3, #1
 800b91a:	61fb      	str	r3, [r7, #28]
 800b91c:	e015      	b.n	800b94a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	429a      	cmp	r2, r3
 800b926:	d20b      	bcs.n	800b940 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7ff ff9b 	bl	800b870 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b93a:	2300      	movs	r3, #0
 800b93c:	61fb      	str	r3, [r7, #28]
 800b93e:	e004      	b.n	800b94a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b946:	2301      	movs	r3, #1
 800b948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b94a:	f000 fe7b 	bl	800c644 <vPortExitCritical>

	return xReturn;
 800b94e:	69fb      	ldr	r3, [r7, #28]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3720      	adds	r7, #32
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	200012e4 	.word	0x200012e4
 800b95c:	200012f8 	.word	0x200012f8

0800b960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b960:	b480      	push	{r7}
 800b962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b964:	4b03      	ldr	r3, [pc, #12]	; (800b974 <vTaskMissedYield+0x14>)
 800b966:	2201      	movs	r2, #1
 800b968:	601a      	str	r2, [r3, #0]
}
 800b96a:	bf00      	nop
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	200012f4 	.word	0x200012f4

0800b978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b980:	f000 f854 	bl	800ba2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b984:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <prvIdleTask+0x2c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d907      	bls.n	800b99c <prvIdleTask+0x24>
			{
				taskYIELD();
 800b98c:	4b06      	ldr	r3, [pc, #24]	; (800b9a8 <prvIdleTask+0x30>)
 800b98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b99c:	f7f4 fdbd 	bl	800051a <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b9a0:	e7ee      	b.n	800b980 <prvIdleTask+0x8>
 800b9a2:	bf00      	nop
 800b9a4:	20000e10 	.word	0x20000e10
 800b9a8:	e000ed04 	.word	0xe000ed04

0800b9ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	e00c      	b.n	800b9d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4a12      	ldr	r2, [pc, #72]	; (800ba0c <prvInitialiseTaskLists+0x60>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe fbae 	bl	800a128 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	607b      	str	r3, [r7, #4]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b37      	cmp	r3, #55	; 0x37
 800b9d6:	d9ef      	bls.n	800b9b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9d8:	480d      	ldr	r0, [pc, #52]	; (800ba10 <prvInitialiseTaskLists+0x64>)
 800b9da:	f7fe fba5 	bl	800a128 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9de:	480d      	ldr	r0, [pc, #52]	; (800ba14 <prvInitialiseTaskLists+0x68>)
 800b9e0:	f7fe fba2 	bl	800a128 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9e4:	480c      	ldr	r0, [pc, #48]	; (800ba18 <prvInitialiseTaskLists+0x6c>)
 800b9e6:	f7fe fb9f 	bl	800a128 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9ea:	480c      	ldr	r0, [pc, #48]	; (800ba1c <prvInitialiseTaskLists+0x70>)
 800b9ec:	f7fe fb9c 	bl	800a128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9f0:	480b      	ldr	r0, [pc, #44]	; (800ba20 <prvInitialiseTaskLists+0x74>)
 800b9f2:	f7fe fb99 	bl	800a128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <prvInitialiseTaskLists+0x78>)
 800b9f8:	4a05      	ldr	r2, [pc, #20]	; (800ba10 <prvInitialiseTaskLists+0x64>)
 800b9fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <prvInitialiseTaskLists+0x7c>)
 800b9fe:	4a05      	ldr	r2, [pc, #20]	; (800ba14 <prvInitialiseTaskLists+0x68>)
 800ba00:	601a      	str	r2, [r3, #0]
}
 800ba02:	bf00      	nop
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20000e10 	.word	0x20000e10
 800ba10:	20001270 	.word	0x20001270
 800ba14:	20001284 	.word	0x20001284
 800ba18:	200012a0 	.word	0x200012a0
 800ba1c:	200012b4 	.word	0x200012b4
 800ba20:	200012cc 	.word	0x200012cc
 800ba24:	20001298 	.word	0x20001298
 800ba28:	2000129c 	.word	0x2000129c

0800ba2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba32:	e019      	b.n	800ba68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba34:	f000 fdd6 	bl	800c5e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba38:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <prvCheckTasksWaitingTermination+0x50>)
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3304      	adds	r3, #4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fe fbf9 	bl	800a23c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba4a:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <prvCheckTasksWaitingTermination+0x54>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	4a0b      	ldr	r2, [pc, #44]	; (800ba80 <prvCheckTasksWaitingTermination+0x54>)
 800ba52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba54:	4b0b      	ldr	r3, [pc, #44]	; (800ba84 <prvCheckTasksWaitingTermination+0x58>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	4a0a      	ldr	r2, [pc, #40]	; (800ba84 <prvCheckTasksWaitingTermination+0x58>)
 800ba5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba5e:	f000 fdf1 	bl	800c644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f810 	bl	800ba88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba68:	4b06      	ldr	r3, [pc, #24]	; (800ba84 <prvCheckTasksWaitingTermination+0x58>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1e1      	bne.n	800ba34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	200012b4 	.word	0x200012b4
 800ba80:	200012e0 	.word	0x200012e0
 800ba84:	200012c8 	.word	0x200012c8

0800ba88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	3360      	adds	r3, #96	; 0x60
 800ba94:	4618      	mov	r0, r3
 800ba96:	f001 f8b9 	bl	800cc0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d108      	bne.n	800bab6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 ff89 	bl	800c9c0 <vPortFree>
				vPortFree( pxTCB );
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 ff86 	bl	800c9c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bab4:	e018      	b.n	800bae8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800babc:	2b01      	cmp	r3, #1
 800babe:	d103      	bne.n	800bac8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 ff7d 	bl	800c9c0 <vPortFree>
	}
 800bac6:	e00f      	b.n	800bae8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d00a      	beq.n	800bae8 <prvDeleteTCB+0x60>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	60fb      	str	r3, [r7, #12]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <prvDeleteTCB+0x5e>
	}
 800bae8:	bf00      	nop
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baf6:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <prvResetNextTaskUnblockTime+0x38>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d104      	bne.n	800bb0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb00:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <prvResetNextTaskUnblockTime+0x3c>)
 800bb02:	f04f 32ff 	mov.w	r2, #4294967295
 800bb06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb08:	e008      	b.n	800bb1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb0a:	4b07      	ldr	r3, [pc, #28]	; (800bb28 <prvResetNextTaskUnblockTime+0x38>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	4a04      	ldr	r2, [pc, #16]	; (800bb2c <prvResetNextTaskUnblockTime+0x3c>)
 800bb1a:	6013      	str	r3, [r2, #0]
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	20001298 	.word	0x20001298
 800bb2c:	20001300 	.word	0x20001300

0800bb30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb36:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <xTaskGetSchedulerState+0x34>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d102      	bne.n	800bb44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	607b      	str	r3, [r7, #4]
 800bb42:	e008      	b.n	800bb56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb44:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <xTaskGetSchedulerState+0x38>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d102      	bne.n	800bb52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	607b      	str	r3, [r7, #4]
 800bb50:	e001      	b.n	800bb56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb52:	2300      	movs	r3, #0
 800bb54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb56:	687b      	ldr	r3, [r7, #4]
	}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	200012ec 	.word	0x200012ec
 800bb68:	20001308 	.word	0x20001308

0800bb6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d056      	beq.n	800bc30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb82:	4b2e      	ldr	r3, [pc, #184]	; (800bc3c <xTaskPriorityDisinherit+0xd0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d00a      	beq.n	800bba2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	60fb      	str	r3, [r7, #12]
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	60bb      	str	r3, [r7, #8]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc4:	1e5a      	subs	r2, r3, #1
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d02c      	beq.n	800bc30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d128      	bne.n	800bc30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fb2a 	bl	800a23c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc00:	4b0f      	ldr	r3, [pc, #60]	; (800bc40 <xTaskPriorityDisinherit+0xd4>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d903      	bls.n	800bc10 <xTaskPriorityDisinherit+0xa4>
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0c:	4a0c      	ldr	r2, [pc, #48]	; (800bc40 <xTaskPriorityDisinherit+0xd4>)
 800bc0e:	6013      	str	r3, [r2, #0]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4a09      	ldr	r2, [pc, #36]	; (800bc44 <xTaskPriorityDisinherit+0xd8>)
 800bc1e:	441a      	add	r2, r3
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	3304      	adds	r3, #4
 800bc24:	4619      	mov	r1, r3
 800bc26:	4610      	mov	r0, r2
 800bc28:	f7fe faab 	bl	800a182 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc30:	697b      	ldr	r3, [r7, #20]
	}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20000e0c 	.word	0x20000e0c
 800bc40:	200012e8 	.word	0x200012e8
 800bc44:	20000e10 	.word	0x20000e10

0800bc48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc52:	4b21      	ldr	r3, [pc, #132]	; (800bcd8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc58:	4b20      	ldr	r3, [pc, #128]	; (800bcdc <prvAddCurrentTaskToDelayedList+0x94>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fe faec 	bl	800a23c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6a:	d10a      	bne.n	800bc82 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d007      	beq.n	800bc82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc72:	4b1a      	ldr	r3, [pc, #104]	; (800bcdc <prvAddCurrentTaskToDelayedList+0x94>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3304      	adds	r3, #4
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4819      	ldr	r0, [pc, #100]	; (800bce0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc7c:	f7fe fa81 	bl	800a182 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc80:	e026      	b.n	800bcd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4413      	add	r3, r2
 800bc88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc8a:	4b14      	ldr	r3, [pc, #80]	; (800bcdc <prvAddCurrentTaskToDelayedList+0x94>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d209      	bcs.n	800bcae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc9a:	4b12      	ldr	r3, [pc, #72]	; (800bce4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <prvAddCurrentTaskToDelayedList+0x94>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3304      	adds	r3, #4
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7fe fa8f 	bl	800a1ca <vListInsert>
}
 800bcac:	e010      	b.n	800bcd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcae:	4b0e      	ldr	r3, [pc, #56]	; (800bce8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	4b0a      	ldr	r3, [pc, #40]	; (800bcdc <prvAddCurrentTaskToDelayedList+0x94>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f7fe fa85 	bl	800a1ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	; (800bcec <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d202      	bcs.n	800bcd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcca:	4a08      	ldr	r2, [pc, #32]	; (800bcec <prvAddCurrentTaskToDelayedList+0xa4>)
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	6013      	str	r3, [r2, #0]
}
 800bcd0:	bf00      	nop
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	200012e4 	.word	0x200012e4
 800bcdc:	20000e0c 	.word	0x20000e0c
 800bce0:	200012cc 	.word	0x200012cc
 800bce4:	2000129c 	.word	0x2000129c
 800bce8:	20001298 	.word	0x20001298
 800bcec:	20001300 	.word	0x20001300

0800bcf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08a      	sub	sp, #40	; 0x28
 800bcf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcfa:	f000 fb07 	bl	800c30c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcfe:	4b1c      	ldr	r3, [pc, #112]	; (800bd70 <xTimerCreateTimerTask+0x80>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d021      	beq.n	800bd4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd0e:	1d3a      	adds	r2, r7, #4
 800bd10:	f107 0108 	add.w	r1, r7, #8
 800bd14:	f107 030c 	add.w	r3, r7, #12
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe f9eb 	bl	800a0f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	9202      	str	r2, [sp, #8]
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	2302      	movs	r3, #2
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	460a      	mov	r2, r1
 800bd30:	4910      	ldr	r1, [pc, #64]	; (800bd74 <xTimerCreateTimerTask+0x84>)
 800bd32:	4811      	ldr	r0, [pc, #68]	; (800bd78 <xTimerCreateTimerTask+0x88>)
 800bd34:	f7ff f88a 	bl	800ae4c <xTaskCreateStatic>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	4a10      	ldr	r2, [pc, #64]	; (800bd7c <xTimerCreateTimerTask+0x8c>)
 800bd3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd3e:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <xTimerCreateTimerTask+0x8c>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d001      	beq.n	800bd4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd46:	2301      	movs	r3, #1
 800bd48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	613b      	str	r3, [r7, #16]
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd66:	697b      	ldr	r3, [r7, #20]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	20001344 	.word	0x20001344
 800bd74:	0800cecc 	.word	0x0800cecc
 800bd78:	0800beb5 	.word	0x0800beb5
 800bd7c:	20001348 	.word	0x20001348

0800bd80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08a      	sub	sp, #40	; 0x28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	623b      	str	r3, [r7, #32]
}
 800bdaa:	bf00      	nop
 800bdac:	e7fe      	b.n	800bdac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bdae:	4b1a      	ldr	r3, [pc, #104]	; (800be18 <xTimerGenericCommand+0x98>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d02a      	beq.n	800be0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b05      	cmp	r3, #5
 800bdc6:	dc18      	bgt.n	800bdfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdc8:	f7ff feb2 	bl	800bb30 <xTaskGetSchedulerState>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d109      	bne.n	800bde6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdd2:	4b11      	ldr	r3, [pc, #68]	; (800be18 <xTimerGenericCommand+0x98>)
 800bdd4:	6818      	ldr	r0, [r3, #0]
 800bdd6:	f107 0110 	add.w	r1, r7, #16
 800bdda:	2300      	movs	r3, #0
 800bddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdde:	f7fe fbff 	bl	800a5e0 <xQueueGenericSend>
 800bde2:	6278      	str	r0, [r7, #36]	; 0x24
 800bde4:	e012      	b.n	800be0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bde6:	4b0c      	ldr	r3, [pc, #48]	; (800be18 <xTimerGenericCommand+0x98>)
 800bde8:	6818      	ldr	r0, [r3, #0]
 800bdea:	f107 0110 	add.w	r1, r7, #16
 800bdee:	2300      	movs	r3, #0
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f7fe fbf5 	bl	800a5e0 <xQueueGenericSend>
 800bdf6:	6278      	str	r0, [r7, #36]	; 0x24
 800bdf8:	e008      	b.n	800be0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdfa:	4b07      	ldr	r3, [pc, #28]	; (800be18 <xTimerGenericCommand+0x98>)
 800bdfc:	6818      	ldr	r0, [r3, #0]
 800bdfe:	f107 0110 	add.w	r1, r7, #16
 800be02:	2300      	movs	r3, #0
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	f7fe fce9 	bl	800a7dc <xQueueGenericSendFromISR>
 800be0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3728      	adds	r7, #40	; 0x28
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20001344 	.word	0x20001344

0800be1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af02      	add	r7, sp, #8
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be26:	4b22      	ldr	r3, [pc, #136]	; (800beb0 <prvProcessExpiredTimer+0x94>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	3304      	adds	r3, #4
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fa01 	bl	800a23c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be40:	f003 0304 	and.w	r3, r3, #4
 800be44:	2b00      	cmp	r3, #0
 800be46:	d022      	beq.n	800be8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	699a      	ldr	r2, [r3, #24]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	18d1      	adds	r1, r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	6978      	ldr	r0, [r7, #20]
 800be56:	f000 f8d1 	bl	800bffc <prvInsertTimerInActiveList>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01f      	beq.n	800bea0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be60:	2300      	movs	r3, #0
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	2300      	movs	r3, #0
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	2100      	movs	r1, #0
 800be6a:	6978      	ldr	r0, [r7, #20]
 800be6c:	f7ff ff88 	bl	800bd80 <xTimerGenericCommand>
 800be70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d113      	bne.n	800bea0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	60fb      	str	r3, [r7, #12]
}
 800be8a:	bf00      	nop
 800be8c:	e7fe      	b.n	800be8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be94:	f023 0301 	bic.w	r3, r3, #1
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	6978      	ldr	r0, [r7, #20]
 800bea6:	4798      	blx	r3
}
 800bea8:	bf00      	nop
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	2000133c 	.word	0x2000133c

0800beb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bebc:	f107 0308 	add.w	r3, r7, #8
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 f857 	bl	800bf74 <prvGetNextExpireTime>
 800bec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	4619      	mov	r1, r3
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f000 f803 	bl	800bed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bed2:	f000 f8d5 	bl	800c080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bed6:	e7f1      	b.n	800bebc <prvTimerTask+0x8>

0800bed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bee2:	f7ff fa1b 	bl	800b31c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bee6:	f107 0308 	add.w	r3, r7, #8
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f866 	bl	800bfbc <prvSampleTimeNow>
 800bef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d130      	bne.n	800bf5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10a      	bne.n	800bf14 <prvProcessTimerOrBlockTask+0x3c>
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d806      	bhi.n	800bf14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf06:	f7ff fa17 	bl	800b338 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf0a:	68f9      	ldr	r1, [r7, #12]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff ff85 	bl	800be1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf12:	e024      	b.n	800bf5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d008      	beq.n	800bf2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf1a:	4b13      	ldr	r3, [pc, #76]	; (800bf68 <prvProcessTimerOrBlockTask+0x90>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <prvProcessTimerOrBlockTask+0x50>
 800bf24:	2301      	movs	r3, #1
 800bf26:	e000      	b.n	800bf2a <prvProcessTimerOrBlockTask+0x52>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf2c:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <prvProcessTimerOrBlockTask+0x94>)
 800bf2e:	6818      	ldr	r0, [r3, #0]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	f7fe ff53 	bl	800ade4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf3e:	f7ff f9fb 	bl	800b338 <xTaskResumeAll>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10a      	bne.n	800bf5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf48:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <prvProcessTimerOrBlockTask+0x98>)
 800bf4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	f3bf 8f6f 	isb	sy
}
 800bf58:	e001      	b.n	800bf5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf5a:	f7ff f9ed 	bl	800b338 <xTaskResumeAll>
}
 800bf5e:	bf00      	nop
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20001340 	.word	0x20001340
 800bf6c:	20001344 	.word	0x20001344
 800bf70:	e000ed04 	.word	0xe000ed04

0800bf74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <prvGetNextExpireTime+0x44>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <prvGetNextExpireTime+0x16>
 800bf86:	2201      	movs	r2, #1
 800bf88:	e000      	b.n	800bf8c <prvGetNextExpireTime+0x18>
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d105      	bne.n	800bfa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf98:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <prvGetNextExpireTime+0x44>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	60fb      	str	r3, [r7, #12]
 800bfa2:	e001      	b.n	800bfa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	2000133c 	.word	0x2000133c

0800bfbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfc4:	f7ff fa56 	bl	800b474 <xTaskGetTickCount>
 800bfc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfca:	4b0b      	ldr	r3, [pc, #44]	; (800bff8 <prvSampleTimeNow+0x3c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d205      	bcs.n	800bfe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfd4:	f000 f936 	bl	800c244 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	e002      	b.n	800bfe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfe6:	4a04      	ldr	r2, [pc, #16]	; (800bff8 <prvSampleTimeNow+0x3c>)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfec:	68fb      	ldr	r3, [r7, #12]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	2000134c 	.word	0x2000134c

0800bffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c00a:	2300      	movs	r3, #0
 800c00c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d812      	bhi.n	800c048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	1ad2      	subs	r2, r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d302      	bcc.n	800c036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c030:	2301      	movs	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	e01b      	b.n	800c06e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c036:	4b10      	ldr	r3, [pc, #64]	; (800c078 <prvInsertTimerInActiveList+0x7c>)
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3304      	adds	r3, #4
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7fe f8c2 	bl	800a1ca <vListInsert>
 800c046:	e012      	b.n	800c06e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d206      	bcs.n	800c05e <prvInsertTimerInActiveList+0x62>
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	429a      	cmp	r2, r3
 800c056:	d302      	bcc.n	800c05e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c058:	2301      	movs	r3, #1
 800c05a:	617b      	str	r3, [r7, #20]
 800c05c:	e007      	b.n	800c06e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c05e:	4b07      	ldr	r3, [pc, #28]	; (800c07c <prvInsertTimerInActiveList+0x80>)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	3304      	adds	r3, #4
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f7fe f8ae 	bl	800a1ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c06e:	697b      	ldr	r3, [r7, #20]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	20001340 	.word	0x20001340
 800c07c:	2000133c 	.word	0x2000133c

0800c080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08e      	sub	sp, #56	; 0x38
 800c084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c086:	e0ca      	b.n	800c21e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	da18      	bge.n	800c0c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c08e:	1d3b      	adds	r3, r7, #4
 800c090:	3304      	adds	r3, #4
 800c092:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10a      	bne.n	800c0b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	61fb      	str	r3, [r7, #28]
}
 800c0ac:	bf00      	nop
 800c0ae:	e7fe      	b.n	800c0ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0b6:	6850      	ldr	r0, [r2, #4]
 800c0b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0ba:	6892      	ldr	r2, [r2, #8]
 800c0bc:	4611      	mov	r1, r2
 800c0be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f2c0 80ab 	blt.w	800c21e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	695b      	ldr	r3, [r3, #20]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d004      	beq.n	800c0de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe f8af 	bl	800a23c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0de:	463b      	mov	r3, r7
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff ff6b 	bl	800bfbc <prvSampleTimeNow>
 800c0e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b09      	cmp	r3, #9
 800c0ec:	f200 8096 	bhi.w	800c21c <prvProcessReceivedCommands+0x19c>
 800c0f0:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <prvProcessReceivedCommands+0x78>)
 800c0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f6:	bf00      	nop
 800c0f8:	0800c121 	.word	0x0800c121
 800c0fc:	0800c121 	.word	0x0800c121
 800c100:	0800c121 	.word	0x0800c121
 800c104:	0800c195 	.word	0x0800c195
 800c108:	0800c1a9 	.word	0x0800c1a9
 800c10c:	0800c1f3 	.word	0x0800c1f3
 800c110:	0800c121 	.word	0x0800c121
 800c114:	0800c121 	.word	0x0800c121
 800c118:	0800c195 	.word	0x0800c195
 800c11c:	0800c1a9 	.word	0x0800c1a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c126:	f043 0301 	orr.w	r3, r3, #1
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	18d1      	adds	r1, r2, r3
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c140:	f7ff ff5c 	bl	800bffc <prvInsertTimerInActiveList>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d069      	beq.n	800c21e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c150:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c158:	f003 0304 	and.w	r3, r3, #4
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d05e      	beq.n	800c21e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	441a      	add	r2, r3
 800c168:	2300      	movs	r3, #0
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	2300      	movs	r3, #0
 800c16e:	2100      	movs	r1, #0
 800c170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c172:	f7ff fe05 	bl	800bd80 <xTimerGenericCommand>
 800c176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d14f      	bne.n	800c21e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	61bb      	str	r3, [r7, #24]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c19a:	f023 0301 	bic.w	r3, r3, #1
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c1a6:	e03a      	b.n	800c21e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1ae:	f043 0301 	orr.w	r3, r3, #1
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	f383 8811 	msr	BASEPRI, r3
 800c1d0:	f3bf 8f6f 	isb	sy
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	617b      	str	r3, [r7, #20]
}
 800c1da:	bf00      	nop
 800c1dc:	e7fe      	b.n	800c1dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	699a      	ldr	r2, [r3, #24]
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e4:	18d1      	adds	r1, r2, r3
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ec:	f7ff ff06 	bl	800bffc <prvInsertTimerInActiveList>
					break;
 800c1f0:	e015      	b.n	800c21e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1f8:	f003 0302 	and.w	r3, r3, #2
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d103      	bne.n	800c208 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c202:	f000 fbdd 	bl	800c9c0 <vPortFree>
 800c206:	e00a      	b.n	800c21e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c20e:	f023 0301 	bic.w	r3, r3, #1
 800c212:	b2da      	uxtb	r2, r3
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c21a:	e000      	b.n	800c21e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c21c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c21e:	4b08      	ldr	r3, [pc, #32]	; (800c240 <prvProcessReceivedCommands+0x1c0>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	1d39      	adds	r1, r7, #4
 800c224:	2200      	movs	r2, #0
 800c226:	4618      	mov	r0, r3
 800c228:	f7fe fb74 	bl	800a914 <xQueueReceive>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f47f af2a 	bne.w	800c088 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c234:	bf00      	nop
 800c236:	bf00      	nop
 800c238:	3730      	adds	r7, #48	; 0x30
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20001344 	.word	0x20001344

0800c244 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b088      	sub	sp, #32
 800c248:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c24a:	e048      	b.n	800c2de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c24c:	4b2d      	ldr	r3, [pc, #180]	; (800c304 <prvSwitchTimerLists+0xc0>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c256:	4b2b      	ldr	r3, [pc, #172]	; (800c304 <prvSwitchTimerLists+0xc0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	3304      	adds	r3, #4
 800c264:	4618      	mov	r0, r3
 800c266:	f7fd ffe9 	bl	800a23c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d02e      	beq.n	800c2de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	4413      	add	r3, r2
 800c288:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d90e      	bls.n	800c2b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c29e:	4b19      	ldr	r3, [pc, #100]	; (800c304 <prvSwitchTimerLists+0xc0>)
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	f7fd ff8e 	bl	800a1ca <vListInsert>
 800c2ae:	e016      	b.n	800c2de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f7ff fd60 	bl	800bd80 <xTimerGenericCommand>
 800c2c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10a      	bne.n	800c2de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	603b      	str	r3, [r7, #0]
}
 800c2da:	bf00      	nop
 800c2dc:	e7fe      	b.n	800c2dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2de:	4b09      	ldr	r3, [pc, #36]	; (800c304 <prvSwitchTimerLists+0xc0>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1b1      	bne.n	800c24c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2e8:	4b06      	ldr	r3, [pc, #24]	; (800c304 <prvSwitchTimerLists+0xc0>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2ee:	4b06      	ldr	r3, [pc, #24]	; (800c308 <prvSwitchTimerLists+0xc4>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a04      	ldr	r2, [pc, #16]	; (800c304 <prvSwitchTimerLists+0xc0>)
 800c2f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2f6:	4a04      	ldr	r2, [pc, #16]	; (800c308 <prvSwitchTimerLists+0xc4>)
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	6013      	str	r3, [r2, #0]
}
 800c2fc:	bf00      	nop
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	2000133c 	.word	0x2000133c
 800c308:	20001340 	.word	0x20001340

0800c30c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c312:	f000 f967 	bl	800c5e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c316:	4b15      	ldr	r3, [pc, #84]	; (800c36c <prvCheckForValidListAndQueue+0x60>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d120      	bne.n	800c360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c31e:	4814      	ldr	r0, [pc, #80]	; (800c370 <prvCheckForValidListAndQueue+0x64>)
 800c320:	f7fd ff02 	bl	800a128 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c324:	4813      	ldr	r0, [pc, #76]	; (800c374 <prvCheckForValidListAndQueue+0x68>)
 800c326:	f7fd feff 	bl	800a128 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c32a:	4b13      	ldr	r3, [pc, #76]	; (800c378 <prvCheckForValidListAndQueue+0x6c>)
 800c32c:	4a10      	ldr	r2, [pc, #64]	; (800c370 <prvCheckForValidListAndQueue+0x64>)
 800c32e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c330:	4b12      	ldr	r3, [pc, #72]	; (800c37c <prvCheckForValidListAndQueue+0x70>)
 800c332:	4a10      	ldr	r2, [pc, #64]	; (800c374 <prvCheckForValidListAndQueue+0x68>)
 800c334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c336:	2300      	movs	r3, #0
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	4b11      	ldr	r3, [pc, #68]	; (800c380 <prvCheckForValidListAndQueue+0x74>)
 800c33c:	4a11      	ldr	r2, [pc, #68]	; (800c384 <prvCheckForValidListAndQueue+0x78>)
 800c33e:	2110      	movs	r1, #16
 800c340:	200a      	movs	r0, #10
 800c342:	f7fe f80d 	bl	800a360 <xQueueGenericCreateStatic>
 800c346:	4603      	mov	r3, r0
 800c348:	4a08      	ldr	r2, [pc, #32]	; (800c36c <prvCheckForValidListAndQueue+0x60>)
 800c34a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c34c:	4b07      	ldr	r3, [pc, #28]	; (800c36c <prvCheckForValidListAndQueue+0x60>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c354:	4b05      	ldr	r3, [pc, #20]	; (800c36c <prvCheckForValidListAndQueue+0x60>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	490b      	ldr	r1, [pc, #44]	; (800c388 <prvCheckForValidListAndQueue+0x7c>)
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe fcee 	bl	800ad3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c360:	f000 f970 	bl	800c644 <vPortExitCritical>
}
 800c364:	bf00      	nop
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20001344 	.word	0x20001344
 800c370:	20001314 	.word	0x20001314
 800c374:	20001328 	.word	0x20001328
 800c378:	2000133c 	.word	0x2000133c
 800c37c:	20001340 	.word	0x20001340
 800c380:	200013f0 	.word	0x200013f0
 800c384:	20001350 	.word	0x20001350
 800c388:	0800ced4 	.word	0x0800ced4

0800c38c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3b04      	subs	r3, #4
 800c39c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3b04      	subs	r3, #4
 800c3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	f023 0201 	bic.w	r2, r3, #1
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3b04      	subs	r3, #4
 800c3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3bc:	4a0c      	ldr	r2, [pc, #48]	; (800c3f0 <pxPortInitialiseStack+0x64>)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3b14      	subs	r3, #20
 800c3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3b04      	subs	r3, #4
 800c3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f06f 0202 	mvn.w	r2, #2
 800c3da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	3b20      	subs	r3, #32
 800c3e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	0800c3f5 	.word	0x0800c3f5

0800c3f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3fe:	4b12      	ldr	r3, [pc, #72]	; (800c448 <prvTaskExitError+0x54>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c406:	d00a      	beq.n	800c41e <prvTaskExitError+0x2a>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	60fb      	str	r3, [r7, #12]
}
 800c41a:	bf00      	nop
 800c41c:	e7fe      	b.n	800c41c <prvTaskExitError+0x28>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	60bb      	str	r3, [r7, #8]
}
 800c430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c432:	bf00      	nop
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d0fc      	beq.n	800c434 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c43a:	bf00      	nop
 800c43c:	bf00      	nop
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	2000000c 	.word	0x2000000c
 800c44c:	00000000 	.word	0x00000000

0800c450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c450:	4b07      	ldr	r3, [pc, #28]	; (800c470 <pxCurrentTCBConst2>)
 800c452:	6819      	ldr	r1, [r3, #0]
 800c454:	6808      	ldr	r0, [r1, #0]
 800c456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45a:	f380 8809 	msr	PSP, r0
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f04f 0000 	mov.w	r0, #0
 800c466:	f380 8811 	msr	BASEPRI, r0
 800c46a:	4770      	bx	lr
 800c46c:	f3af 8000 	nop.w

0800c470 <pxCurrentTCBConst2>:
 800c470:	20000e0c 	.word	0x20000e0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c474:	bf00      	nop
 800c476:	bf00      	nop

0800c478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c478:	4808      	ldr	r0, [pc, #32]	; (800c49c <prvPortStartFirstTask+0x24>)
 800c47a:	6800      	ldr	r0, [r0, #0]
 800c47c:	6800      	ldr	r0, [r0, #0]
 800c47e:	f380 8808 	msr	MSP, r0
 800c482:	f04f 0000 	mov.w	r0, #0
 800c486:	f380 8814 	msr	CONTROL, r0
 800c48a:	b662      	cpsie	i
 800c48c:	b661      	cpsie	f
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	df00      	svc	0
 800c498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c49a:	bf00      	nop
 800c49c:	e000ed08 	.word	0xe000ed08

0800c4a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4a6:	4b46      	ldr	r3, [pc, #280]	; (800c5c0 <xPortStartScheduler+0x120>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a46      	ldr	r2, [pc, #280]	; (800c5c4 <xPortStartScheduler+0x124>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d10a      	bne.n	800c4c6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	613b      	str	r3, [r7, #16]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4c6:	4b3e      	ldr	r3, [pc, #248]	; (800c5c0 <xPortStartScheduler+0x120>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a3f      	ldr	r2, [pc, #252]	; (800c5c8 <xPortStartScheduler+0x128>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d10a      	bne.n	800c4e6 <xPortStartScheduler+0x46>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	60fb      	str	r3, [r7, #12]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4e6:	4b39      	ldr	r3, [pc, #228]	; (800c5cc <xPortStartScheduler+0x12c>)
 800c4e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	22ff      	movs	r2, #255	; 0xff
 800c4f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	4b31      	ldr	r3, [pc, #196]	; (800c5d0 <xPortStartScheduler+0x130>)
 800c50c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c50e:	4b31      	ldr	r3, [pc, #196]	; (800c5d4 <xPortStartScheduler+0x134>)
 800c510:	2207      	movs	r2, #7
 800c512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c514:	e009      	b.n	800c52a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c516:	4b2f      	ldr	r3, [pc, #188]	; (800c5d4 <xPortStartScheduler+0x134>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	3b01      	subs	r3, #1
 800c51c:	4a2d      	ldr	r2, [pc, #180]	; (800c5d4 <xPortStartScheduler+0x134>)
 800c51e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	b2db      	uxtb	r3, r3
 800c528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c52a:	78fb      	ldrb	r3, [r7, #3]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c532:	2b80      	cmp	r3, #128	; 0x80
 800c534:	d0ef      	beq.n	800c516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c536:	4b27      	ldr	r3, [pc, #156]	; (800c5d4 <xPortStartScheduler+0x134>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f1c3 0307 	rsb	r3, r3, #7
 800c53e:	2b04      	cmp	r3, #4
 800c540:	d00a      	beq.n	800c558 <xPortStartScheduler+0xb8>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	60bb      	str	r3, [r7, #8]
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c558:	4b1e      	ldr	r3, [pc, #120]	; (800c5d4 <xPortStartScheduler+0x134>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	021b      	lsls	r3, r3, #8
 800c55e:	4a1d      	ldr	r2, [pc, #116]	; (800c5d4 <xPortStartScheduler+0x134>)
 800c560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c562:	4b1c      	ldr	r3, [pc, #112]	; (800c5d4 <xPortStartScheduler+0x134>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c56a:	4a1a      	ldr	r2, [pc, #104]	; (800c5d4 <xPortStartScheduler+0x134>)
 800c56c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	b2da      	uxtb	r2, r3
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c576:	4b18      	ldr	r3, [pc, #96]	; (800c5d8 <xPortStartScheduler+0x138>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a17      	ldr	r2, [pc, #92]	; (800c5d8 <xPortStartScheduler+0x138>)
 800c57c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c582:	4b15      	ldr	r3, [pc, #84]	; (800c5d8 <xPortStartScheduler+0x138>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a14      	ldr	r2, [pc, #80]	; (800c5d8 <xPortStartScheduler+0x138>)
 800c588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c58c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c58e:	f000 f8dd 	bl	800c74c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c592:	4b12      	ldr	r3, [pc, #72]	; (800c5dc <xPortStartScheduler+0x13c>)
 800c594:	2200      	movs	r2, #0
 800c596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c598:	f000 f8fc 	bl	800c794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c59c:	4b10      	ldr	r3, [pc, #64]	; (800c5e0 <xPortStartScheduler+0x140>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a0f      	ldr	r2, [pc, #60]	; (800c5e0 <xPortStartScheduler+0x140>)
 800c5a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5a8:	f7ff ff66 	bl	800c478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5ac:	f7ff f82c 	bl	800b608 <vTaskSwitchContext>
	prvTaskExitError();
 800c5b0:	f7ff ff20 	bl	800c3f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	e000ed00 	.word	0xe000ed00
 800c5c4:	410fc271 	.word	0x410fc271
 800c5c8:	410fc270 	.word	0x410fc270
 800c5cc:	e000e400 	.word	0xe000e400
 800c5d0:	20001440 	.word	0x20001440
 800c5d4:	20001444 	.word	0x20001444
 800c5d8:	e000ed20 	.word	0xe000ed20
 800c5dc:	2000000c 	.word	0x2000000c
 800c5e0:	e000ef34 	.word	0xe000ef34

0800c5e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	607b      	str	r3, [r7, #4]
}
 800c5fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5fe:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <vPortEnterCritical+0x58>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3301      	adds	r3, #1
 800c604:	4a0d      	ldr	r2, [pc, #52]	; (800c63c <vPortEnterCritical+0x58>)
 800c606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c608:	4b0c      	ldr	r3, [pc, #48]	; (800c63c <vPortEnterCritical+0x58>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d10f      	bne.n	800c630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c610:	4b0b      	ldr	r3, [pc, #44]	; (800c640 <vPortEnterCritical+0x5c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00a      	beq.n	800c630 <vPortEnterCritical+0x4c>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	603b      	str	r3, [r7, #0]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <vPortEnterCritical+0x4a>
	}
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr
 800c63c:	2000000c 	.word	0x2000000c
 800c640:	e000ed04 	.word	0xe000ed04

0800c644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c64a:	4b12      	ldr	r3, [pc, #72]	; (800c694 <vPortExitCritical+0x50>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <vPortExitCritical+0x24>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	607b      	str	r3, [r7, #4]
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c668:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <vPortExitCritical+0x50>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	4a09      	ldr	r2, [pc, #36]	; (800c694 <vPortExitCritical+0x50>)
 800c670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c672:	4b08      	ldr	r3, [pc, #32]	; (800c694 <vPortExitCritical+0x50>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d105      	bne.n	800c686 <vPortExitCritical+0x42>
 800c67a:	2300      	movs	r3, #0
 800c67c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	f383 8811 	msr	BASEPRI, r3
}
 800c684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c686:	bf00      	nop
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	2000000c 	.word	0x2000000c
	...

0800c6a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6a0:	f3ef 8009 	mrs	r0, PSP
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	4b15      	ldr	r3, [pc, #84]	; (800c700 <pxCurrentTCBConst>)
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	f01e 0f10 	tst.w	lr, #16
 800c6b0:	bf08      	it	eq
 800c6b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ba:	6010      	str	r0, [r2, #0]
 800c6bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6c4:	f380 8811 	msr	BASEPRI, r0
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f7fe ff9a 	bl	800b608 <vTaskSwitchContext>
 800c6d4:	f04f 0000 	mov.w	r0, #0
 800c6d8:	f380 8811 	msr	BASEPRI, r0
 800c6dc:	bc09      	pop	{r0, r3}
 800c6de:	6819      	ldr	r1, [r3, #0]
 800c6e0:	6808      	ldr	r0, [r1, #0]
 800c6e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e6:	f01e 0f10 	tst.w	lr, #16
 800c6ea:	bf08      	it	eq
 800c6ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6f0:	f380 8809 	msr	PSP, r0
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	f3af 8000 	nop.w

0800c700 <pxCurrentTCBConst>:
 800c700:	20000e0c 	.word	0x20000e0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop

0800c708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
	__asm volatile
 800c70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	607b      	str	r3, [r7, #4]
}
 800c720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c722:	f7fe feb7 	bl	800b494 <xTaskIncrementTick>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d003      	beq.n	800c734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c72c:	4b06      	ldr	r3, [pc, #24]	; (800c748 <xPortSysTickHandler+0x40>)
 800c72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c732:	601a      	str	r2, [r3, #0]
 800c734:	2300      	movs	r3, #0
 800c736:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	f383 8811 	msr	BASEPRI, r3
}
 800c73e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c740:	bf00      	nop
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	e000ed04 	.word	0xe000ed04

0800c74c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c74c:	b480      	push	{r7}
 800c74e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c750:	4b0b      	ldr	r3, [pc, #44]	; (800c780 <vPortSetupTimerInterrupt+0x34>)
 800c752:	2200      	movs	r2, #0
 800c754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c756:	4b0b      	ldr	r3, [pc, #44]	; (800c784 <vPortSetupTimerInterrupt+0x38>)
 800c758:	2200      	movs	r2, #0
 800c75a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c75c:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <vPortSetupTimerInterrupt+0x3c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a0a      	ldr	r2, [pc, #40]	; (800c78c <vPortSetupTimerInterrupt+0x40>)
 800c762:	fba2 2303 	umull	r2, r3, r2, r3
 800c766:	099b      	lsrs	r3, r3, #6
 800c768:	4a09      	ldr	r2, [pc, #36]	; (800c790 <vPortSetupTimerInterrupt+0x44>)
 800c76a:	3b01      	subs	r3, #1
 800c76c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c76e:	4b04      	ldr	r3, [pc, #16]	; (800c780 <vPortSetupTimerInterrupt+0x34>)
 800c770:	2207      	movs	r2, #7
 800c772:	601a      	str	r2, [r3, #0]
}
 800c774:	bf00      	nop
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	e000e010 	.word	0xe000e010
 800c784:	e000e018 	.word	0xe000e018
 800c788:	20000000 	.word	0x20000000
 800c78c:	10624dd3 	.word	0x10624dd3
 800c790:	e000e014 	.word	0xe000e014

0800c794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7a4 <vPortEnableVFP+0x10>
 800c798:	6801      	ldr	r1, [r0, #0]
 800c79a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c79e:	6001      	str	r1, [r0, #0]
 800c7a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7a2:	bf00      	nop
 800c7a4:	e000ed88 	.word	0xe000ed88

0800c7a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7ae:	f3ef 8305 	mrs	r3, IPSR
 800c7b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b0f      	cmp	r3, #15
 800c7b8:	d914      	bls.n	800c7e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ba:	4a17      	ldr	r2, [pc, #92]	; (800c818 <vPortValidateInterruptPriority+0x70>)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	4413      	add	r3, r2
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7c4:	4b15      	ldr	r3, [pc, #84]	; (800c81c <vPortValidateInterruptPriority+0x74>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	7afa      	ldrb	r2, [r7, #11]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d20a      	bcs.n	800c7e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	607b      	str	r3, [r7, #4]
}
 800c7e0:	bf00      	nop
 800c7e2:	e7fe      	b.n	800c7e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7e4:	4b0e      	ldr	r3, [pc, #56]	; (800c820 <vPortValidateInterruptPriority+0x78>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7ec:	4b0d      	ldr	r3, [pc, #52]	; (800c824 <vPortValidateInterruptPriority+0x7c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d90a      	bls.n	800c80a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	f383 8811 	msr	BASEPRI, r3
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	603b      	str	r3, [r7, #0]
}
 800c806:	bf00      	nop
 800c808:	e7fe      	b.n	800c808 <vPortValidateInterruptPriority+0x60>
	}
 800c80a:	bf00      	nop
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	e000e3f0 	.word	0xe000e3f0
 800c81c:	20001440 	.word	0x20001440
 800c820:	e000ed0c 	.word	0xe000ed0c
 800c824:	20001444 	.word	0x20001444

0800c828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08a      	sub	sp, #40	; 0x28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c830:	2300      	movs	r3, #0
 800c832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c834:	f7fe fd72 	bl	800b31c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c838:	4b5b      	ldr	r3, [pc, #364]	; (800c9a8 <pvPortMalloc+0x180>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c840:	f000 f920 	bl	800ca84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c844:	4b59      	ldr	r3, [pc, #356]	; (800c9ac <pvPortMalloc+0x184>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4013      	ands	r3, r2
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f040 8093 	bne.w	800c978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d01d      	beq.n	800c894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c858:	2208      	movs	r2, #8
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4413      	add	r3, r2
 800c85e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f003 0307 	and.w	r3, r3, #7
 800c866:	2b00      	cmp	r3, #0
 800c868:	d014      	beq.n	800c894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f023 0307 	bic.w	r3, r3, #7
 800c870:	3308      	adds	r3, #8
 800c872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <pvPortMalloc+0x6c>
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	617b      	str	r3, [r7, #20]
}
 800c890:	bf00      	nop
 800c892:	e7fe      	b.n	800c892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d06e      	beq.n	800c978 <pvPortMalloc+0x150>
 800c89a:	4b45      	ldr	r3, [pc, #276]	; (800c9b0 <pvPortMalloc+0x188>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d869      	bhi.n	800c978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8a4:	4b43      	ldr	r3, [pc, #268]	; (800c9b4 <pvPortMalloc+0x18c>)
 800c8a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8a8:	4b42      	ldr	r3, [pc, #264]	; (800c9b4 <pvPortMalloc+0x18c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ae:	e004      	b.n	800c8ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d903      	bls.n	800c8cc <pvPortMalloc+0xa4>
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1f1      	bne.n	800c8b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8cc:	4b36      	ldr	r3, [pc, #216]	; (800c9a8 <pvPortMalloc+0x180>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d050      	beq.n	800c978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2208      	movs	r2, #8
 800c8dc:	4413      	add	r3, r2
 800c8de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	6a3b      	ldr	r3, [r7, #32]
 800c8e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	2308      	movs	r3, #8
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d91f      	bls.n	800c938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	f003 0307 	and.w	r3, r3, #7
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00a      	beq.n	800c920 <pvPortMalloc+0xf8>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	613b      	str	r3, [r7, #16]
}
 800c91c:	bf00      	nop
 800c91e:	e7fe      	b.n	800c91e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	1ad2      	subs	r2, r2, r3
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c932:	69b8      	ldr	r0, [r7, #24]
 800c934:	f000 f908 	bl	800cb48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c938:	4b1d      	ldr	r3, [pc, #116]	; (800c9b0 <pvPortMalloc+0x188>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	4a1b      	ldr	r2, [pc, #108]	; (800c9b0 <pvPortMalloc+0x188>)
 800c944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c946:	4b1a      	ldr	r3, [pc, #104]	; (800c9b0 <pvPortMalloc+0x188>)
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <pvPortMalloc+0x190>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d203      	bcs.n	800c95a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c952:	4b17      	ldr	r3, [pc, #92]	; (800c9b0 <pvPortMalloc+0x188>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a18      	ldr	r2, [pc, #96]	; (800c9b8 <pvPortMalloc+0x190>)
 800c958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	4b13      	ldr	r3, [pc, #76]	; (800c9ac <pvPortMalloc+0x184>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	431a      	orrs	r2, r3
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	2200      	movs	r2, #0
 800c96c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c96e:	4b13      	ldr	r3, [pc, #76]	; (800c9bc <pvPortMalloc+0x194>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3301      	adds	r3, #1
 800c974:	4a11      	ldr	r2, [pc, #68]	; (800c9bc <pvPortMalloc+0x194>)
 800c976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c978:	f7fe fcde 	bl	800b338 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	f003 0307 	and.w	r3, r3, #7
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00a      	beq.n	800c99c <pvPortMalloc+0x174>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	60fb      	str	r3, [r7, #12]
}
 800c998:	bf00      	nop
 800c99a:	e7fe      	b.n	800c99a <pvPortMalloc+0x172>
	return pvReturn;
 800c99c:	69fb      	ldr	r3, [r7, #28]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3728      	adds	r7, #40	; 0x28
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	20009450 	.word	0x20009450
 800c9ac:	20009464 	.word	0x20009464
 800c9b0:	20009454 	.word	0x20009454
 800c9b4:	20009448 	.word	0x20009448
 800c9b8:	20009458 	.word	0x20009458
 800c9bc:	2000945c 	.word	0x2000945c

0800c9c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d04d      	beq.n	800ca6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9d2:	2308      	movs	r3, #8
 800c9d4:	425b      	negs	r3, r3
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	4413      	add	r3, r2
 800c9da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	4b24      	ldr	r3, [pc, #144]	; (800ca78 <vPortFree+0xb8>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4013      	ands	r3, r2
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10a      	bne.n	800ca04 <vPortFree+0x44>
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	60fb      	str	r3, [r7, #12]
}
 800ca00:	bf00      	nop
 800ca02:	e7fe      	b.n	800ca02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00a      	beq.n	800ca22 <vPortFree+0x62>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	60bb      	str	r3, [r7, #8]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	4b14      	ldr	r3, [pc, #80]	; (800ca78 <vPortFree+0xb8>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d01e      	beq.n	800ca6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d11a      	bne.n	800ca6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	4b0e      	ldr	r3, [pc, #56]	; (800ca78 <vPortFree+0xb8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	43db      	mvns	r3, r3
 800ca42:	401a      	ands	r2, r3
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca48:	f7fe fc68 	bl	800b31c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	4b0a      	ldr	r3, [pc, #40]	; (800ca7c <vPortFree+0xbc>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4413      	add	r3, r2
 800ca56:	4a09      	ldr	r2, [pc, #36]	; (800ca7c <vPortFree+0xbc>)
 800ca58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca5a:	6938      	ldr	r0, [r7, #16]
 800ca5c:	f000 f874 	bl	800cb48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca60:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <vPortFree+0xc0>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3301      	adds	r3, #1
 800ca66:	4a06      	ldr	r2, [pc, #24]	; (800ca80 <vPortFree+0xc0>)
 800ca68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca6a:	f7fe fc65 	bl	800b338 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca6e:	bf00      	nop
 800ca70:	3718      	adds	r7, #24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20009464 	.word	0x20009464
 800ca7c:	20009454 	.word	0x20009454
 800ca80:	20009460 	.word	0x20009460

0800ca84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca90:	4b27      	ldr	r3, [pc, #156]	; (800cb30 <prvHeapInit+0xac>)
 800ca92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f003 0307 	and.w	r3, r3, #7
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00c      	beq.n	800cab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3307      	adds	r3, #7
 800caa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f023 0307 	bic.w	r3, r3, #7
 800caaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	4a1f      	ldr	r2, [pc, #124]	; (800cb30 <prvHeapInit+0xac>)
 800cab4:	4413      	add	r3, r2
 800cab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cabc:	4a1d      	ldr	r2, [pc, #116]	; (800cb34 <prvHeapInit+0xb0>)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cac2:	4b1c      	ldr	r3, [pc, #112]	; (800cb34 <prvHeapInit+0xb0>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	4413      	add	r3, r2
 800cace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cad0:	2208      	movs	r2, #8
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	1a9b      	subs	r3, r3, r2
 800cad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f023 0307 	bic.w	r3, r3, #7
 800cade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	4a15      	ldr	r2, [pc, #84]	; (800cb38 <prvHeapInit+0xb4>)
 800cae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cae6:	4b14      	ldr	r3, [pc, #80]	; (800cb38 <prvHeapInit+0xb4>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2200      	movs	r2, #0
 800caec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800caee:	4b12      	ldr	r3, [pc, #72]	; (800cb38 <prvHeapInit+0xb4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	1ad2      	subs	r2, r2, r3
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb04:	4b0c      	ldr	r3, [pc, #48]	; (800cb38 <prvHeapInit+0xb4>)
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	4a0a      	ldr	r2, [pc, #40]	; (800cb3c <prvHeapInit+0xb8>)
 800cb12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4a09      	ldr	r2, [pc, #36]	; (800cb40 <prvHeapInit+0xbc>)
 800cb1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb1c:	4b09      	ldr	r3, [pc, #36]	; (800cb44 <prvHeapInit+0xc0>)
 800cb1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb22:	601a      	str	r2, [r3, #0]
}
 800cb24:	bf00      	nop
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr
 800cb30:	20001448 	.word	0x20001448
 800cb34:	20009448 	.word	0x20009448
 800cb38:	20009450 	.word	0x20009450
 800cb3c:	20009458 	.word	0x20009458
 800cb40:	20009454 	.word	0x20009454
 800cb44:	20009464 	.word	0x20009464

0800cb48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb50:	4b28      	ldr	r3, [pc, #160]	; (800cbf4 <prvInsertBlockIntoFreeList+0xac>)
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	e002      	b.n	800cb5c <prvInsertBlockIntoFreeList+0x14>
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d8f7      	bhi.n	800cb56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	4413      	add	r3, r2
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d108      	bne.n	800cb8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	441a      	add	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	441a      	add	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d118      	bne.n	800cbd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	4b15      	ldr	r3, [pc, #84]	; (800cbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d00d      	beq.n	800cbc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	441a      	add	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	601a      	str	r2, [r3, #0]
 800cbc4:	e008      	b.n	800cbd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbc6:	4b0c      	ldr	r3, [pc, #48]	; (800cbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	e003      	b.n	800cbd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d002      	beq.n	800cbe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbe6:	bf00      	nop
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	20009448 	.word	0x20009448
 800cbf8:	20009450 	.word	0x20009450

0800cbfc <memset>:
 800cbfc:	4402      	add	r2, r0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d100      	bne.n	800cc06 <memset+0xa>
 800cc04:	4770      	bx	lr
 800cc06:	f803 1b01 	strb.w	r1, [r3], #1
 800cc0a:	e7f9      	b.n	800cc00 <memset+0x4>

0800cc0c <_reclaim_reent>:
 800cc0c:	4b29      	ldr	r3, [pc, #164]	; (800ccb4 <_reclaim_reent+0xa8>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4283      	cmp	r3, r0
 800cc12:	b570      	push	{r4, r5, r6, lr}
 800cc14:	4604      	mov	r4, r0
 800cc16:	d04b      	beq.n	800ccb0 <_reclaim_reent+0xa4>
 800cc18:	69c3      	ldr	r3, [r0, #28]
 800cc1a:	b143      	cbz	r3, 800cc2e <_reclaim_reent+0x22>
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d144      	bne.n	800ccac <_reclaim_reent+0xa0>
 800cc22:	69e3      	ldr	r3, [r4, #28]
 800cc24:	6819      	ldr	r1, [r3, #0]
 800cc26:	b111      	cbz	r1, 800cc2e <_reclaim_reent+0x22>
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f000 f879 	bl	800cd20 <_free_r>
 800cc2e:	6961      	ldr	r1, [r4, #20]
 800cc30:	b111      	cbz	r1, 800cc38 <_reclaim_reent+0x2c>
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 f874 	bl	800cd20 <_free_r>
 800cc38:	69e1      	ldr	r1, [r4, #28]
 800cc3a:	b111      	cbz	r1, 800cc42 <_reclaim_reent+0x36>
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f000 f86f 	bl	800cd20 <_free_r>
 800cc42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cc44:	b111      	cbz	r1, 800cc4c <_reclaim_reent+0x40>
 800cc46:	4620      	mov	r0, r4
 800cc48:	f000 f86a 	bl	800cd20 <_free_r>
 800cc4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc4e:	b111      	cbz	r1, 800cc56 <_reclaim_reent+0x4a>
 800cc50:	4620      	mov	r0, r4
 800cc52:	f000 f865 	bl	800cd20 <_free_r>
 800cc56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cc58:	b111      	cbz	r1, 800cc60 <_reclaim_reent+0x54>
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 f860 	bl	800cd20 <_free_r>
 800cc60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cc62:	b111      	cbz	r1, 800cc6a <_reclaim_reent+0x5e>
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 f85b 	bl	800cd20 <_free_r>
 800cc6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cc6c:	b111      	cbz	r1, 800cc74 <_reclaim_reent+0x68>
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f000 f856 	bl	800cd20 <_free_r>
 800cc74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cc76:	b111      	cbz	r1, 800cc7e <_reclaim_reent+0x72>
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 f851 	bl	800cd20 <_free_r>
 800cc7e:	6a23      	ldr	r3, [r4, #32]
 800cc80:	b1b3      	cbz	r3, 800ccb0 <_reclaim_reent+0xa4>
 800cc82:	4620      	mov	r0, r4
 800cc84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc88:	4718      	bx	r3
 800cc8a:	5949      	ldr	r1, [r1, r5]
 800cc8c:	b941      	cbnz	r1, 800cca0 <_reclaim_reent+0x94>
 800cc8e:	3504      	adds	r5, #4
 800cc90:	69e3      	ldr	r3, [r4, #28]
 800cc92:	2d80      	cmp	r5, #128	; 0x80
 800cc94:	68d9      	ldr	r1, [r3, #12]
 800cc96:	d1f8      	bne.n	800cc8a <_reclaim_reent+0x7e>
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f000 f841 	bl	800cd20 <_free_r>
 800cc9e:	e7c0      	b.n	800cc22 <_reclaim_reent+0x16>
 800cca0:	680e      	ldr	r6, [r1, #0]
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 f83c 	bl	800cd20 <_free_r>
 800cca8:	4631      	mov	r1, r6
 800ccaa:	e7ef      	b.n	800cc8c <_reclaim_reent+0x80>
 800ccac:	2500      	movs	r5, #0
 800ccae:	e7ef      	b.n	800cc90 <_reclaim_reent+0x84>
 800ccb0:	bd70      	pop	{r4, r5, r6, pc}
 800ccb2:	bf00      	nop
 800ccb4:	2000005c 	.word	0x2000005c

0800ccb8 <__libc_init_array>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	4d0d      	ldr	r5, [pc, #52]	; (800ccf0 <__libc_init_array+0x38>)
 800ccbc:	4c0d      	ldr	r4, [pc, #52]	; (800ccf4 <__libc_init_array+0x3c>)
 800ccbe:	1b64      	subs	r4, r4, r5
 800ccc0:	10a4      	asrs	r4, r4, #2
 800ccc2:	2600      	movs	r6, #0
 800ccc4:	42a6      	cmp	r6, r4
 800ccc6:	d109      	bne.n	800ccdc <__libc_init_array+0x24>
 800ccc8:	4d0b      	ldr	r5, [pc, #44]	; (800ccf8 <__libc_init_array+0x40>)
 800ccca:	4c0c      	ldr	r4, [pc, #48]	; (800ccfc <__libc_init_array+0x44>)
 800cccc:	f000 f880 	bl	800cdd0 <_init>
 800ccd0:	1b64      	subs	r4, r4, r5
 800ccd2:	10a4      	asrs	r4, r4, #2
 800ccd4:	2600      	movs	r6, #0
 800ccd6:	42a6      	cmp	r6, r4
 800ccd8:	d105      	bne.n	800cce6 <__libc_init_array+0x2e>
 800ccda:	bd70      	pop	{r4, r5, r6, pc}
 800ccdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cce0:	4798      	blx	r3
 800cce2:	3601      	adds	r6, #1
 800cce4:	e7ee      	b.n	800ccc4 <__libc_init_array+0xc>
 800cce6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccea:	4798      	blx	r3
 800ccec:	3601      	adds	r6, #1
 800ccee:	e7f2      	b.n	800ccd6 <__libc_init_array+0x1e>
 800ccf0:	0800d0fc 	.word	0x0800d0fc
 800ccf4:	0800d0fc 	.word	0x0800d0fc
 800ccf8:	0800d0fc 	.word	0x0800d0fc
 800ccfc:	0800d100 	.word	0x0800d100

0800cd00 <__retarget_lock_acquire_recursive>:
 800cd00:	4770      	bx	lr

0800cd02 <__retarget_lock_release_recursive>:
 800cd02:	4770      	bx	lr

0800cd04 <memcpy>:
 800cd04:	440a      	add	r2, r1
 800cd06:	4291      	cmp	r1, r2
 800cd08:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd0c:	d100      	bne.n	800cd10 <memcpy+0xc>
 800cd0e:	4770      	bx	lr
 800cd10:	b510      	push	{r4, lr}
 800cd12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd1a:	4291      	cmp	r1, r2
 800cd1c:	d1f9      	bne.n	800cd12 <memcpy+0xe>
 800cd1e:	bd10      	pop	{r4, pc}

0800cd20 <_free_r>:
 800cd20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd22:	2900      	cmp	r1, #0
 800cd24:	d044      	beq.n	800cdb0 <_free_r+0x90>
 800cd26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd2a:	9001      	str	r0, [sp, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f1a1 0404 	sub.w	r4, r1, #4
 800cd32:	bfb8      	it	lt
 800cd34:	18e4      	addlt	r4, r4, r3
 800cd36:	f000 f83f 	bl	800cdb8 <__malloc_lock>
 800cd3a:	4a1e      	ldr	r2, [pc, #120]	; (800cdb4 <_free_r+0x94>)
 800cd3c:	9801      	ldr	r0, [sp, #4]
 800cd3e:	6813      	ldr	r3, [r2, #0]
 800cd40:	b933      	cbnz	r3, 800cd50 <_free_r+0x30>
 800cd42:	6063      	str	r3, [r4, #4]
 800cd44:	6014      	str	r4, [r2, #0]
 800cd46:	b003      	add	sp, #12
 800cd48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd4c:	f000 b83a 	b.w	800cdc4 <__malloc_unlock>
 800cd50:	42a3      	cmp	r3, r4
 800cd52:	d908      	bls.n	800cd66 <_free_r+0x46>
 800cd54:	6825      	ldr	r5, [r4, #0]
 800cd56:	1961      	adds	r1, r4, r5
 800cd58:	428b      	cmp	r3, r1
 800cd5a:	bf01      	itttt	eq
 800cd5c:	6819      	ldreq	r1, [r3, #0]
 800cd5e:	685b      	ldreq	r3, [r3, #4]
 800cd60:	1949      	addeq	r1, r1, r5
 800cd62:	6021      	streq	r1, [r4, #0]
 800cd64:	e7ed      	b.n	800cd42 <_free_r+0x22>
 800cd66:	461a      	mov	r2, r3
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	b10b      	cbz	r3, 800cd70 <_free_r+0x50>
 800cd6c:	42a3      	cmp	r3, r4
 800cd6e:	d9fa      	bls.n	800cd66 <_free_r+0x46>
 800cd70:	6811      	ldr	r1, [r2, #0]
 800cd72:	1855      	adds	r5, r2, r1
 800cd74:	42a5      	cmp	r5, r4
 800cd76:	d10b      	bne.n	800cd90 <_free_r+0x70>
 800cd78:	6824      	ldr	r4, [r4, #0]
 800cd7a:	4421      	add	r1, r4
 800cd7c:	1854      	adds	r4, r2, r1
 800cd7e:	42a3      	cmp	r3, r4
 800cd80:	6011      	str	r1, [r2, #0]
 800cd82:	d1e0      	bne.n	800cd46 <_free_r+0x26>
 800cd84:	681c      	ldr	r4, [r3, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	6053      	str	r3, [r2, #4]
 800cd8a:	440c      	add	r4, r1
 800cd8c:	6014      	str	r4, [r2, #0]
 800cd8e:	e7da      	b.n	800cd46 <_free_r+0x26>
 800cd90:	d902      	bls.n	800cd98 <_free_r+0x78>
 800cd92:	230c      	movs	r3, #12
 800cd94:	6003      	str	r3, [r0, #0]
 800cd96:	e7d6      	b.n	800cd46 <_free_r+0x26>
 800cd98:	6825      	ldr	r5, [r4, #0]
 800cd9a:	1961      	adds	r1, r4, r5
 800cd9c:	428b      	cmp	r3, r1
 800cd9e:	bf04      	itt	eq
 800cda0:	6819      	ldreq	r1, [r3, #0]
 800cda2:	685b      	ldreq	r3, [r3, #4]
 800cda4:	6063      	str	r3, [r4, #4]
 800cda6:	bf04      	itt	eq
 800cda8:	1949      	addeq	r1, r1, r5
 800cdaa:	6021      	streq	r1, [r4, #0]
 800cdac:	6054      	str	r4, [r2, #4]
 800cdae:	e7ca      	b.n	800cd46 <_free_r+0x26>
 800cdb0:	b003      	add	sp, #12
 800cdb2:	bd30      	pop	{r4, r5, pc}
 800cdb4:	200095a4 	.word	0x200095a4

0800cdb8 <__malloc_lock>:
 800cdb8:	4801      	ldr	r0, [pc, #4]	; (800cdc0 <__malloc_lock+0x8>)
 800cdba:	f7ff bfa1 	b.w	800cd00 <__retarget_lock_acquire_recursive>
 800cdbe:	bf00      	nop
 800cdc0:	200095a0 	.word	0x200095a0

0800cdc4 <__malloc_unlock>:
 800cdc4:	4801      	ldr	r0, [pc, #4]	; (800cdcc <__malloc_unlock+0x8>)
 800cdc6:	f7ff bf9c 	b.w	800cd02 <__retarget_lock_release_recursive>
 800cdca:	bf00      	nop
 800cdcc:	200095a0 	.word	0x200095a0

0800cdd0 <_init>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr

0800cddc <_fini>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	bf00      	nop
 800cde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde2:	bc08      	pop	{r3}
 800cde4:	469e      	mov	lr, r3
 800cde6:	4770      	bx	lr
